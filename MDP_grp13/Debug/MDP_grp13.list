
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008068  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d50  08008d50  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d58  08008d58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f48  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004fbc  20004fbc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188e2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003259  00000000  00000000  00038986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  0003bbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d0  00000000  00000000  0003cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ef  00000000  00000000  0003e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013aed  00000000  00000000  000416b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ba7  00000000  00000000  000551a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127d4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000559c  00000000  00000000  00127da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081e0 	.word	0x080081e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080081e0 	.word	0x080081e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <delay>:
uint32_t Difference = 0;
int Is_First_Captured = 0;  // boolean function
uint16_t Distance = 0;
uint16_t uDistCheck1 = 0; uDistCheck2 = 0; uDistFinal = 0;

void delay(uint16_t time){  //provide us delay
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <delay+0x30>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
 8000eb6:	bf00      	nop
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <delay+0x30>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3f9      	bcc.n	8000eb8 <delay+0x14>
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20004a20 	.word	0x20004a20

08000ed8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7f1b      	ldrb	r3, [r3, #28]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	f040 8083 	bne.w	8000ff0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000eea:	4b45      	ldr	r3, [pc, #276]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d11a      	bne.n	8000f28 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f002 ffd1 	bl	8003e9c <HAL_TIM_ReadCapturedValue>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a41      	ldr	r2, [pc, #260]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000efe:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f00:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6a1a      	ldr	r2, [r3, #32]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 020a 	bic.w	r2, r2, #10
 8000f14:	621a      	str	r2, [r3, #32]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0202 	orr.w	r2, r2, #2
 8000f24:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8000f26:	e063      	b.n	8000ff0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f28:	4b35      	ldr	r3, [pc, #212]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d15f      	bne.n	8000ff0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000f30:	2100      	movs	r1, #0
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f002 ffb2 	bl	8003e9c <HAL_TIM_ReadCapturedValue>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f3c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d907      	bls.n	8000f62 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	4a2b      	ldr	r2, [pc, #172]	; (800100c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e00f      	b.n	8000f82 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d909      	bls.n	8000f82 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f7c:	33ff      	adds	r3, #255	; 0xff
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f80:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fab4 	bl	80004f4 <__aeabi_ui2d>
 8000f8c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ff8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff fb29 	bl	80005e8 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa6:	f7ff fc49 	bl	800083c <__aeabi_ddiv>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fddb 	bl	8000b6c <__aeabi_d2uiz>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fbc:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a1a      	ldr	r2, [r3, #32]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 020a 	bic.w	r2, r2, #10
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6a12      	ldr	r2, [r2, #32]
 8000fde:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0202 	bic.w	r2, r2, #2
 8000fee:	60da      	str	r2, [r3, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	b020c49c 	.word	0xb020c49c
 8000ffc:	3fa16872 	.word	0x3fa16872
 8001000:	200000a8 	.word	0x200000a8
 8001004:	2000009c 	.word	0x2000009c
 8001008:	200000a0 	.word	0x200000a0
 800100c:	200000a4 	.word	0x200000a4
 8001010:	200000ac 	.word	0x200000ac
 8001014:	20004a20 	.word	0x20004a20

08001018 <HCSR04_Read>:

uint16_t HCSR04_Read (void)		//Read Ultrasonic Distance
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <HCSR04_Read+0x3c>)
 8001024:	f001 fba4 	bl	8002770 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001028:	200a      	movs	r0, #10
 800102a:	f7ff ff3b 	bl	8000ea4 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <HCSR04_Read+0x3c>)
 8001036:	f001 fb9b 	bl	8002770 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HCSR04_Read+0x40>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HCSR04_Read+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 0202 	orr.w	r2, r2, #2
 8001048:	60da      	str	r2, [r3, #12]
	return Distance;
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <HCSR04_Read+0x44>)
 800104c:	881b      	ldrh	r3, [r3, #0]
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40020c00 	.word	0x40020c00
 8001058:	20004a20 	.word	0x20004a20
 800105c:	200000ac 	.word	0x200000ac

08001060 <ultraDistCheck>:

void ultraDistCheck (void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	uDistCheck1 = HCSR04_Read();
 8001064:	f7ff ffd8 	bl	8001018 <HCSR04_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <ultraDistCheck+0xa8>)
 800106e:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f001 f8ab 	bl	80021cc <HAL_Delay>
	uDistCheck2 = HCSR04_Read();
 8001076:	f7ff ffcf 	bl	8001018 <HCSR04_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <ultraDistCheck+0xac>)
 8001080:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8001082:	2064      	movs	r0, #100	; 0x64
 8001084:	f001 f8a2 	bl	80021cc <HAL_Delay>

	while (uDistCheck1 - uDistCheck2 >= 5 || uDistCheck2 - uDistCheck1 >= 5) {
 8001088:	e020      	b.n	80010cc <ultraDistCheck+0x6c>
		uDistCheck1 = HCSR04_Read();
 800108a:	f7ff ffc5 	bl	8001018 <HCSR04_Read>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <ultraDistCheck+0xa8>)
 8001094:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f001 f898 	bl	80021cc <HAL_Delay>
		uDistCheck2 = HCSR04_Read();
 800109c:	f7ff ffbc 	bl	8001018 <HCSR04_Read>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <ultraDistCheck+0xac>)
 80010a6:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80010a8:	2064      	movs	r0, #100	; 0x64
 80010aa:	f001 f88f 	bl	80021cc <HAL_Delay>

		if (uDistCheck1 - uDistCheck2 < 5 || uDistCheck2 - uDistCheck1 < 5) {
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <ultraDistCheck+0xa8>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <ultraDistCheck+0xac>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	dd15      	ble.n	80010ea <ultraDistCheck+0x8a>
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <ultraDistCheck+0xac>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a11      	ldr	r2, [pc, #68]	; (8001108 <ultraDistCheck+0xa8>)
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	dd0e      	ble.n	80010ea <ultraDistCheck+0x8a>
	while (uDistCheck1 - uDistCheck2 >= 5 || uDistCheck2 - uDistCheck1 >= 5) {
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <ultraDistCheck+0xa8>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <ultraDistCheck+0xac>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b04      	cmp	r3, #4
 80010da:	dcd6      	bgt.n	800108a <ultraDistCheck+0x2a>
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <ultraDistCheck+0xac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <ultraDistCheck+0xa8>)
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	dccf      	bgt.n	800108a <ultraDistCheck+0x2a>
			break;
		}
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <ultraDistCheck+0xa8>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <ultraDistCheck+0xac>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	0fda      	lsrs	r2, r3, #31
 80010f8:	4413      	add	r3, r2
 80010fa:	105b      	asrs	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <ultraDistCheck+0xb0>)
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000ae 	.word	0x200000ae
 800110c:	200000b0 	.word	0x200000b0
 8001110:	200000b4 	.word	0x200000b4
 8001114:	00000000 	.word	0x00000000

08001118 <motorControl>:

//Master function for all motor functions
int motorControl(int speedL, int speedR, char dirL, char dirR, int turn, int time, int dist){
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	4611      	mov	r1, r2
 8001124:	461a      	mov	r2, r3
 8001126:	460b      	mov	r3, r1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	4613      	mov	r3, r2
 800112c:	71bb      	strb	r3, [r7, #6]

	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 800112e:	213c      	movs	r1, #60	; 0x3c
 8001130:	48a3      	ldr	r0, [pc, #652]	; (80013c0 <motorControl+0x2a8>)
 8001132:	f002 faf7 	bl	8003724 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001136:	213c      	movs	r1, #60	; 0x3c
 8001138:	48a2      	ldr	r0, [pc, #648]	; (80013c4 <motorControl+0x2ac>)
 800113a:	f002 faf3 	bl	8003724 <HAL_TIM_Encoder_Start>
	int cntl1 = __HAL_TIM_GET_COUNTER(&htim2);
 800113e:	4ba0      	ldr	r3, [pc, #640]	; (80013c0 <motorControl+0x2a8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	61bb      	str	r3, [r7, #24]
	int cntr1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001146:	4b9f      	ldr	r3, [pc, #636]	; (80013c4 <motorControl+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	617b      	str	r3, [r7, #20]
	tick = HAL_GetTick();
 800114e:	f001 f831 	bl	80021b4 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b9c      	ldr	r3, [pc, #624]	; (80013c8 <motorControl+0x2b0>)
 8001158:	601a      	str	r2, [r3, #0]
	int encDist = dist * 75;
 800115a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	011a      	lsls	r2, r3, #4
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	613b      	str	r3, [r7, #16]

	int currTime = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]

	//Select direction of motor//

	switch(dirL){
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b46      	cmp	r3, #70	; 0x46
 8001170:	d002      	beq.n	8001178 <motorControl+0x60>
 8001172:	2b52      	cmp	r3, #82	; 0x52
 8001174:	d00b      	beq.n	800118e <motorControl+0x76>
 8001176:	e015      	b.n	80011a4 <motorControl+0x8c>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2108      	movs	r1, #8
 800117c:	4893      	ldr	r0, [pc, #588]	; (80013cc <motorControl+0x2b4>)
 800117e:	f001 faf7 	bl	8002770 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2104      	movs	r1, #4
 8001186:	4891      	ldr	r0, [pc, #580]	; (80013cc <motorControl+0x2b4>)
 8001188:	f001 faf2 	bl	8002770 <HAL_GPIO_WritePin>
			break;
 800118c:	e00a      	b.n	80011a4 <motorControl+0x8c>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2108      	movs	r1, #8
 8001192:	488e      	ldr	r0, [pc, #568]	; (80013cc <motorControl+0x2b4>)
 8001194:	f001 faec 	bl	8002770 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2104      	movs	r1, #4
 800119c:	488b      	ldr	r0, [pc, #556]	; (80013cc <motorControl+0x2b4>)
 800119e:	f001 fae7 	bl	8002770 <HAL_GPIO_WritePin>
			break;
 80011a2:	bf00      	nop
	}

	switch(dirR){
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	2b46      	cmp	r3, #70	; 0x46
 80011a8:	d002      	beq.n	80011b0 <motorControl+0x98>
 80011aa:	2b52      	cmp	r3, #82	; 0x52
 80011ac:	d00b      	beq.n	80011c6 <motorControl+0xae>
 80011ae:	e015      	b.n	80011dc <motorControl+0xc4>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2110      	movs	r1, #16
 80011b4:	4885      	ldr	r0, [pc, #532]	; (80013cc <motorControl+0x2b4>)
 80011b6:	f001 fadb 	bl	8002770 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	4883      	ldr	r0, [pc, #524]	; (80013cc <motorControl+0x2b4>)
 80011c0:	f001 fad6 	bl	8002770 <HAL_GPIO_WritePin>
			break;
 80011c4:	e00a      	b.n	80011dc <motorControl+0xc4>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4880      	ldr	r0, [pc, #512]	; (80013cc <motorControl+0x2b4>)
 80011cc:	f001 fad0 	bl	8002770 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2120      	movs	r1, #32
 80011d4:	487d      	ldr	r0, [pc, #500]	; (80013cc <motorControl+0x2b4>)
 80011d6:	f001 facb 	bl	8002770 <HAL_GPIO_WritePin>
			break;
 80011da:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 80011dc:	4b7c      	ldr	r3, [pc, #496]	; (80013d0 <motorControl+0x2b8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 80011e4:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <motorControl+0x2b8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38


	while(currTime<time){
 80011ec:	e126      	b.n	800143c <motorControl+0x324>
		if(HAL_GetTick()-tick > 100L){
 80011ee:	f000 ffe1 	bl	80021b4 <HAL_GetTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a74      	ldr	r2, [pc, #464]	; (80013c8 <motorControl+0x2b0>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d97d      	bls.n	80012fa <motorControl+0x1e2>
				cntl2 = __HAL_TIM_GET_COUNTER(&htim2);
 80011fe:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <motorControl+0x2a8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	b21a      	sxth	r2, r3
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <motorControl+0x2bc>)
 8001208:	801a      	strh	r2, [r3, #0]
				cntr2 = __HAL_TIM_GET_COUNTER(&htim3);
 800120a:	4b6e      	ldr	r3, [pc, #440]	; (80013c4 <motorControl+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <motorControl+0x2c0>)
 8001214:	801a      	strh	r2, [r3, #0]
				if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8001216:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <motorControl+0x2a8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b10      	cmp	r3, #16
 8001222:	d10b      	bne.n	800123c <motorControl+0x124>
					diffl = cntl1 - cntl2;
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <motorControl+0x2bc>)
 800122a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122e:	b29b      	uxth	r3, r3
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b69      	ldr	r3, [pc, #420]	; (80013dc <motorControl+0x2c4>)
 8001238:	801a      	strh	r2, [r3, #0]
 800123a:	e00a      	b.n	8001252 <motorControl+0x13a>
				else
					diffl = cntl2 - cntl1;
 800123c:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <motorControl+0x2bc>)
 800123e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001242:	b29a      	uxth	r2, r3
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	b29b      	uxth	r3, r3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b63      	ldr	r3, [pc, #396]	; (80013dc <motorControl+0x2c4>)
 8001250:	801a      	strh	r2, [r3, #0]
				if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <motorControl+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b10      	cmp	r3, #16
 800125e:	d10b      	bne.n	8001278 <motorControl+0x160>
					diffr = cntr1 - cntr2;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <motorControl+0x2c0>)
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	b29b      	uxth	r3, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	b21a      	sxth	r2, r3
 8001272:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <motorControl+0x2c8>)
 8001274:	801a      	strh	r2, [r3, #0]
 8001276:	e00a      	b.n	800128e <motorControl+0x176>
				else
					diffr = cntr2 - cntr1;
 8001278:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <motorControl+0x2c0>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	b29a      	uxth	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	b29b      	uxth	r3, r3
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <motorControl+0x2c8>)
 800128c:	801a      	strh	r2, [r3, #0]
				avg = (diffl+diffr)/2;
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <motorControl+0x2c4>)
 8001290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001294:	461a      	mov	r2, r3
 8001296:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <motorControl+0x2c8>)
 8001298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129c:	4413      	add	r3, r2
 800129e:	0fda      	lsrs	r2, r3, #31
 80012a0:	4413      	add	r3, r2
 80012a2:	105b      	asrs	r3, r3, #1
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <motorControl+0x2cc>)
 80012a8:	801a      	strh	r2, [r3, #0]
				sprintf(display,"Distance:%5d\0", diffl/75);
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <motorControl+0x2c4>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	4a4d      	ldr	r2, [pc, #308]	; (80013e8 <motorControl+0x2d0>)
 80012b2:	fb82 1203 	smull	r1, r2, r2, r3
 80012b6:	10d2      	asrs	r2, r2, #3
 80012b8:	17db      	asrs	r3, r3, #31
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b21b      	sxth	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	494a      	ldr	r1, [pc, #296]	; (80013ec <motorControl+0x2d4>)
 80012c2:	484b      	ldr	r0, [pc, #300]	; (80013f0 <motorControl+0x2d8>)
 80012c4:	f006 fb6c 	bl	80079a0 <siprintf>
				OLED_ShowString(10,30,display);
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <motorControl+0x2d8>)
 80012ca:	211e      	movs	r1, #30
 80012cc:	200a      	movs	r0, #10
 80012ce:	f006 fa69 	bl	80077a4 <OLED_ShowString>
				sprintf(display,"Distance:%5d\0", diffr/75);
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <motorControl+0x2c8>)
 80012d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d8:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <motorControl+0x2d0>)
 80012da:	fb82 1203 	smull	r1, r2, r2, r3
 80012de:	10d2      	asrs	r2, r2, #3
 80012e0:	17db      	asrs	r3, r3, #31
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	4940      	ldr	r1, [pc, #256]	; (80013ec <motorControl+0x2d4>)
 80012ea:	4841      	ldr	r0, [pc, #260]	; (80013f0 <motorControl+0x2d8>)
 80012ec:	f006 fb58 	bl	80079a0 <siprintf>
				OLED_ShowString(10,40,display);
 80012f0:	4a3f      	ldr	r2, [pc, #252]	; (80013f0 <motorControl+0x2d8>)
 80012f2:	2128      	movs	r1, #40	; 0x28
 80012f4:	200a      	movs	r0, #10
 80012f6:	f006 fa55 	bl	80077a4 <OLED_ShowString>
//				speedL = (speedL+20);
//				speedR = (speedR-20);
//				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
//				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
//			}
			if(avg>=encDist*0.8&&turn==0){
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <motorControl+0x2cc>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f907 	bl	8000514 <__aeabi_i2d>
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	6938      	ldr	r0, [r7, #16]
 800130c:	f7ff f902 	bl	8000514 <__aeabi_i2d>
 8001310:	a327      	add	r3, pc, #156	; (adr r3, 80013b0 <motorControl+0x298>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7ff f967 	bl	80005e8 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7ff fbe7 	bl	8000af4 <__aeabi_dcmpge>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d02a      	beq.n	8001382 <motorControl+0x26a>
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	2b00      	cmp	r3, #0
 8001330:	d127      	bne.n	8001382 <motorControl+0x26a>
				speedL = speedL*0.95;
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7ff f8ee 	bl	8000514 <__aeabi_i2d>
 8001338:	a31f      	add	r3, pc, #124	; (adr r3, 80013b8 <motorControl+0x2a0>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f953 	bl	80005e8 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fbe7 	bl	8000b1c <__aeabi_d2iz>
 800134e:	4603      	mov	r3, r0
 8001350:	60fb      	str	r3, [r7, #12]
				speedR = speedR*0.95;
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f7ff f8de 	bl	8000514 <__aeabi_i2d>
 8001358:	a317      	add	r3, pc, #92	; (adr r3, 80013b8 <motorControl+0x2a0>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f943 	bl	80005e8 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbd7 	bl	8000b1c <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <motorControl+0x2b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <motorControl+0x2b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if(avg>=encDist && turn==0){
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <motorControl+0x2cc>)
 8001384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001388:	461a      	mov	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4293      	cmp	r3, r2
 800138e:	dc31      	bgt.n	80013f4 <motorControl+0x2dc>
 8001390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001392:	2b00      	cmp	r3, #0
 8001394:	d12e      	bne.n	80013f4 <motorControl+0x2dc>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <motorControl+0x2b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2200      	movs	r2, #0
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <motorControl+0x2b8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	639a      	str	r2, [r3, #56]	; 0x38
				osDelay(500);
 80013a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013aa:	f003 fc0f 	bl	8004bcc <osDelay>
				break;
 80013ae:	e04a      	b.n	8001446 <motorControl+0x32e>
 80013b0:	9999999a 	.word	0x9999999a
 80013b4:	3fe99999 	.word	0x3fe99999
 80013b8:	66666666 	.word	0x66666666
 80013bc:	3fee6666 	.word	0x3fee6666
 80013c0:	20004b20 	.word	0x20004b20
 80013c4:	20004a8c 	.word	0x20004a8c
 80013c8:	20000098 	.word	0x20000098
 80013cc:	40020000 	.word	0x40020000
 80013d0:	200049d8 	.word	0x200049d8
 80013d4:	20004a74 	.word	0x20004a74
 80013d8:	200049d4 	.word	0x200049d4
 80013dc:	20000090 	.word	0x20000090
 80013e0:	20000092 	.word	0x20000092
 80013e4:	20000094 	.word	0x20000094
 80013e8:	1b4e81b5 	.word	0x1b4e81b5
 80013ec:	08008210 	.word	0x08008210
 80013f0:	20004a78 	.word	0x20004a78
			}
			if((diffl>=encDist || diffr>=encDist)&&turn==1){
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <motorControl+0x374>)
 80013f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fa:	461a      	mov	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4293      	cmp	r3, r2
 8001400:	dd06      	ble.n	8001410 <motorControl+0x2f8>
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <motorControl+0x378>)
 8001404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001408:	461a      	mov	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4293      	cmp	r3, r2
 800140e:	dc0f      	bgt.n	8001430 <motorControl+0x318>
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	2b01      	cmp	r3, #1
 8001414:	d10c      	bne.n	8001430 <motorControl+0x318>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <motorControl+0x37c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <motorControl+0x37c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
				osDelay(500);
 8001426:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142a:	f003 fbcf 	bl	8004bcc <osDelay>
				break;
 800142e:	e00a      	b.n	8001446 <motorControl+0x32e>
			}

		currTime++;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	3301      	adds	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
		osDelay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f003 fbc8 	bl	8004bcc <osDelay>
	while(currTime<time){
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001440:	429a      	cmp	r2, r3
 8001442:	f6ff aed4 	blt.w	80011ee <motorControl+0xd6>
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <motorControl+0x37c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <motorControl+0x37c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	639a      	str	r2, [r3, #56]	; 0x38
		speedL=speedR=tick=diffl=diffr=0;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <motorControl+0x378>)
 8001458:	2200      	movs	r2, #0
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <motorControl+0x378>)
 800145e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <motorControl+0x374>)
 8001464:	801a      	strh	r2, [r3, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <motorControl+0x374>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	461a      	mov	r2, r3
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <motorControl+0x380>)
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <motorControl+0x380>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60fb      	str	r3, [r7, #12]
		OLED_Refresh_Gram();
 800147c:	f006 f81e 	bl	80074bc <OLED_Refresh_Gram>
}
 8001480:	bf00      	nop
 8001482:	4618      	mov	r0, r3
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bdb0      	pop	{r4, r5, r7, pc}
 800148a:	bf00      	nop
 800148c:	20000090 	.word	0x20000090
 8001490:	20000092 	.word	0x20000092
 8001494:	200049d8 	.word	0x200049d8
 8001498:	20000098 	.word	0x20000098

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 fe22 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f836 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f000 faba 	bl	8001a20 <MX_GPIO_Init>
  MX_TIM8_Init();
 80014ac:	f000 fa2c 	bl	8001908 <MX_TIM8_Init>
  MX_TIM2_Init();
 80014b0:	f000 f92e 	bl	8001710 <MX_TIM2_Init>
  MX_TIM1_Init();
 80014b4:	f000 f88c 	bl	80015d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014b8:	f000 f97e 	bl	80017b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014bc:	f000 f9d0 	bl	8001860 <MX_TIM4_Init>
  OLED_Init();
 80014c0:	f006 f9a2 	bl	8007808 <OLED_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80014c4:	2100      	movs	r1, #0
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <main+0x5c>)
 80014c8:	f001 ff5e 	bl	8003388 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014cc:	f003 faa2 	bl	8004a14 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <main+0x60>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <main+0x64>)
 80014d6:	f003 fae7 	bl	8004aa8 <osThreadNew>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a09      	ldr	r2, [pc, #36]	; (8001504 <main+0x68>)
 80014de:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 80014e0:	4a09      	ldr	r2, [pc, #36]	; (8001508 <main+0x6c>)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <main+0x70>)
 80014e6:	f003 fadf 	bl	8004aa8 <osThreadNew>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <main+0x74>)
 80014ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014f0:	f003 fab4 	bl	8004a5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <main+0x58>
 80014f6:	bf00      	nop
 80014f8:	20004a20 	.word	0x20004a20
 80014fc:	08008260 	.word	0x08008260
 8001500:	08001b55 	.word	0x08001b55
 8001504:	20004a6c 	.word	0x20004a6c
 8001508:	08008284 	.word	0x08008284
 800150c:	08001bc9 	.word	0x08001bc9
 8001510:	20004a70 	.word	0x20004a70

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f006 fa34 	bl	8007990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <SystemClock_Config+0xb4>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <SystemClock_Config+0xb4>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <SystemClock_Config+0xb4>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <SystemClock_Config+0xb8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <SystemClock_Config+0xb8>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <SystemClock_Config+0xb8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	2310      	movs	r3, #16
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800157c:	2300      	movs	r3, #0
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	4618      	mov	r0, r3
 8001586:	f001 f935 	bl	80027f4 <HAL_RCC_OscConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001590:	f000 fb4a 	bl	8001c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
 8001596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fb98 	bl	8002ce4 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015ba:	f000 fb35 	bl	8001c28 <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	; 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b096      	sub	sp, #88	; 0x58
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	615a      	str	r2, [r3, #20]
 8001600:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2220      	movs	r2, #32
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f006 f9c1 	bl	8007990 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800160e:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <MX_TIM1_Init+0x138>)
 8001610:	4a3e      	ldr	r2, [pc, #248]	; (800170c <MX_TIM1_Init+0x13c>)
 8001612:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001614:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <MX_TIM1_Init+0x138>)
 8001616:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800161a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <MX_TIM1_Init+0x138>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <MX_TIM1_Init+0x138>)
 8001624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001628:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <MX_TIM1_Init+0x138>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <MX_TIM1_Init+0x138>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <MX_TIM1_Init+0x138>)
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800163c:	4832      	ldr	r0, [pc, #200]	; (8001708 <MX_TIM1_Init+0x138>)
 800163e:	f001 fced 	bl	800301c <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001648:	f000 faee 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001656:	4619      	mov	r1, r3
 8001658:	482b      	ldr	r0, [pc, #172]	; (8001708 <MX_TIM1_Init+0x138>)
 800165a:	f002 fb57 	bl	8003d0c <HAL_TIM_ConfigClockSource>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001664:	f000 fae0 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001668:	4827      	ldr	r0, [pc, #156]	; (8001708 <MX_TIM1_Init+0x138>)
 800166a:	f001 fd26 	bl	80030ba <HAL_TIM_PWM_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001674:	f000 fad8 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001680:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001684:	4619      	mov	r1, r3
 8001686:	4820      	ldr	r0, [pc, #128]	; (8001708 <MX_TIM1_Init+0x138>)
 8001688:	f003 f8ae 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001692:	f000 fac9 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001696:	2360      	movs	r3, #96	; 0x60
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	220c      	movs	r2, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	4814      	ldr	r0, [pc, #80]	; (8001708 <MX_TIM1_Init+0x138>)
 80016b8:	f002 fa66 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80016c2:	f000 fab1 	bl	8001c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_TIM1_Init+0x138>)
 80016ea:	f003 f8f9 	bl	80048e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80016f4:	f000 fa98 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_TIM1_Init+0x138>)
 80016fa:	f000 fc1b 	bl	8001f34 <HAL_TIM_MspPostInit>

}
 80016fe:	bf00      	nop
 8001700:	3758      	adds	r7, #88	; 0x58
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20004ad4 	.word	0x20004ad4
 800170c:	40010000 	.word	0x40010000

08001710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	2224      	movs	r2, #36	; 0x24
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f006 f936 	bl	8007990 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_TIM2_Init+0xa4>)
 800172e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <MX_TIM2_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_TIM2_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_TIM2_Init+0xa4>)
 8001742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_TIM2_Init+0xa4>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_TIM2_Init+0xa4>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001754:	2303      	movs	r3, #3
 8001756:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800175c:	2301      	movs	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001764:	230a      	movs	r3, #10
 8001766:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800176c:	2301      	movs	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001774:	230a      	movs	r3, #10
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4619      	mov	r1, r3
 800177e:	480d      	ldr	r0, [pc, #52]	; (80017b4 <MX_TIM2_Init+0xa4>)
 8001780:	f001 ff2a 	bl	80035d8 <HAL_TIM_Encoder_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800178a:	f000 fa4d 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_TIM2_Init+0xa4>)
 800179c:	f003 f824 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80017a6:	f000 fa3f 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	; 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20004b20 	.word	0x20004b20

080017b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2224      	movs	r2, #36	; 0x24
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f006 f8e2 	bl	8007990 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_TIM3_Init+0xa0>)
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <MX_TIM3_Init+0xa4>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_TIM3_Init+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_TIM3_Init+0xa0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_TIM3_Init+0xa0>)
 80017e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_TIM3_Init+0xa0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_TIM3_Init+0xa0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017fa:	2303      	movs	r3, #3
 80017fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001802:	2301      	movs	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800180a:	230a      	movs	r3, #10
 800180c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001812:	2301      	movs	r3, #1
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800181a:	230a      	movs	r3, #10
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <MX_TIM3_Init+0xa0>)
 8001826:	f001 fed7 	bl	80035d8 <HAL_TIM_Encoder_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001830:	f000 f9fa 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_TIM3_Init+0xa0>)
 8001842:	f002 ffd1 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800184c:	f000 f9ec 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20004a8c 	.word	0x20004a8c
 800185c:	40000400 	.word	0x40000400

08001860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <MX_TIM4_Init+0xa0>)
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <MX_TIM4_Init+0xa4>)
 8001880:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_TIM4_Init+0xa0>)
 8001884:	220f      	movs	r2, #15
 8001886:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <MX_TIM4_Init+0xa0>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <MX_TIM4_Init+0xa0>)
 8001890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001894:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_TIM4_Init+0xa0>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_TIM4_Init+0xa0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80018a2:	4817      	ldr	r0, [pc, #92]	; (8001900 <MX_TIM4_Init+0xa0>)
 80018a4:	f001 fd20 	bl	80032e8 <HAL_TIM_IC_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80018ae:	f000 f9bb 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4619      	mov	r1, r3
 80018c0:	480f      	ldr	r0, [pc, #60]	; (8001900 <MX_TIM4_Init+0xa0>)
 80018c2:	f002 ff91 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80018cc:	f000 f9ac 	bl	8001c28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018d4:	2301      	movs	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM4_Init+0xa0>)
 80018e8:	f002 f8b2 	bl	8003a50 <HAL_TIM_IC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80018f2:	f000 f999 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20004a20 	.word	0x20004a20
 8001904:	40000800 	.word	0x40000800

08001908 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b092      	sub	sp, #72	; 0x48
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2220      	movs	r2, #32
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f006 f82c 	bl	8007990 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <MX_TIM8_Init+0x110>)
 800193a:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <MX_TIM8_Init+0x114>)
 800193c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <MX_TIM8_Init+0x110>)
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <MX_TIM8_Init+0x110>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <MX_TIM8_Init+0x110>)
 800194c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001950:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <MX_TIM8_Init+0x110>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <MX_TIM8_Init+0x110>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <MX_TIM8_Init+0x110>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001964:	482c      	ldr	r0, [pc, #176]	; (8001a18 <MX_TIM8_Init+0x110>)
 8001966:	f001 fba8 	bl	80030ba <HAL_TIM_PWM_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001970:	f000 f95a 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800197c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001980:	4619      	mov	r1, r3
 8001982:	4825      	ldr	r0, [pc, #148]	; (8001a18 <MX_TIM8_Init+0x110>)
 8001984:	f002 ff30 	bl	80047e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800198e:	f000 f94b 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	; 0x60
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4818      	ldr	r0, [pc, #96]	; (8001a18 <MX_TIM8_Init+0x110>)
 80019b8:	f002 f8e6 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80019c2:	f000 f931 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	2204      	movs	r2, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4812      	ldr	r0, [pc, #72]	; (8001a18 <MX_TIM8_Init+0x110>)
 80019d0:	f002 f8da 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80019da:	f000 f925 	bl	8001c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_TIM8_Init+0x110>)
 8001a02:	f002 ff6d 	bl	80048e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001a0c:	f000 f90c 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	3748      	adds	r7, #72	; 0x48
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200049d8 	.word	0x200049d8
 8001a1c:	40010400 	.word	0x40010400

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a41      	ldr	r2, [pc, #260]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a40:	f043 0310 	orr.w	r3, r3, #16
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a33      	ldr	r2, [pc, #204]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <MX_GPIO_Init+0x124>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001ac8:	481f      	ldr	r0, [pc, #124]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001aca:	f000 fe51 	bl	8002770 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	213c      	movs	r1, #60	; 0x3c
 8001ad2:	481e      	ldr	r0, [pc, #120]	; (8001b4c <MX_GPIO_Init+0x12c>)
 8001ad4:	f000 fe4c 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ade:	481c      	ldr	r0, [pc, #112]	; (8001b50 <MX_GPIO_Init+0x130>)
 8001ae0:	f000 fe46 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001ae4:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001ae8:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4812      	ldr	r0, [pc, #72]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001afe:	f000 fc9b 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001b02:	233c      	movs	r3, #60	; 0x3c
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <MX_GPIO_Init+0x12c>)
 8001b1a:	f000 fc8d 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <MX_GPIO_Init+0x130>)
 8001b38:	f000 fc7e 	bl	8002438 <HAL_GPIO_Init>

}
 8001b3c:	bf00      	nop
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020c00 	.word	0x40020c00

08001b54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "testing";
 8001b5c:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <StartDefaultTask+0x68>)
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b66:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
	uint8_t ultra[20];
  /* Infinite loop */
  for(;;)
  {
	  OLED_ShowString(10,10,test);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	210a      	movs	r1, #10
 8001b7e:	200a      	movs	r0, #10
 8001b80:	f005 fe10 	bl	80077a4 <OLED_ShowString>

	  ultraDistCheck();
 8001b84:	f7ff fa6c 	bl	8001060 <ultraDistCheck>
	  HAL_Delay(200);
 8001b88:	20c8      	movs	r0, #200	; 0xc8
 8001b8a:	f000 fb1f 	bl	80021cc <HAL_Delay>
	  sprintf(ultra, "uDistFinal: %u cm\0", uDistFinal);
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <StartDefaultTask+0x6c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	490b      	ldr	r1, [pc, #44]	; (8001bc4 <StartDefaultTask+0x70>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 ff01 	bl	80079a0 <siprintf>
	  OLED_ShowString(10, 20, ultra);
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2114      	movs	r1, #20
 8001ba6:	200a      	movs	r0, #10
 8001ba8:	f005 fdfc 	bl	80077a4 <OLED_ShowString>

	  OLED_Refresh_Gram();
 8001bac:	f005 fc86 	bl	80074bc <OLED_Refresh_Gram>
//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	  osDelay(1000);
 8001bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb4:	f003 f80a 	bl	8004bcc <osDelay>
  {
 8001bb8:	e7dd      	b.n	8001b76 <StartDefaultTask+0x22>
 8001bba:	bf00      	nop
 8001bbc:	08008234 	.word	0x08008234
 8001bc0:	200000b4 	.word	0x200000b4
 8001bc4:	08008220 	.word	0x08008220

08001bc8 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4813      	ldr	r0, [pc, #76]	; (8001c20 <motor+0x58>)
 8001bd4:	f001 fac0 	bl	8003158 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4811      	ldr	r0, [pc, #68]	; (8001c20 <motor+0x58>)
 8001bdc:	f001 fabc 	bl	8003158 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001be0:	210c      	movs	r1, #12
 8001be2:	4810      	ldr	r0, [pc, #64]	; (8001c24 <motor+0x5c>)
 8001be4:	f001 fab8 	bl	8003158 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = 74;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <motor+0x5c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	224a      	movs	r2, #74	; 0x4a
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(500);
 8001bf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf4:	f002 ffea 	bl	8004bcc <osDelay>
	motorControl(4000, 4000, 'F', 'F', 0, 10000, 90);
 8001bf8:	235a      	movs	r3, #90	; 0x5a
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2346      	movs	r3, #70	; 0x46
 8001c08:	2246      	movs	r2, #70	; 0x46
 8001c0a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001c0e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001c12:	f7ff fa81 	bl	8001118 <motorControl>
//	for(;;)
//	{
//		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
//		osDelay(2000);
//	}
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200049d8 	.word	0x200049d8
 8001c24:	20004ad4 	.word	0x20004ad4

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <Error_Handler+0x8>
	...

08001c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_MspInit+0x54>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_MspInit+0x54>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_MspInit+0x54>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_MspInit+0x54>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_MspInit+0x54>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_MspInit+0x54>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	210f      	movs	r1, #15
 8001c76:	f06f 0001 	mvn.w	r0, #1
 8001c7a:	f000 fba6 	bl	80023ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10d      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_TIM_Base_MspInit+0x40>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_TIM_Base_MspInit+0x40>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_TIM_Base_MspInit+0x40>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d14b      	bne.n	8001d8a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a3e      	ldr	r2, [pc, #248]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4825      	ldr	r0, [pc, #148]	; (8001df8 <HAL_TIM_Encoder_MspInit+0x128>)
 8001d64:	f000 fb68 	bl	8002438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <HAL_TIM_Encoder_MspInit+0x12c>)
 8001d84:	f000 fb58 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d88:	e030      	b.n	8001dec <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_TIM_Encoder_MspInit+0x130>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d12b      	bne.n	8001dec <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dcc:	23c0      	movs	r3, #192	; 0xc0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	4804      	ldr	r0, [pc, #16]	; (8001df8 <HAL_TIM_Encoder_MspInit+0x128>)
 8001de8:	f000 fb26 	bl	8002438 <HAL_GPIO_Init>
}
 8001dec:	bf00      	nop
 8001dee:	3730      	adds	r7, #48	; 0x30
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40000400 	.word	0x40000400

08001e04 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_TIM_IC_MspInit+0x94>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d134      	bne.n	8001e90 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_TIM_IC_MspInit+0x98>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_TIM_IC_MspInit+0x98>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_TIM_IC_MspInit+0x98>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_TIM_IC_MspInit+0x98>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_TIM_IC_MspInit+0x98>)
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_TIM_IC_MspInit+0x98>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e70:	2302      	movs	r3, #2
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <HAL_TIM_IC_MspInit+0x9c>)
 8001e7c:	f000 fadc 	bl	8002438 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2105      	movs	r1, #5
 8001e84:	201e      	movs	r0, #30
 8001e86:	f000 faa0 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e8a:	201e      	movs	r0, #30
 8001e8c:	f000 fab9 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020c00 	.word	0x40020c00

08001ea4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_TIM_PWM_MspInit+0x84>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12b      	bne.n	8001f1e <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_TIM_PWM_MspInit+0x88>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_TIM_PWM_MspInit+0x88>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_TIM_PWM_MspInit+0x88>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_TIM_PWM_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <HAL_TIM_PWM_MspInit+0x88>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_TIM_PWM_MspInit+0x88>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001f1a:	f000 fa8d 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	; 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40010400 	.word	0x40010400
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020800 	.word	0x40020800

08001f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_TIM_MspPostInit+0x68>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d11e      	bne.n	8001f94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_TIM_MspPostInit+0x6c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_TIM_MspPostInit+0x6c>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_TIM_MspPostInit+0x6c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <HAL_TIM_MspPostInit+0x70>)
 8001f90:	f000 fa52 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <NMI_Handler+0x4>

08001fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd8:	f000 f8d8 	bl	800218c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fdc:	f004 fa04 	bl	80063e8 <xTaskGetSchedulerState>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001fe6:	f004 ffef 	bl	8006fc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM4_IRQHandler+0x10>)
 8001ff6:	f001 fc23 	bl	8003840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20004a20 	.word	0x20004a20

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f005 fc74 	bl	8007920 <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20020000 	.word	0x20020000
 8002064:	00000400 	.word	0x00000400
 8002068:	200000b8 	.word	0x200000b8
 800206c:	20004fc0 	.word	0x20004fc0

08002070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <SystemInit+0x20>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <SystemInit+0x20>)
 800207c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b0:	4c0b      	ldr	r4, [pc, #44]	; (80020e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020be:	f7ff ffd7 	bl	8002070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f005 fc33 	bl	800792c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c6:	f7ff f9e9 	bl	800149c <main>
  bx  lr    
 80020ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80020d8:	08008d60 	.word	0x08008d60
  ldr r2, =_sbss
 80020dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80020e0:	20004fbc 	.word	0x20004fbc

080020e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_Init+0x40>)
 80020f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_Init+0x40>)
 80020fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_Init+0x40>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002110:	2003      	movs	r0, #3
 8002112:	f000 f94f 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002116:	200f      	movs	r0, #15
 8002118:	f000 f808 	bl	800212c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211c:	f7ff fd8a 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_InitTick+0x54>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_InitTick+0x58>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002142:	fbb3 f3f1 	udiv	r3, r3, r1
 8002146:	fbb2 f3f3 	udiv	r3, r2, r3
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f967 	bl	800241e <HAL_SYSTICK_Config>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e00e      	b.n	8002178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b0f      	cmp	r3, #15
 800215e:	d80a      	bhi.n	8002176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002160:	2200      	movs	r2, #0
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f000 f92f 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800216c:	4a06      	ldr	r2, [pc, #24]	; (8002188 <HAL_InitTick+0x5c>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e000      	b.n	8002178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000000 	.word	0x20000000
 8002184:	20000008 	.word	0x20000008
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x20>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x24>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4413      	add	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_IncTick+0x24>)
 800219e:	6013      	str	r3, [r2, #0]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000008 	.word	0x20000008
 80021b0:	20004b68 	.word	0x20004b68

080021b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTick+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20004b68 	.word	0x20004b68

080021cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ffee 	bl	80021b4 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d005      	beq.n	80021f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_Delay+0x44>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f2:	bf00      	nop
 80021f4:	f7ff ffde 	bl	80021b4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8f7      	bhi.n	80021f4 <HAL_Delay+0x28>
  {
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000008 	.word	0x20000008

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4907      	ldr	r1, [pc, #28]	; (80022b0 <__NVIC_EnableIRQ+0x38>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff8e 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff29 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023dc:	f7ff ff3e 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff8e 	bl	8002308 <NVIC_EncodePriority>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff5d 	bl	80022b4 <__NVIC_SetPriority>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff31 	bl	8002278 <__NVIC_EnableIRQ>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ffa2 	bl	8002370 <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e16b      	b.n	800272c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 815a 	bne.w	8002726 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d005      	beq.n	800248a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	2b02      	cmp	r3, #2
 8002488:	d130      	bne.n	80024ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d017      	beq.n	8002528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d123      	bne.n	800257c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80b4 	beq.w	8002726 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b60      	ldr	r3, [pc, #384]	; (8002744 <HAL_GPIO_Init+0x30c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a5f      	ldr	r2, [pc, #380]	; (8002744 <HAL_GPIO_Init+0x30c>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <HAL_GPIO_Init+0x30c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025da:	4a5b      	ldr	r2, [pc, #364]	; (8002748 <HAL_GPIO_Init+0x310>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_GPIO_Init+0x314>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02b      	beq.n	800265e <HAL_GPIO_Init+0x226>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a51      	ldr	r2, [pc, #324]	; (8002750 <HAL_GPIO_Init+0x318>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d025      	beq.n	800265a <HAL_GPIO_Init+0x222>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a50      	ldr	r2, [pc, #320]	; (8002754 <HAL_GPIO_Init+0x31c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <HAL_GPIO_Init+0x21e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_GPIO_Init+0x320>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d019      	beq.n	8002652 <HAL_GPIO_Init+0x21a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4e      	ldr	r2, [pc, #312]	; (800275c <HAL_GPIO_Init+0x324>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x216>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4d      	ldr	r2, [pc, #308]	; (8002760 <HAL_GPIO_Init+0x328>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x212>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4c      	ldr	r2, [pc, #304]	; (8002764 <HAL_GPIO_Init+0x32c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x20e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4b      	ldr	r2, [pc, #300]	; (8002768 <HAL_GPIO_Init+0x330>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x20a>
 800263e:	2307      	movs	r3, #7
 8002640:	e00e      	b.n	8002660 <HAL_GPIO_Init+0x228>
 8002642:	2308      	movs	r3, #8
 8002644:	e00c      	b.n	8002660 <HAL_GPIO_Init+0x228>
 8002646:	2306      	movs	r3, #6
 8002648:	e00a      	b.n	8002660 <HAL_GPIO_Init+0x228>
 800264a:	2305      	movs	r3, #5
 800264c:	e008      	b.n	8002660 <HAL_GPIO_Init+0x228>
 800264e:	2304      	movs	r3, #4
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x228>
 8002652:	2303      	movs	r3, #3
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x228>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x228>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x228>
 800265e:	2300      	movs	r3, #0
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	f002 0203 	and.w	r2, r2, #3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4093      	lsls	r3, r2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002670:	4935      	ldr	r1, [pc, #212]	; (8002748 <HAL_GPIO_Init+0x310>)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_GPIO_Init+0x334>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a2:	4a32      	ldr	r2, [pc, #200]	; (800276c <HAL_GPIO_Init+0x334>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_GPIO_Init+0x334>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_GPIO_Init+0x334>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_GPIO_Init+0x334>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_GPIO_Init+0x334>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_GPIO_Init+0x334>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_GPIO_Init+0x334>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3301      	adds	r3, #1
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b0f      	cmp	r3, #15
 8002730:	f67f ae90 	bls.w	8002454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	40013800 	.word	0x40013800
 800274c:	40020000 	.word	0x40020000
 8002750:	40020400 	.word	0x40020400
 8002754:	40020800 	.word	0x40020800
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40021000 	.word	0x40021000
 8002760:	40021400 	.word	0x40021400
 8002764:	40021800 	.word	0x40021800
 8002768:	40021c00 	.word	0x40021c00
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800278c:	e003      	b.n	8002796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	041a      	lsls	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80027b6:	687b      	ldr	r3, [r7, #4]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	420e0020 	.word	0x420e0020
 80027c8:	40007000 	.word	0x40007000

080027cc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_PWR_DisableBkUpAccess+0x20>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_PWR_DisableBkUpAccess+0x24>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80027de:	687b      	ldr	r3, [r7, #4]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	420e0020 	.word	0x420e0020
 80027f0:	40007000 	.word	0x40007000

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e264      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d075      	beq.n	80028fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002812:	4ba3      	ldr	r3, [pc, #652]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b04      	cmp	r3, #4
 800281c:	d00c      	beq.n	8002838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281e:	4ba0      	ldr	r3, [pc, #640]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002826:	2b08      	cmp	r3, #8
 8002828:	d112      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b9d      	ldr	r3, [pc, #628]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b99      	ldr	r3, [pc, #612]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05b      	beq.n	80028fc <HAL_RCC_OscConfig+0x108>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d157      	bne.n	80028fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e23f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x74>
 800285a:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a90      	ldr	r2, [pc, #576]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xb0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x98>
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a8a      	ldr	r2, [pc, #552]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b88      	ldr	r3, [pc, #544]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a87      	ldr	r2, [pc, #540]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xb0>
 800288c:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a83      	ldr	r2, [pc, #524]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b81      	ldr	r3, [pc, #516]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a80      	ldr	r2, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7ff fc82 	bl	80021b4 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b4:	f7ff fc7e 	bl	80021b4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e204      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xc0>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7ff fc6e 	bl	80021b4 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028dc:	f7ff fc6a 	bl	80021b4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1f0      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0xe8>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d063      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002916:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291e:	2b08      	cmp	r3, #8
 8002920:	d11c      	bne.n	800295c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b5f      	ldr	r3, [pc, #380]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d116      	bne.n	800295c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x152>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e1c4      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4952      	ldr	r1, [pc, #328]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	e03a      	b.n	80029d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002964:	4b4f      	ldr	r3, [pc, #316]	; (8002aa4 <HAL_RCC_OscConfig+0x2b0>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7ff fc23 	bl	80021b4 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002972:	f7ff fc1f 	bl	80021b4 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e1a5      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4940      	ldr	r1, [pc, #256]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
 80029a4:	e015      	b.n	80029d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_OscConfig+0x2b0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7ff fc02 	bl	80021b4 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b4:	f7ff fbfe 	bl	80021b4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e184      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d030      	beq.n	8002a40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e6:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <HAL_RCC_OscConfig+0x2b4>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7ff fbe2 	bl	80021b4 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f4:	f7ff fbde 	bl	80021b4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e164      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x200>
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_RCC_OscConfig+0x2b4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7ff fbcb 	bl	80021b4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a22:	f7ff fbc7 	bl	80021b4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e14d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a0 	beq.w	8002b8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x2b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d121      	bne.n	8002ace <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_RCC_OscConfig+0x2b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_RCC_OscConfig+0x2b8>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a96:	f7ff fb8d 	bl	80021b4 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	e011      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2ce>
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	42470000 	.word	0x42470000
 8002aa8:	42470e80 	.word	0x42470e80
 8002aac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7ff fb80 	bl	80021b4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e106      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <HAL_RCC_OscConfig+0x4e4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2f0>
 8002ad6:	4b81      	ldr	r3, [pc, #516]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a80      	ldr	r2, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	e01c      	b.n	8002b1e <HAL_RCC_OscConfig+0x32a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x312>
 8002aec:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
 8002af8:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x32a>
 8002b06:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a74      	ldr	r2, [pc, #464]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a71      	ldr	r2, [pc, #452]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7ff fb45 	bl	80021b4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7ff fb41 	bl	80021b4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0c5      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCC_OscConfig+0x33a>
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7ff fb2f 	bl	80021b4 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7ff fb2b 	bl	80021b4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e0af      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	4b5a      	ldr	r3, [pc, #360]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a55      	ldr	r2, [pc, #340]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 809b 	beq.w	8002cce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b98:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d05c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d141      	bne.n	8002c30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x4ec>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7ff faff 	bl	80021b4 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bba:	f7ff fafb 	bl	80021b4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e081      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bcc:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	019b      	lsls	r3, r3, #6
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	041b      	lsls	r3, r3, #16
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	061b      	lsls	r3, r3, #24
 8002bfc:	4937      	ldr	r1, [pc, #220]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c02:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <HAL_RCC_OscConfig+0x4ec>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7ff fad4 	bl	80021b4 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c10:	f7ff fad0 	bl	80021b4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e056      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x41c>
 8002c2e:	e04e      	b.n	8002cce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_OscConfig+0x4ec>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7ff fabd 	bl	80021b4 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7ff fab9 	bl	80021b4 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e03f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x44a>
 8002c5c:	e037      	b.n	8002cce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e032      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCC_OscConfig+0x4e8>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d028      	beq.n	8002cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d11a      	bne.n	8002cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d111      	bne.n	8002cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	42470060 	.word	0x42470060

08002ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0cc      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d90c      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b65      	ldr	r3, [pc, #404]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a52      	ldr	r2, [pc, #328]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	494d      	ldr	r1, [pc, #308]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d044      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d119      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d003      	beq.n	8002da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e067      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc2:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4934      	ldr	r1, [pc, #208]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd4:	f7ff f9ee 	bl	80021b4 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7ff f9ea 	bl	80021b4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e04f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 020c 	and.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1eb      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d20c      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e032      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4916      	ldr	r1, [pc, #88]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f821 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490a      	ldr	r1, [pc, #40]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f94e 	bl	800212c <HAL_InitTick>

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	080082a8 	.word	0x080082a8
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	b5b0      	push	{r4, r5, r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	6079      	str	r1, [r7, #4]
 8002eba:	2100      	movs	r1, #0
 8002ebc:	60f9      	str	r1, [r7, #12]
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec6:	4952      	ldr	r1, [pc, #328]	; (8003010 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ec8:	6889      	ldr	r1, [r1, #8]
 8002eca:	f001 010c 	and.w	r1, r1, #12
 8002ece:	2908      	cmp	r1, #8
 8002ed0:	d00d      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x3e>
 8002ed2:	2908      	cmp	r1, #8
 8002ed4:	f200 8094 	bhi.w	8003000 <HAL_RCC_GetSysClockFreq+0x150>
 8002ed8:	2900      	cmp	r1, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x32>
 8002edc:	2904      	cmp	r1, #4
 8002ede:	d003      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ee0:	e08e      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee2:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ee4:	60bb      	str	r3, [r7, #8]
       break;
 8002ee6:	e08e      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	; (8003018 <HAL_RCC_GetSysClockFreq+0x168>)
 8002eea:	60bb      	str	r3, [r7, #8]
      break;
 8002eec:	e08b      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eee:	4948      	ldr	r1, [pc, #288]	; (8003010 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ef0:	6849      	ldr	r1, [r1, #4]
 8002ef2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ef6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef8:	4945      	ldr	r1, [pc, #276]	; (8003010 <HAL_RCC_GetSysClockFreq+0x160>)
 8002efa:	6849      	ldr	r1, [r1, #4]
 8002efc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f00:	2900      	cmp	r1, #0
 8002f02:	d024      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4942      	ldr	r1, [pc, #264]	; (8003010 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f06:	6849      	ldr	r1, [r1, #4]
 8002f08:	0989      	lsrs	r1, r1, #6
 8002f0a:	4608      	mov	r0, r1
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f14:	f04f 0500 	mov.w	r5, #0
 8002f18:	ea00 0204 	and.w	r2, r0, r4
 8002f1c:	ea01 0305 	and.w	r3, r1, r5
 8002f20:	493d      	ldr	r1, [pc, #244]	; (8003018 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f22:	fb01 f003 	mul.w	r0, r1, r3
 8002f26:	2100      	movs	r1, #0
 8002f28:	fb01 f102 	mul.w	r1, r1, r2
 8002f2c:	1844      	adds	r4, r0, r1
 8002f2e:	493a      	ldr	r1, [pc, #232]	; (8003018 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f30:	fba2 0101 	umull	r0, r1, r2, r1
 8002f34:	1863      	adds	r3, r4, r1
 8002f36:	4619      	mov	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	f7fd fe34 	bl	8000bac <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e04a      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	461a      	mov	r2, r3
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	ea02 0400 	and.w	r4, r2, r0
 8002f66:	ea03 0501 	and.w	r5, r3, r1
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	014b      	lsls	r3, r1, #5
 8002f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f7c:	0142      	lsls	r2, r0, #5
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	1b00      	subs	r0, r0, r4
 8002f84:	eb61 0105 	sbc.w	r1, r1, r5
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	018b      	lsls	r3, r1, #6
 8002f92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f96:	0182      	lsls	r2, r0, #6
 8002f98:	1a12      	subs	r2, r2, r0
 8002f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9e:	f04f 0000 	mov.w	r0, #0
 8002fa2:	f04f 0100 	mov.w	r1, #0
 8002fa6:	00d9      	lsls	r1, r3, #3
 8002fa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fac:	00d0      	lsls	r0, r2, #3
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	1912      	adds	r2, r2, r4
 8002fb4:	eb45 0303 	adc.w	r3, r5, r3
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	0299      	lsls	r1, r3, #10
 8002fc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fc6:	0290      	lsls	r0, r2, #10
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f7fd fde8 	bl	8000bac <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	60bb      	str	r3, [r7, #8]
      break;
 8002ffe:	e002      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_RCC_GetSysClockFreq+0x164>)
 8003002:	60bb      	str	r3, [r7, #8]
      break;
 8003004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003006:	68bb      	ldr	r3, [r7, #8]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bdb0      	pop	{r4, r5, r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	00f42400 	.word	0x00f42400
 8003018:	017d7840 	.word	0x017d7840

0800301c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e041      	b.n	80030b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe fe22 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f000 ff8a 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e041      	b.n	8003150 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fe fedf 	bl	8001ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 ff3b 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_TIM_PWM_Start+0x24>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e022      	b.n	80031c2 <HAL_TIM_PWM_Start+0x6a>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d109      	bne.n	8003196 <HAL_TIM_PWM_Start+0x3e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e015      	b.n	80031c2 <HAL_TIM_PWM_Start+0x6a>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d109      	bne.n	80031b0 <HAL_TIM_PWM_Start+0x58>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e008      	b.n	80031c2 <HAL_TIM_PWM_Start+0x6a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07c      	b.n	80032c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <HAL_TIM_PWM_Start+0x82>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d8:	e013      	b.n	8003202 <HAL_TIM_PWM_Start+0xaa>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d104      	bne.n	80031ea <HAL_TIM_PWM_Start+0x92>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e8:	e00b      	b.n	8003202 <HAL_TIM_PWM_Start+0xaa>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start+0xa2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f8:	e003      	b.n	8003202 <HAL_TIM_PWM_Start+0xaa>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	6839      	ldr	r1, [r7, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f001 fac6 	bl	800479c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <HAL_TIM_PWM_Start+0x174>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_TIM_PWM_Start+0xcc>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2c      	ldr	r2, [pc, #176]	; (80032d0 <HAL_TIM_PWM_Start+0x178>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_TIM_PWM_Start+0xd0>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_TIM_PWM_Start+0xd2>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a22      	ldr	r2, [pc, #136]	; (80032cc <HAL_TIM_PWM_Start+0x174>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_TIM_PWM_Start+0x136>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d01d      	beq.n	800328e <HAL_TIM_PWM_Start+0x136>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <HAL_TIM_PWM_Start+0x17c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_TIM_PWM_Start+0x136>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_TIM_PWM_Start+0x180>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_TIM_PWM_Start+0x136>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <HAL_TIM_PWM_Start+0x184>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_TIM_PWM_Start+0x136>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_TIM_PWM_Start+0x178>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_TIM_PWM_Start+0x136>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_TIM_PWM_Start+0x188>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_TIM_PWM_Start+0x136>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <HAL_TIM_PWM_Start+0x18c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d111      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b06      	cmp	r3, #6
 800329e:	d010      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	e007      	b.n	80032c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40010400 	.word	0x40010400
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40000800 	.word	0x40000800
 80032dc:	40000c00 	.word	0x40000c00
 80032e0:	40014000 	.word	0x40014000
 80032e4:	40001800 	.word	0x40001800

080032e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e041      	b.n	800337e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe fd78 	bl	8001e04 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f000 fe24 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_IC_Start_IT+0x1e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e013      	b.n	80033ce <HAL_TIM_IC_Start_IT+0x46>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_IC_Start_IT+0x2e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e00b      	b.n	80033ce <HAL_TIM_IC_Start_IT+0x46>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_IC_Start_IT+0x3e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e003      	b.n	80033ce <HAL_TIM_IC_Start_IT+0x46>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <HAL_TIM_IC_Start_IT+0x58>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e013      	b.n	8003408 <HAL_TIM_IC_Start_IT+0x80>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d104      	bne.n	80033f0 <HAL_TIM_IC_Start_IT+0x68>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e00b      	b.n	8003408 <HAL_TIM_IC_Start_IT+0x80>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d104      	bne.n	8003400 <HAL_TIM_IC_Start_IT+0x78>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e003      	b.n	8003408 <HAL_TIM_IC_Start_IT+0x80>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003406:	b2db      	uxtb	r3, r3
 8003408:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800340a:	7bbb      	ldrb	r3, [r7, #14]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003410:	7b7b      	ldrb	r3, [r7, #13]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d001      	beq.n	800341a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0cc      	b.n	80035b4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_TIM_IC_Start_IT+0xa2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003428:	e013      	b.n	8003452 <HAL_TIM_IC_Start_IT+0xca>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d104      	bne.n	800343a <HAL_TIM_IC_Start_IT+0xb2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003438:	e00b      	b.n	8003452 <HAL_TIM_IC_Start_IT+0xca>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d104      	bne.n	800344a <HAL_TIM_IC_Start_IT+0xc2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	e003      	b.n	8003452 <HAL_TIM_IC_Start_IT+0xca>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_TIM_IC_Start_IT+0xda>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003460:	e013      	b.n	800348a <HAL_TIM_IC_Start_IT+0x102>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d104      	bne.n	8003472 <HAL_TIM_IC_Start_IT+0xea>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003470:	e00b      	b.n	800348a <HAL_TIM_IC_Start_IT+0x102>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d104      	bne.n	8003482 <HAL_TIM_IC_Start_IT+0xfa>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003480:	e003      	b.n	800348a <HAL_TIM_IC_Start_IT+0x102>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d841      	bhi.n	8003514 <HAL_TIM_IC_Start_IT+0x18c>
 8003490:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <HAL_TIM_IC_Start_IT+0x110>)
 8003492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003496:	bf00      	nop
 8003498:	080034cd 	.word	0x080034cd
 800349c:	08003515 	.word	0x08003515
 80034a0:	08003515 	.word	0x08003515
 80034a4:	08003515 	.word	0x08003515
 80034a8:	080034df 	.word	0x080034df
 80034ac:	08003515 	.word	0x08003515
 80034b0:	08003515 	.word	0x08003515
 80034b4:	08003515 	.word	0x08003515
 80034b8:	080034f1 	.word	0x080034f1
 80034bc:	08003515 	.word	0x08003515
 80034c0:	08003515 	.word	0x08003515
 80034c4:	08003515 	.word	0x08003515
 80034c8:	08003503 	.word	0x08003503
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0202 	orr.w	r2, r2, #2
 80034da:	60da      	str	r2, [r3, #12]
      break;
 80034dc:	e01d      	b.n	800351a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0204 	orr.w	r2, r2, #4
 80034ec:	60da      	str	r2, [r3, #12]
      break;
 80034ee:	e014      	b.n	800351a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0208 	orr.w	r2, r2, #8
 80034fe:	60da      	str	r2, [r3, #12]
      break;
 8003500:	e00b      	b.n	800351a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0210 	orr.w	r2, r2, #16
 8003510:	60da      	str	r2, [r3, #12]
      break;
 8003512:	e002      	b.n	800351a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      break;
 8003518:	bf00      	nop
  }

  if (status == HAL_OK)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d148      	bne.n	80035b2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	6839      	ldr	r1, [r7, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f001 f937 	bl	800479c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a22      	ldr	r2, [pc, #136]	; (80035bc <HAL_TIM_IC_Start_IT+0x234>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_TIM_IC_Start_IT+0x1f6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003540:	d01d      	beq.n	800357e <HAL_TIM_IC_Start_IT+0x1f6>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1e      	ldr	r2, [pc, #120]	; (80035c0 <HAL_TIM_IC_Start_IT+0x238>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <HAL_TIM_IC_Start_IT+0x1f6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_TIM_IC_Start_IT+0x23c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_TIM_IC_Start_IT+0x1f6>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_TIM_IC_Start_IT+0x240>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_TIM_IC_Start_IT+0x1f6>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_TIM_IC_Start_IT+0x244>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_TIM_IC_Start_IT+0x1f6>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_TIM_IC_Start_IT+0x248>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_TIM_IC_Start_IT+0x1f6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <HAL_TIM_IC_Start_IT+0x24c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d111      	bne.n	80035a2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b06      	cmp	r3, #6
 800358e:	d010      	beq.n	80035b2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	e007      	b.n	80035b2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40010000 	.word	0x40010000
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40000c00 	.word	0x40000c00
 80035cc:	40010400 	.word	0x40010400
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40001800 	.word	0x40001800

080035d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e097      	b.n	800371c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fe fb65 	bl	8001cd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800361c:	f023 0307 	bic.w	r3, r3, #7
 8003620:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	4619      	mov	r1, r3
 800362c:	4610      	mov	r0, r2
 800362e:	f000 fca1 	bl	8003f74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	4313      	orrs	r3, r2
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003678:	f023 030c 	bic.w	r3, r3, #12
 800367c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	4313      	orrs	r3, r2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	011a      	lsls	r2, r3, #4
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	031b      	lsls	r3, r3, #12
 80036a8:	4313      	orrs	r3, r2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80036be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	4313      	orrs	r3, r2
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003734:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800373c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003744:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800374c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d110      	bne.n	8003776 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800375a:	7b7b      	ldrb	r3, [r7, #13]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d001      	beq.n	8003764 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e069      	b.n	8003838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003774:	e031      	b.n	80037da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d110      	bne.n	800379e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d102      	bne.n	8003788 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003782:	7b3b      	ldrb	r3, [r7, #12]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d001      	beq.n	800378c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e055      	b.n	8003838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800379c:	e01d      	b.n	80037da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d108      	bne.n	80037b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a4:	7bbb      	ldrb	r3, [r7, #14]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d102      	bne.n	80037b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037b0:	7b3b      	ldrb	r3, [r7, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e03e      	b.n	8003838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_TIM_Encoder_Start+0xc4>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d008      	beq.n	80037f8 <HAL_TIM_Encoder_Start+0xd4>
 80037e6:	e00f      	b.n	8003808 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2201      	movs	r2, #1
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 ffd3 	bl	800479c <TIM_CCxChannelCmd>
      break;
 80037f6:	e016      	b.n	8003826 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2201      	movs	r2, #1
 80037fe:	2104      	movs	r1, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f000 ffcb 	bl	800479c <TIM_CCxChannelCmd>
      break;
 8003806:	e00e      	b.n	8003826 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2201      	movs	r2, #1
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f000 ffc3 	bl	800479c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	2104      	movs	r1, #4
 800381e:	4618      	mov	r0, r3
 8003820:	f000 ffbc 	bl	800479c <TIM_CCxChannelCmd>
      break;
 8003824:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b02      	cmp	r3, #2
 8003854:	d122      	bne.n	800389c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b02      	cmp	r3, #2
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0202 	mvn.w	r2, #2
 800386c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fb28 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fb54 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fb5b 	bl	8003f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0204 	mvn.w	r2, #4
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fafe 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb2a 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fb31 	bl	8003f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d122      	bne.n	8003944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b08      	cmp	r3, #8
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0208 	mvn.w	r2, #8
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2204      	movs	r2, #4
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fad4 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fb00 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fb07 	bl	8003f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b10      	cmp	r3, #16
 8003950:	d122      	bne.n	8003998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b10      	cmp	r3, #16
 800395e:	d11b      	bne.n	8003998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0210 	mvn.w	r2, #16
 8003968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2208      	movs	r2, #8
 800396e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd faaa 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8003984:	e005      	b.n	8003992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fad6 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fadd 	bl	8003f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10e      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d107      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0201 	mvn.w	r2, #1
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fab0 	bl	8003f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d10e      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 ffd4 	bl	8004998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d10e      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 faa2 	bl	8003f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d10e      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d107      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0220 	mvn.w	r2, #32
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 ff9e 	bl	8004984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e088      	b.n	8003b80 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f000 fcc2 	bl	8004414 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 020c 	bic.w	r2, r2, #12
 8003a9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	619a      	str	r2, [r3, #24]
 8003ab2:	e060      	b.n	8003b76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d11c      	bne.n	8003af4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f000 fd46 	bl	800455a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003adc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6999      	ldr	r1, [r3, #24]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	021a      	lsls	r2, r3, #8
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	619a      	str	r2, [r3, #24]
 8003af2:	e040      	b.n	8003b76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11b      	bne.n	8003b32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f000 fd93 	bl	8004634 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 020c 	bic.w	r2, r2, #12
 8003b1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	61da      	str	r2, [r3, #28]
 8003b30:	e021      	b.n	8003b76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	d11c      	bne.n	8003b72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f000 fdb0 	bl	80046ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69d9      	ldr	r1, [r3, #28]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	021a      	lsls	r2, r3, #8
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	61da      	str	r2, [r3, #28]
 8003b70:	e001      	b.n	8003b76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e0ae      	b.n	8003d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	f200 809f 	bhi.w	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bf1 	.word	0x08003bf1
 8003bc0:	08003cf5 	.word	0x08003cf5
 8003bc4:	08003cf5 	.word	0x08003cf5
 8003bc8:	08003cf5 	.word	0x08003cf5
 8003bcc:	08003c31 	.word	0x08003c31
 8003bd0:	08003cf5 	.word	0x08003cf5
 8003bd4:	08003cf5 	.word	0x08003cf5
 8003bd8:	08003cf5 	.word	0x08003cf5
 8003bdc:	08003c73 	.word	0x08003c73
 8003be0:	08003cf5 	.word	0x08003cf5
 8003be4:	08003cf5 	.word	0x08003cf5
 8003be8:	08003cf5 	.word	0x08003cf5
 8003bec:	08003cb3 	.word	0x08003cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa5c 	bl	80040b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0204 	bic.w	r2, r2, #4
 8003c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6999      	ldr	r1, [r3, #24]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	619a      	str	r2, [r3, #24]
      break;
 8003c2e:	e064      	b.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 faac 	bl	8004194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	619a      	str	r2, [r3, #24]
      break;
 8003c70:	e043      	b.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fb01 	bl	8004280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0208 	orr.w	r2, r2, #8
 8003c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0204 	bic.w	r2, r2, #4
 8003c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69d9      	ldr	r1, [r3, #28]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	61da      	str	r2, [r3, #28]
      break;
 8003cb0:	e023      	b.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fb55 	bl	8004368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	021a      	lsls	r2, r3, #8
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	61da      	str	r2, [r3, #28]
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_TIM_ConfigClockSource+0x1c>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e0b4      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x186>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d60:	d03e      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	f200 8087 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	f000 8086 	beq.w	8003e7e <HAL_TIM_ConfigClockSource+0x172>
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d87f      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b70      	cmp	r3, #112	; 0x70
 8003d7a:	d01a      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d7c:	2b70      	cmp	r3, #112	; 0x70
 8003d7e:	d87b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b60      	cmp	r3, #96	; 0x60
 8003d82:	d050      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x11a>
 8003d84:	2b60      	cmp	r3, #96	; 0x60
 8003d86:	d877      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b50      	cmp	r3, #80	; 0x50
 8003d8a:	d03c      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0xfa>
 8003d8c:	2b50      	cmp	r3, #80	; 0x50
 8003d8e:	d873      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d058      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x13a>
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d86f      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b30      	cmp	r3, #48	; 0x30
 8003d9a:	d064      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	2b30      	cmp	r3, #48	; 0x30
 8003d9e:	d86b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d060      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x15a>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d867      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d05c      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x15a>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d05a      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x15a>
 8003db0:	e062      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6899      	ldr	r1, [r3, #8]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f000 fccb 	bl	800475c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	609a      	str	r2, [r3, #8]
      break;
 8003dde:	e04f      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f000 fcb4 	bl	800475c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e02:	609a      	str	r2, [r3, #8]
      break;
 8003e04:	e03c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 fb72 	bl	80044fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2150      	movs	r1, #80	; 0x50
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fc81 	bl	8004726 <TIM_ITRx_SetConfig>
      break;
 8003e24:	e02c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 fbce 	bl	80045d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2160      	movs	r1, #96	; 0x60
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fc71 	bl	8004726 <TIM_ITRx_SetConfig>
      break;
 8003e44:	e01c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 fb52 	bl	80044fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc61 	bl	8004726 <TIM_ITRx_SetConfig>
      break;
 8003e64:	e00c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 fc58 	bl	8004726 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e003      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	e000      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d831      	bhi.n	8003f14 <HAL_TIM_ReadCapturedValue+0x78>
 8003eb0:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003f15 	.word	0x08003f15
 8003ec0:	08003f15 	.word	0x08003f15
 8003ec4:	08003f15 	.word	0x08003f15
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003f15 	.word	0x08003f15
 8003ed0:	08003f15 	.word	0x08003f15
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f15 	.word	0x08003f15
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08003f15 	.word	0x08003f15
 8003ee8:	08003f0b 	.word	0x08003f0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	60fb      	str	r3, [r7, #12]

      break;
 8003ef4:	e00f      	b.n	8003f16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	60fb      	str	r3, [r7, #12]

      break;
 8003efe:	e00a      	b.n	8003f16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	60fb      	str	r3, [r7, #12]

      break;
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	60fb      	str	r3, [r7, #12]

      break;
 8003f12:	e000      	b.n	8003f16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f14:	bf00      	nop
  }

  return tmpreg;
 8003f16:	68fb      	ldr	r3, [r7, #12]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a40      	ldr	r2, [pc, #256]	; (8004088 <TIM_Base_SetConfig+0x114>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f92:	d00f      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3d      	ldr	r2, [pc, #244]	; (800408c <TIM_Base_SetConfig+0x118>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3c      	ldr	r2, [pc, #240]	; (8004090 <TIM_Base_SetConfig+0x11c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3b      	ldr	r2, [pc, #236]	; (8004094 <TIM_Base_SetConfig+0x120>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a3a      	ldr	r2, [pc, #232]	; (8004098 <TIM_Base_SetConfig+0x124>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2f      	ldr	r2, [pc, #188]	; (8004088 <TIM_Base_SetConfig+0x114>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d02b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d027      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2c      	ldr	r2, [pc, #176]	; (800408c <TIM_Base_SetConfig+0x118>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d023      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2b      	ldr	r2, [pc, #172]	; (8004090 <TIM_Base_SetConfig+0x11c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <TIM_Base_SetConfig+0x120>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a29      	ldr	r2, [pc, #164]	; (8004098 <TIM_Base_SetConfig+0x124>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d017      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	; (800409c <TIM_Base_SetConfig+0x128>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <TIM_Base_SetConfig+0x12c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00f      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <TIM_Base_SetConfig+0x130>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00b      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <TIM_Base_SetConfig+0x134>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a24      	ldr	r2, [pc, #144]	; (80040ac <TIM_Base_SetConfig+0x138>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <TIM_Base_SetConfig+0x13c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <TIM_Base_SetConfig+0x114>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0xf8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a0c      	ldr	r2, [pc, #48]	; (8004098 <TIM_Base_SetConfig+0x124>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d103      	bne.n	8004074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	615a      	str	r2, [r3, #20]
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40010400 	.word	0x40010400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800
 80040a8:	40001800 	.word	0x40001800
 80040ac:	40001c00 	.word	0x40001c00
 80040b0:	40002000 	.word	0x40002000

080040b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 0302 	bic.w	r3, r3, #2
 80040fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a20      	ldr	r2, [pc, #128]	; (800418c <TIM_OC1_SetConfig+0xd8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC1_SetConfig+0x64>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <TIM_OC1_SetConfig+0xdc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10c      	bne.n	8004132 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0308 	bic.w	r3, r3, #8
 800411e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f023 0304 	bic.w	r3, r3, #4
 8004130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <TIM_OC1_SetConfig+0xd8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_OC1_SetConfig+0x8e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a14      	ldr	r2, [pc, #80]	; (8004190 <TIM_OC1_SetConfig+0xdc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d111      	bne.n	8004166 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40010000 	.word	0x40010000
 8004190:	40010400 	.word	0x40010400

08004194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0210 	bic.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0320 	bic.w	r3, r3, #32
 80041de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a22      	ldr	r2, [pc, #136]	; (8004278 <TIM_OC2_SetConfig+0xe4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_OC2_SetConfig+0x68>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a21      	ldr	r2, [pc, #132]	; (800427c <TIM_OC2_SetConfig+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d10d      	bne.n	8004218 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <TIM_OC2_SetConfig+0xe4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_OC2_SetConfig+0x94>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a16      	ldr	r2, [pc, #88]	; (800427c <TIM_OC2_SetConfig+0xe8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d113      	bne.n	8004250 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800422e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40010400 	.word	0x40010400

08004280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <TIM_OC3_SetConfig+0xe0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC3_SetConfig+0x66>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a20      	ldr	r2, [pc, #128]	; (8004364 <TIM_OC3_SetConfig+0xe4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10d      	bne.n	8004302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a16      	ldr	r2, [pc, #88]	; (8004360 <TIM_OC3_SetConfig+0xe0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC3_SetConfig+0x92>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <TIM_OC3_SetConfig+0xe4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	031b      	lsls	r3, r3, #12
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <TIM_OC4_SetConfig+0xa4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_OC4_SetConfig+0x68>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a11      	ldr	r2, [pc, #68]	; (8004410 <TIM_OC4_SetConfig+0xa8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d109      	bne.n	80043e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	019b      	lsls	r3, r3, #6
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40010400 	.word	0x40010400

08004414 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a28      	ldr	r2, [pc, #160]	; (80044e0 <TIM_TI1_SetConfig+0xcc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01b      	beq.n	800447a <TIM_TI1_SetConfig+0x66>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004448:	d017      	beq.n	800447a <TIM_TI1_SetConfig+0x66>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <TIM_TI1_SetConfig+0xd0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <TIM_TI1_SetConfig+0x66>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <TIM_TI1_SetConfig+0xd4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00f      	beq.n	800447a <TIM_TI1_SetConfig+0x66>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a23      	ldr	r2, [pc, #140]	; (80044ec <TIM_TI1_SetConfig+0xd8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00b      	beq.n	800447a <TIM_TI1_SetConfig+0x66>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <TIM_TI1_SetConfig+0xdc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <TIM_TI1_SetConfig+0x66>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <TIM_TI1_SetConfig+0xe0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_TI1_SetConfig+0x66>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <TIM_TI1_SetConfig+0xe4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <TIM_TI1_SetConfig+0x6a>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <TIM_TI1_SetConfig+0x6c>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0303 	bic.w	r3, r3, #3
 800448a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e003      	b.n	800449e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f023 030a 	bic.w	r3, r3, #10
 80044b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f003 030a 	and.w	r3, r3, #10
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40001800 	.word	0x40001800

080044fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0201 	bic.w	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f023 030a 	bic.w	r3, r3, #10
 8004538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800455a:	b480      	push	{r7}
 800455c:	b087      	sub	sp, #28
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 0210 	bic.w	r2, r3, #16
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004586:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	031b      	lsls	r3, r3, #12
 800459e:	b29b      	uxth	r3, r3
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f023 0210 	bic.w	r2, r3, #16
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	031b      	lsls	r3, r3, #12
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004610:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	621a      	str	r2, [r3, #32]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 0303 	bic.w	r3, r3, #3
 8004660:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004670:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	b2db      	uxtb	r3, r3
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004684:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	621a      	str	r2, [r3, #32]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	031b      	lsls	r3, r3, #12
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80046fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	031b      	lsls	r3, r3, #12
 8004704:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	f043 0307 	orr.w	r3, r3, #7
 8004748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	609a      	str	r2, [r3, #8]
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	021a      	lsls	r2, r3, #8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	431a      	orrs	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	609a      	str	r2, [r3, #8]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	2201      	movs	r2, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1a      	ldr	r2, [r3, #32]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	43db      	mvns	r3, r3
 80047be:	401a      	ands	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e05a      	b.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d01d      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d018      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a17      	ldr	r2, [pc, #92]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a15      	ldr	r2, [pc, #84]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d10c      	bne.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4313      	orrs	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40010400 	.word	0x40010400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40001800 	.word	0x40001800

080048e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e03d      	b.n	8004978 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <__NVIC_SetPriority>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	6039      	str	r1, [r7, #0]
 80049b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	db0a      	blt.n	80049d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	490c      	ldr	r1, [pc, #48]	; (80049f8 <__NVIC_SetPriority+0x4c>)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	0112      	lsls	r2, r2, #4
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	440b      	add	r3, r1
 80049d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049d4:	e00a      	b.n	80049ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	4908      	ldr	r1, [pc, #32]	; (80049fc <__NVIC_SetPriority+0x50>)
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	3b04      	subs	r3, #4
 80049e4:	0112      	lsls	r2, r2, #4
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	440b      	add	r3, r1
 80049ea:	761a      	strb	r2, [r3, #24]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	e000e100 	.word	0xe000e100
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a04:	2100      	movs	r1, #0
 8004a06:	f06f 0004 	mvn.w	r0, #4
 8004a0a:	f7ff ffcf 	bl	80049ac <__NVIC_SetPriority>
#endif
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a1a:	f3ef 8305 	mrs	r3, IPSR
 8004a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a26:	f06f 0305 	mvn.w	r3, #5
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	e00c      	b.n	8004a48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <osKernelInitialize+0x44>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <osKernelInitialize+0x44>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	607b      	str	r3, [r7, #4]
 8004a40:	e002      	b.n	8004a48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295
 8004a46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a48:	687b      	ldr	r3, [r7, #4]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	200000bc 	.word	0x200000bc

08004a5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a62:	f3ef 8305 	mrs	r3, IPSR
 8004a66:	603b      	str	r3, [r7, #0]
  return(result);
 8004a68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004a6e:	f06f 0305 	mvn.w	r3, #5
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	e010      	b.n	8004a98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <osKernelStart+0x48>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d109      	bne.n	8004a92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a7e:	f7ff ffbf 	bl	8004a00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <osKernelStart+0x48>)
 8004a84:	2202      	movs	r2, #2
 8004a86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a88:	f001 f866 	bl	8005b58 <vTaskStartScheduler>
      stat = osOK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	e002      	b.n	8004a98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a92:	f04f 33ff 	mov.w	r3, #4294967295
 8004a96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a98:	687b      	ldr	r3, [r7, #4]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	200000bc 	.word	0x200000bc

08004aa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08e      	sub	sp, #56	; 0x38
 8004aac:	af04      	add	r7, sp, #16
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ab8:	f3ef 8305 	mrs	r3, IPSR
 8004abc:	617b      	str	r3, [r7, #20]
  return(result);
 8004abe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d17e      	bne.n	8004bc2 <osThreadNew+0x11a>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d07b      	beq.n	8004bc2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ace:	2318      	movs	r3, #24
 8004ad0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ada:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d045      	beq.n	8004b6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <osThreadNew+0x48>
        name = attr->name;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <osThreadNew+0x6e>
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	2b38      	cmp	r3, #56	; 0x38
 8004b08:	d805      	bhi.n	8004b16 <osThreadNew+0x6e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <osThreadNew+0x72>
        return (NULL);
 8004b16:	2300      	movs	r3, #0
 8004b18:	e054      	b.n	8004bc4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00e      	beq.n	8004b50 <osThreadNew+0xa8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b5b      	cmp	r3, #91	; 0x5b
 8004b38:	d90a      	bls.n	8004b50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d006      	beq.n	8004b50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <osThreadNew+0xa8>
        mem = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e010      	b.n	8004b72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10c      	bne.n	8004b72 <osThreadNew+0xca>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d108      	bne.n	8004b72 <osThreadNew+0xca>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <osThreadNew+0xca>
          mem = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	e001      	b.n	8004b72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d110      	bne.n	8004b9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b80:	9202      	str	r2, [sp, #8]
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6a3a      	ldr	r2, [r7, #32]
 8004b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fe0c 	bl	80057ac <xTaskCreateStatic>
 8004b94:	4603      	mov	r3, r0
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	e013      	b.n	8004bc2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d110      	bne.n	8004bc2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	f107 0310 	add.w	r3, r7, #16
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fe57 	bl	8005866 <xTaskCreate>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d001      	beq.n	8004bc2 <osThreadNew+0x11a>
            hTask = NULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004bc2:	693b      	ldr	r3, [r7, #16]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3728      	adds	r7, #40	; 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd4:	f3ef 8305 	mrs	r3, IPSR
 8004bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <osDelay+0x1c>
    stat = osErrorISR;
 8004be0:	f06f 0305 	mvn.w	r3, #5
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e007      	b.n	8004bf8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 ff7c 	bl	8005af0 <vTaskDelay>
    }
  }

  return (stat);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a07      	ldr	r2, [pc, #28]	; (8004c30 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4a06      	ldr	r2, [pc, #24]	; (8004c34 <vApplicationGetIdleTaskMemory+0x30>)
 8004c1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2280      	movs	r2, #128	; 0x80
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	200000c0 	.word	0x200000c0
 8004c34:	2000011c 	.word	0x2000011c

08004c38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a07      	ldr	r2, [pc, #28]	; (8004c64 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4a06      	ldr	r2, [pc, #24]	; (8004c68 <vApplicationGetTimerTaskMemory+0x30>)
 8004c4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c56:	601a      	str	r2, [r3, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	2000031c 	.word	0x2000031c
 8004c68:	20000378 	.word	0x20000378

08004c6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f103 0208 	add.w	r2, r3, #8
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f103 0208 	add.w	r2, r3, #8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f103 0208 	add.w	r2, r3, #8
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d103      	bne.n	8004d2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e00c      	b.n	8004d48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3308      	adds	r3, #8
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e002      	b.n	8004d3c <vListInsert+0x2e>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d2f6      	bcs.n	8004d36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6892      	ldr	r2, [r2, #8]
 8004d96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6852      	ldr	r2, [r2, #4]
 8004da0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d103      	bne.n	8004db4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004dfe:	f002 f851 	bl	8006ea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e0e:	fb01 f303 	mul.w	r3, r1, r3
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	22ff      	movs	r2, #255	; 0xff
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	22ff      	movs	r2, #255	; 0xff
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d114      	bne.n	8004e7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3310      	adds	r3, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 f903 	bl	800606c <xTaskRemoveFromEventList>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d012      	beq.n	8004e92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <xQueueGenericReset+0xcc>)
 8004e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	e009      	b.n	8004e92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3310      	adds	r3, #16
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fef2 	bl	8004c6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3324      	adds	r3, #36	; 0x24
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff feed 	bl	8004c6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e92:	f002 f837 	bl	8006f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08e      	sub	sp, #56	; 0x38
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <xQueueGenericCreateStatic+0x52>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <xQueueGenericCreateStatic+0x56>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueGenericCreateStatic+0x58>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	623b      	str	r3, [r7, #32]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <xQueueGenericCreateStatic+0x7e>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <xQueueGenericCreateStatic+0x82>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <xQueueGenericCreateStatic+0x84>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	61fb      	str	r3, [r7, #28]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f42:	2350      	movs	r3, #80	; 0x50
 8004f44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d00a      	beq.n	8004f62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	61bb      	str	r3, [r7, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f805 	bl	8004f94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3730      	adds	r7, #48	; 0x30
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e002      	b.n	8004fb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	69b8      	ldr	r0, [r7, #24]
 8004fc6:	f7ff ff05 	bl	8004dd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08e      	sub	sp, #56	; 0x38
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fea:	2300      	movs	r3, #0
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <xQueueGenericSend+0x32>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800500a:	bf00      	nop
 800500c:	e7fe      	b.n	800500c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <xQueueGenericSend+0x40>
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <xQueueGenericSend+0x44>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <xQueueGenericSend+0x46>
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xQueueGenericSend+0x60>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d103      	bne.n	800504a <xQueueGenericSend+0x6e>
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <xQueueGenericSend+0x72>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <xQueueGenericSend+0x74>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <xQueueGenericSend+0x8e>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	623b      	str	r3, [r7, #32]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800506a:	f001 f9bd 	bl	80063e8 <xTaskGetSchedulerState>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <xQueueGenericSend+0x9e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <xQueueGenericSend+0xa2>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <xQueueGenericSend+0xa4>
 800507e:	2300      	movs	r3, #0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <xQueueGenericSend+0xbe>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	61fb      	str	r3, [r7, #28]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800509a:	f001 ff03 	bl	8006ea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d302      	bcc.n	80050b0 <xQueueGenericSend+0xd4>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d129      	bne.n	8005104 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050b6:	f000 fa0b 	bl	80054d0 <prvCopyDataToQueue>
 80050ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d010      	beq.n	80050e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	3324      	adds	r3, #36	; 0x24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 ffcf 	bl	800606c <xTaskRemoveFromEventList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050d4:	4b3f      	ldr	r3, [pc, #252]	; (80051d4 <xQueueGenericSend+0x1f8>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	e00a      	b.n	80050fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050ec:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <xQueueGenericSend+0x1f8>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050fc:	f001 ff02 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 8005100:	2301      	movs	r3, #1
 8005102:	e063      	b.n	80051cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800510a:	f001 fefb 	bl	8006f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800510e:	2300      	movs	r3, #0
 8005110:	e05c      	b.n	80051cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	4618      	mov	r0, r3
 800511e:	f001 f809 	bl	8006134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005122:	2301      	movs	r3, #1
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005126:	f001 feed 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800512a:	f000 fd7b 	bl	8005c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800512e:	f001 feb9 	bl	8006ea4 <vPortEnterCritical>
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005138:	b25b      	sxtb	r3, r3
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d103      	bne.n	8005148 <xQueueGenericSend+0x16c>
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800514e:	b25b      	sxtb	r3, r3
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d103      	bne.n	800515e <xQueueGenericSend+0x182>
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800515e:	f001 fed1 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005162:	1d3a      	adds	r2, r7, #4
 8005164:	f107 0314 	add.w	r3, r7, #20
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fff8 	bl	8006160 <xTaskCheckForTimeOut>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d124      	bne.n	80051c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005178:	f000 faa2 	bl	80056c0 <prvIsQueueFull>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d018      	beq.n	80051b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	3310      	adds	r3, #16
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f000 ff1e 	bl	8005fcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005192:	f000 fa2d 	bl	80055f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005196:	f000 fd53 	bl	8005c40 <xTaskResumeAll>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f af7c 	bne.w	800509a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <xQueueGenericSend+0x1f8>)
 80051a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	e772      	b.n	800509a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b6:	f000 fa1b 	bl	80055f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ba:	f000 fd41 	bl	8005c40 <xTaskResumeAll>
 80051be:	e76c      	b.n	800509a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051c2:	f000 fa15 	bl	80055f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051c6:	f000 fd3b 	bl	8005c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3738      	adds	r7, #56	; 0x38
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b090      	sub	sp, #64	; 0x40
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <xQueueGenericSendFromISR+0x3c>
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <xQueueGenericSendFromISR+0x40>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <xQueueGenericSendFromISR+0x42>
 8005218:	2300      	movs	r3, #0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d103      	bne.n	8005242 <xQueueGenericSendFromISR+0x6a>
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <xQueueGenericSendFromISR+0x6e>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <xQueueGenericSendFromISR+0x70>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	623b      	str	r3, [r7, #32]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005262:	f001 ff01 	bl	8007068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005266:	f3ef 8211 	mrs	r2, BASEPRI
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	61fa      	str	r2, [r7, #28]
 800527c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800527e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <xQueueGenericSendFromISR+0xbc>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d12f      	bne.n	80052f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052aa:	f000 f911 	bl	80054d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d112      	bne.n	80052de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d016      	beq.n	80052ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	3324      	adds	r3, #36	; 0x24
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fed1 	bl	800606c <xTaskRemoveFromEventList>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00e      	beq.n	80052ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e007      	b.n	80052ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052e2:	3301      	adds	r3, #1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	b25a      	sxtb	r2, r3
 80052e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052ee:	2301      	movs	r3, #1
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80052f2:	e001      	b.n	80052f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005302:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005306:	4618      	mov	r0, r3
 8005308:	3740      	adds	r7, #64	; 0x40
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08c      	sub	sp, #48	; 0x30
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <xQueueReceive+0x30>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	623b      	str	r3, [r7, #32]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <xQueueReceive+0x3e>
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <xQueueReceive+0x42>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <xQueueReceive+0x44>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xQueueReceive+0x5e>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	61fb      	str	r3, [r7, #28]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800536e:	f001 f83b 	bl	80063e8 <xTaskGetSchedulerState>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <xQueueReceive+0x6e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <xQueueReceive+0x72>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <xQueueReceive+0x74>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueReceive+0x8e>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	61bb      	str	r3, [r7, #24]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800539e:	f001 fd81 	bl	8006ea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01f      	beq.n	80053ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b2:	f000 f8f7 	bl	80055a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1e5a      	subs	r2, r3, #1
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	3310      	adds	r3, #16
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fe4e 	bl	800606c <xTaskRemoveFromEventList>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <xQueueReceive+0x1bc>)
 80053d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053e6:	f001 fd8d 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e069      	b.n	80054c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053f4:	f001 fd86 	bl	8006f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e062      	b.n	80054c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005402:	f107 0310 	add.w	r3, r7, #16
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fe94 	bl	8006134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005410:	f001 fd78 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005414:	f000 fc06 	bl	8005c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005418:	f001 fd44 	bl	8006ea4 <vPortEnterCritical>
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005422:	b25b      	sxtb	r3, r3
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d103      	bne.n	8005432 <xQueueReceive+0x122>
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005438:	b25b      	sxtb	r3, r3
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d103      	bne.n	8005448 <xQueueReceive+0x138>
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005448:	f001 fd5c 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800544c:	1d3a      	adds	r2, r7, #4
 800544e:	f107 0310 	add.w	r3, r7, #16
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fe83 	bl	8006160 <xTaskCheckForTimeOut>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d123      	bne.n	80054a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005462:	f000 f917 	bl	8005694 <prvIsQueueEmpty>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d017      	beq.n	800549c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	3324      	adds	r3, #36	; 0x24
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fda9 	bl	8005fcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800547a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800547c:	f000 f8b8 	bl	80055f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005480:	f000 fbde 	bl	8005c40 <xTaskResumeAll>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d189      	bne.n	800539e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <xQueueReceive+0x1bc>)
 800548c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	e780      	b.n	800539e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800549c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800549e:	f000 f8a7 	bl	80055f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054a2:	f000 fbcd 	bl	8005c40 <xTaskResumeAll>
 80054a6:	e77a      	b.n	800539e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054aa:	f000 f8a1 	bl	80055f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ae:	f000 fbc7 	bl	8005c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b4:	f000 f8ee 	bl	8005694 <prvIsQueueEmpty>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f43f af6f 	beq.w	800539e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3730      	adds	r7, #48	; 0x30
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d14d      	bne.n	8005592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 ff92 	bl	8006424 <xTaskPriorityDisinherit>
 8005500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	e043      	b.n	8005592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d119      	bne.n	8005544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6858      	ldr	r0, [r3, #4]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	461a      	mov	r2, r3
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	f002 fa2a 	bl	8007974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	441a      	add	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d32b      	bcc.n	8005592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	605a      	str	r2, [r3, #4]
 8005542:	e026      	b.n	8005592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68d8      	ldr	r0, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	461a      	mov	r2, r3
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	f002 fa10 	bl	8007974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	425b      	negs	r3, r3
 800555e:	441a      	add	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d207      	bcs.n	8005580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	425b      	negs	r3, r3
 800557a:	441a      	add	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d105      	bne.n	8005592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	3b01      	subs	r3, #1
 8005590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800559a:	697b      	ldr	r3, [r7, #20]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d018      	beq.n	80055e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	441a      	add	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d303      	bcc.n	80055d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68d9      	ldr	r1, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	461a      	mov	r2, r3
 80055e2:	6838      	ldr	r0, [r7, #0]
 80055e4:	f002 f9c6 	bl	8007974 <memcpy>
	}
}
 80055e8:	bf00      	nop
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055f8:	f001 fc54 	bl	8006ea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005604:	e011      	b.n	800562a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b00      	cmp	r3, #0
 800560c:	d012      	beq.n	8005634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3324      	adds	r3, #36	; 0x24
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fd2a 	bl	800606c <xTaskRemoveFromEventList>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800561e:	f000 fe01 	bl	8006224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	3b01      	subs	r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	dce9      	bgt.n	8005606 <prvUnlockQueue+0x16>
 8005632:	e000      	b.n	8005636 <prvUnlockQueue+0x46>
					break;
 8005634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	22ff      	movs	r2, #255	; 0xff
 800563a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800563e:	f001 fc61 	bl	8006f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005642:	f001 fc2f 	bl	8006ea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800564c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800564e:	e011      	b.n	8005674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3310      	adds	r3, #16
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fd05 	bl	800606c <xTaskRemoveFromEventList>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005668:	f000 fddc 	bl	8006224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800566c:	7bbb      	ldrb	r3, [r7, #14]
 800566e:	3b01      	subs	r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005678:	2b00      	cmp	r3, #0
 800567a:	dce9      	bgt.n	8005650 <prvUnlockQueue+0x60>
 800567c:	e000      	b.n	8005680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800567e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	22ff      	movs	r2, #255	; 0xff
 8005684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005688:	f001 fc3c 	bl	8006f04 <vPortExitCritical>
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800569c:	f001 fc02 	bl	8006ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e001      	b.n	80056b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056b2:	f001 fc27 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 80056b6:	68fb      	ldr	r3, [r7, #12]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056c8:	f001 fbec 	bl	8006ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d102      	bne.n	80056de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e001      	b.n	80056e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056e2:	f001 fc0f 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 80056e6:	68fb      	ldr	r3, [r7, #12]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e014      	b.n	800572a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005700:	4a0f      	ldr	r2, [pc, #60]	; (8005740 <vQueueAddToRegistry+0x50>)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800570c:	490c      	ldr	r1, [pc, #48]	; (8005740 <vQueueAddToRegistry+0x50>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <vQueueAddToRegistry+0x50>)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005722:	e006      	b.n	8005732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b07      	cmp	r3, #7
 800572e:	d9e7      	bls.n	8005700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	20004b6c 	.word	0x20004b6c

08005744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005754:	f001 fba6 	bl	8006ea4 <vPortEnterCritical>
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800575e:	b25b      	sxtb	r3, r3
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d103      	bne.n	800576e <vQueueWaitForMessageRestricted+0x2a>
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005774:	b25b      	sxtb	r3, r3
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d103      	bne.n	8005784 <vQueueWaitForMessageRestricted+0x40>
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005784:	f001 fbbe 	bl	8006f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3324      	adds	r3, #36	; 0x24
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fc3b 	bl	8006014 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800579e:	6978      	ldr	r0, [r7, #20]
 80057a0:	f7ff ff26 	bl	80055f0 <prvUnlockQueue>
	}
 80057a4:	bf00      	nop
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08e      	sub	sp, #56	; 0x38
 80057b0:	af04      	add	r7, sp, #16
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	623b      	str	r3, [r7, #32]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	61fb      	str	r3, [r7, #28]
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057f2:	235c      	movs	r3, #92	; 0x5c
 80057f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b5c      	cmp	r3, #92	; 0x5c
 80057fa:	d00a      	beq.n	8005812 <xTaskCreateStatic+0x66>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	61bb      	str	r3, [r7, #24]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005812:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01e      	beq.n	8005858 <xTaskCreateStatic+0xac>
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01b      	beq.n	8005858 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005828:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005832:	2300      	movs	r3, #0
 8005834:	9303      	str	r3, [sp, #12]
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	9302      	str	r3, [sp, #8]
 800583a:	f107 0314 	add.w	r3, r7, #20
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f850 	bl	80058f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005852:	f000 f8dd 	bl	8005a10 <prvAddNewTaskToReadyList>
 8005856:	e001      	b.n	800585c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800585c:	697b      	ldr	r3, [r7, #20]
	}
 800585e:	4618      	mov	r0, r3
 8005860:	3728      	adds	r7, #40	; 0x28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005866:	b580      	push	{r7, lr}
 8005868:	b08c      	sub	sp, #48	; 0x30
 800586a:	af04      	add	r7, sp, #16
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fc34 	bl	80070e8 <pvPortMalloc>
 8005880:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00e      	beq.n	80058a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005888:	205c      	movs	r0, #92	; 0x5c
 800588a:	f001 fc2d 	bl	80070e8 <pvPortMalloc>
 800588e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
 800589c:	e005      	b.n	80058aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800589e:	6978      	ldr	r0, [r7, #20]
 80058a0:	f001 fcee 	bl	8007280 <vPortFree>
 80058a4:	e001      	b.n	80058aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	2300      	movs	r3, #0
 80058bc:	9303      	str	r3, [sp, #12]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	9302      	str	r3, [sp, #8]
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f80e 	bl	80058f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058d4:	69f8      	ldr	r0, [r7, #28]
 80058d6:	f000 f89b 	bl	8005a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058da:	2301      	movs	r3, #1
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e002      	b.n	80058e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058e0:	f04f 33ff 	mov.w	r3, #4294967295
 80058e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058e6:	69bb      	ldr	r3, [r7, #24]
	}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	461a      	mov	r2, r3
 8005908:	21a5      	movs	r1, #165	; 0xa5
 800590a:	f002 f841 	bl	8007990 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005918:	3b01      	subs	r3, #1
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f023 0307 	bic.w	r3, r3, #7
 8005926:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	617b      	str	r3, [r7, #20]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01f      	beq.n	800598e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e012      	b.n	800597a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	7819      	ldrb	r1, [r3, #0]
 800595c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	3334      	adds	r3, #52	; 0x34
 8005964:	460a      	mov	r2, r1
 8005966:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d006      	beq.n	8005982 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	3301      	adds	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b0f      	cmp	r3, #15
 800597e:	d9e9      	bls.n	8005954 <prvInitialiseNewTask+0x64>
 8005980:	e000      	b.n	8005984 <prvInitialiseNewTask+0x94>
			{
				break;
 8005982:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800598c:	e003      	b.n	8005996 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	2b37      	cmp	r3, #55	; 0x37
 800599a:	d901      	bls.n	80059a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800599c:	2337      	movs	r3, #55	; 0x37
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	2200      	movs	r2, #0
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	3304      	adds	r3, #4
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff f978 	bl	8004cac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	3318      	adds	r3, #24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff f973 	bl	8004cac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	2200      	movs	r2, #0
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	69b8      	ldr	r0, [r7, #24]
 80059f0:	f001 f928 	bl	8006c44 <pxPortInitialiseStack>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a06:	bf00      	nop
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a18:	f001 fa44 	bl	8006ea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a1c:	4b2d      	ldr	r3, [pc, #180]	; (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3301      	adds	r3, #1
 8005a22:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a26:	4b2c      	ldr	r3, [pc, #176]	; (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a2e:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d110      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a3c:	f000 fc16 	bl	800626c <prvInitialiseTaskLists>
 8005a40:	e00d      	b.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a42:	4b26      	ldr	r3, [pc, #152]	; (8005adc <prvAddNewTaskToReadyList+0xcc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a4a:	4b23      	ldr	r3, [pc, #140]	; (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d802      	bhi.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a58:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a5e:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <prvAddNewTaskToReadyList+0xd0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <prvAddNewTaskToReadyList+0xd0>)
 8005a66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a68:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <prvAddNewTaskToReadyList+0xd0>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <prvAddNewTaskToReadyList+0xd4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d903      	bls.n	8005a84 <prvAddNewTaskToReadyList+0x74>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <prvAddNewTaskToReadyList+0xd4>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <prvAddNewTaskToReadyList+0xd8>)
 8005a92:	441a      	add	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f7ff f913 	bl	8004cc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aa0:	f001 fa30 	bl	8006f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <prvAddNewTaskToReadyList+0xcc>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00e      	beq.n	8005aca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d207      	bcs.n	8005aca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <prvAddNewTaskToReadyList+0xdc>)
 8005abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000c4c 	.word	0x20000c4c
 8005ad8:	20000778 	.word	0x20000778
 8005adc:	20000c58 	.word	0x20000c58
 8005ae0:	20000c68 	.word	0x20000c68
 8005ae4:	20000c54 	.word	0x20000c54
 8005ae8:	2000077c 	.word	0x2000077c
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d017      	beq.n	8005b32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <vTaskDelay+0x60>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <vTaskDelay+0x30>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	60bb      	str	r3, [r7, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b20:	f000 f880 	bl	8005c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b24:	2100      	movs	r1, #0
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fcea 	bl	8006500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b2c:	f000 f888 	bl	8005c40 <xTaskResumeAll>
 8005b30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d107      	bne.n	8005b48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b38:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <vTaskDelay+0x64>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000c74 	.word	0x20000c74
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b66:	463a      	mov	r2, r7
 8005b68:	1d39      	adds	r1, r7, #4
 8005b6a:	f107 0308 	add.w	r3, r7, #8
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff f848 	bl	8004c04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	9202      	str	r2, [sp, #8]
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	2300      	movs	r3, #0
 8005b84:	460a      	mov	r2, r1
 8005b86:	4921      	ldr	r1, [pc, #132]	; (8005c0c <vTaskStartScheduler+0xb4>)
 8005b88:	4821      	ldr	r0, [pc, #132]	; (8005c10 <vTaskStartScheduler+0xb8>)
 8005b8a:	f7ff fe0f 	bl	80057ac <xTaskCreateStatic>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4a20      	ldr	r2, [pc, #128]	; (8005c14 <vTaskStartScheduler+0xbc>)
 8005b92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b94:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <vTaskStartScheduler+0xbc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	e001      	b.n	8005ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d102      	bne.n	8005bb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bac:	f000 fcfc 	bl	80065a8 <xTimerCreateTimerTask>
 8005bb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d116      	bne.n	8005be6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	613b      	str	r3, [r7, #16]
}
 8005bca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <vTaskStartScheduler+0xc0>)
 8005bce:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bd4:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <vTaskStartScheduler+0xc4>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bda:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <vTaskStartScheduler+0xc8>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005be0:	f001 f8be 	bl	8006d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005be4:	e00e      	b.n	8005c04 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d10a      	bne.n	8005c04 <vTaskStartScheduler+0xac>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	60fb      	str	r3, [r7, #12]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <vTaskStartScheduler+0xaa>
}
 8005c04:	bf00      	nop
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	08008248 	.word	0x08008248
 8005c10:	0800623d 	.word	0x0800623d
 8005c14:	20000c70 	.word	0x20000c70
 8005c18:	20000c6c 	.word	0x20000c6c
 8005c1c:	20000c58 	.word	0x20000c58
 8005c20:	20000c50 	.word	0x20000c50

08005c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c28:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <vTaskSuspendAll+0x18>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	4a03      	ldr	r2, [pc, #12]	; (8005c3c <vTaskSuspendAll+0x18>)
 8005c30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c32:	bf00      	nop
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000c74 	.word	0x20000c74

08005c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c4e:	4b42      	ldr	r3, [pc, #264]	; (8005d58 <xTaskResumeAll+0x118>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <xTaskResumeAll+0x2c>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c6c:	f001 f91a 	bl	8006ea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c70:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <xTaskResumeAll+0x118>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4a38      	ldr	r2, [pc, #224]	; (8005d58 <xTaskResumeAll+0x118>)
 8005c78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <xTaskResumeAll+0x118>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d162      	bne.n	8005d48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <xTaskResumeAll+0x11c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d05e      	beq.n	8005d48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c8a:	e02f      	b.n	8005cec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8c:	4b34      	ldr	r3, [pc, #208]	; (8005d60 <xTaskResumeAll+0x120>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3318      	adds	r3, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff f871 	bl	8004d80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff f86c 	bl	8004d80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cac:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <xTaskResumeAll+0x124>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d903      	bls.n	8005cbc <xTaskResumeAll+0x7c>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <xTaskResumeAll+0x124>)
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4a27      	ldr	r2, [pc, #156]	; (8005d68 <xTaskResumeAll+0x128>)
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f7fe fff7 	bl	8004cc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <xTaskResumeAll+0x12c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ce6:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <xTaskResumeAll+0x130>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <xTaskResumeAll+0x120>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1cb      	bne.n	8005c8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cfa:	f000 fb55 	bl	80063a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <xTaskResumeAll+0x134>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d0a:	f000 f847 	bl	8005d9c <xTaskIncrementTick>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <xTaskResumeAll+0x130>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f1      	bne.n	8005d0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <xTaskResumeAll+0x134>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xTaskResumeAll+0x130>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <xTaskResumeAll+0x138>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d48:	f001 f8dc 	bl	8006f04 <vPortExitCritical>

	return xAlreadyYielded;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000c74 	.word	0x20000c74
 8005d5c:	20000c4c 	.word	0x20000c4c
 8005d60:	20000c0c 	.word	0x20000c0c
 8005d64:	20000c54 	.word	0x20000c54
 8005d68:	2000077c 	.word	0x2000077c
 8005d6c:	20000778 	.word	0x20000778
 8005d70:	20000c60 	.word	0x20000c60
 8005d74:	20000c5c 	.word	0x20000c5c
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d82:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <xTaskGetTickCount+0x1c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d88:	687b      	ldr	r3, [r7, #4]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000c50 	.word	0x20000c50

08005d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005da6:	4b4f      	ldr	r3, [pc, #316]	; (8005ee4 <xTaskIncrementTick+0x148>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 808f 	bne.w	8005ece <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005db0:	4b4d      	ldr	r3, [pc, #308]	; (8005ee8 <xTaskIncrementTick+0x14c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005db8:	4a4b      	ldr	r2, [pc, #300]	; (8005ee8 <xTaskIncrementTick+0x14c>)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d120      	bne.n	8005e06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dc4:	4b49      	ldr	r3, [pc, #292]	; (8005eec <xTaskIncrementTick+0x150>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	603b      	str	r3, [r7, #0]
}
 8005de0:	bf00      	nop
 8005de2:	e7fe      	b.n	8005de2 <xTaskIncrementTick+0x46>
 8005de4:	4b41      	ldr	r3, [pc, #260]	; (8005eec <xTaskIncrementTick+0x150>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	4b41      	ldr	r3, [pc, #260]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3f      	ldr	r2, [pc, #252]	; (8005eec <xTaskIncrementTick+0x150>)
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b3e      	ldr	r3, [pc, #248]	; (8005ef4 <xTaskIncrementTick+0x158>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	4a3d      	ldr	r2, [pc, #244]	; (8005ef4 <xTaskIncrementTick+0x158>)
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	f000 fad1 	bl	80063a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e06:	4b3c      	ldr	r3, [pc, #240]	; (8005ef8 <xTaskIncrementTick+0x15c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d349      	bcc.n	8005ea4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e10:	4b36      	ldr	r3, [pc, #216]	; (8005eec <xTaskIncrementTick+0x150>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1a:	4b37      	ldr	r3, [pc, #220]	; (8005ef8 <xTaskIncrementTick+0x15c>)
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	601a      	str	r2, [r3, #0]
					break;
 8005e22:	e03f      	b.n	8005ea4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e24:	4b31      	ldr	r3, [pc, #196]	; (8005eec <xTaskIncrementTick+0x150>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d203      	bcs.n	8005e44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e3c:	4a2e      	ldr	r2, [pc, #184]	; (8005ef8 <xTaskIncrementTick+0x15c>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e42:	e02f      	b.n	8005ea4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe ff99 	bl	8004d80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3318      	adds	r3, #24
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe ff90 	bl	8004d80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	4b25      	ldr	r3, [pc, #148]	; (8005efc <xTaskIncrementTick+0x160>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d903      	bls.n	8005e74 <xTaskIncrementTick+0xd8>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	4a22      	ldr	r2, [pc, #136]	; (8005efc <xTaskIncrementTick+0x160>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a1f      	ldr	r2, [pc, #124]	; (8005f00 <xTaskIncrementTick+0x164>)
 8005e82:	441a      	add	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe ff1b 	bl	8004cc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <xTaskIncrementTick+0x168>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d3b8      	bcc.n	8005e10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea2:	e7b5      	b.n	8005e10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ea4:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <xTaskIncrementTick+0x168>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	4915      	ldr	r1, [pc, #84]	; (8005f00 <xTaskIncrementTick+0x164>)
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d901      	bls.n	8005ec0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ec0:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <xTaskIncrementTick+0x16c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e004      	b.n	8005ed8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <xTaskIncrementTick+0x170>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <xTaskIncrementTick+0x170>)
 8005ed6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ed8:	697b      	ldr	r3, [r7, #20]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000c74 	.word	0x20000c74
 8005ee8:	20000c50 	.word	0x20000c50
 8005eec:	20000c04 	.word	0x20000c04
 8005ef0:	20000c08 	.word	0x20000c08
 8005ef4:	20000c64 	.word	0x20000c64
 8005ef8:	20000c6c 	.word	0x20000c6c
 8005efc:	20000c54 	.word	0x20000c54
 8005f00:	2000077c 	.word	0x2000077c
 8005f04:	20000778 	.word	0x20000778
 8005f08:	20000c60 	.word	0x20000c60
 8005f0c:	20000c5c 	.word	0x20000c5c

08005f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f16:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <vTaskSwitchContext+0xa8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f1e:	4b27      	ldr	r3, [pc, #156]	; (8005fbc <vTaskSwitchContext+0xac>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f24:	e041      	b.n	8005faa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005f26:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <vTaskSwitchContext+0xac>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2c:	4b24      	ldr	r3, [pc, #144]	; (8005fc0 <vTaskSwitchContext+0xb0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e010      	b.n	8005f56 <vTaskSwitchContext+0x46>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	607b      	str	r3, [r7, #4]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <vTaskSwitchContext+0x3e>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	491b      	ldr	r1, [pc, #108]	; (8005fc4 <vTaskSwitchContext+0xb4>)
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0e4      	beq.n	8005f34 <vTaskSwitchContext+0x24>
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4a13      	ldr	r2, [pc, #76]	; (8005fc4 <vTaskSwitchContext+0xb4>)
 8005f76:	4413      	add	r3, r2
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d104      	bne.n	8005f9a <vTaskSwitchContext+0x8a>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <vTaskSwitchContext+0xb8>)
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	4a06      	ldr	r2, [pc, #24]	; (8005fc0 <vTaskSwitchContext+0xb0>)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6013      	str	r3, [r2, #0]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20000c74 	.word	0x20000c74
 8005fbc:	20000c60 	.word	0x20000c60
 8005fc0:	20000c54 	.word	0x20000c54
 8005fc4:	2000077c 	.word	0x2000077c
 8005fc8:	20000778 	.word	0x20000778

08005fcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <vTaskPlaceOnEventList+0x44>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3318      	adds	r3, #24
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fe fe87 	bl	8004d0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006000:	2101      	movs	r1, #1
 8006002:	6838      	ldr	r0, [r7, #0]
 8006004:	f000 fa7c 	bl	8006500 <prvAddCurrentTaskToDelayedList>
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000778 	.word	0x20000778

08006014 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	617b      	str	r3, [r7, #20]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <vTaskPlaceOnEventListRestricted+0x54>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3318      	adds	r3, #24
 8006042:	4619      	mov	r1, r3
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7fe fe3e 	bl	8004cc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	68b8      	ldr	r0, [r7, #8]
 800605a:	f000 fa51 	bl	8006500 <prvAddCurrentTaskToDelayedList>
	}
 800605e:	bf00      	nop
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000778 	.word	0x20000778

0800606c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60fb      	str	r3, [r7, #12]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	3318      	adds	r3, #24
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fe6f 	bl	8004d80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a2:	4b1e      	ldr	r3, [pc, #120]	; (800611c <xTaskRemoveFromEventList+0xb0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11d      	bne.n	80060e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fe66 	bl	8004d80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b8:	4b19      	ldr	r3, [pc, #100]	; (8006120 <xTaskRemoveFromEventList+0xb4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d903      	bls.n	80060c8 <xTaskRemoveFromEventList+0x5c>
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <xTaskRemoveFromEventList+0xb4>)
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <xTaskRemoveFromEventList+0xb8>)
 80060d6:	441a      	add	r2, r3
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fe fdf1 	bl	8004cc6 <vListInsertEnd>
 80060e4:	e005      	b.n	80060f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	3318      	adds	r3, #24
 80060ea:	4619      	mov	r1, r3
 80060ec:	480e      	ldr	r0, [pc, #56]	; (8006128 <xTaskRemoveFromEventList+0xbc>)
 80060ee:	f7fe fdea 	bl	8004cc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <xTaskRemoveFromEventList+0xc0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d905      	bls.n	800610c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <xTaskRemoveFromEventList+0xc4>)
 8006106:	2201      	movs	r2, #1
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e001      	b.n	8006110 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006110:	697b      	ldr	r3, [r7, #20]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000c74 	.word	0x20000c74
 8006120:	20000c54 	.word	0x20000c54
 8006124:	2000077c 	.word	0x2000077c
 8006128:	20000c0c 	.word	0x20000c0c
 800612c:	20000778 	.word	0x20000778
 8006130:	20000c60 	.word	0x20000c60

08006134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <vTaskInternalSetTimeOutState+0x24>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <vTaskInternalSetTimeOutState+0x28>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	605a      	str	r2, [r3, #4]
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	20000c64 	.word	0x20000c64
 800615c:	20000c50 	.word	0x20000c50

08006160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	613b      	str	r3, [r7, #16]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	60fb      	str	r3, [r7, #12]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061a2:	f000 fe7f 	bl	8006ea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061a6:	4b1d      	ldr	r3, [pc, #116]	; (800621c <xTaskCheckForTimeOut+0xbc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d102      	bne.n	80061c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e023      	b.n	800620e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b15      	ldr	r3, [pc, #84]	; (8006220 <xTaskCheckForTimeOut+0xc0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d007      	beq.n	80061e2 <xTaskCheckForTimeOut+0x82>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e015      	b.n	800620e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d20b      	bcs.n	8006204 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ff9b 	bl	8006134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e004      	b.n	800620e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800620a:	2301      	movs	r3, #1
 800620c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800620e:	f000 fe79 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 8006212:	69fb      	ldr	r3, [r7, #28]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000c50 	.word	0x20000c50
 8006220:	20000c64 	.word	0x20000c64

08006224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006228:	4b03      	ldr	r3, [pc, #12]	; (8006238 <vTaskMissedYield+0x14>)
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
}
 800622e:	bf00      	nop
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000c60 	.word	0x20000c60

0800623c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006244:	f000 f852 	bl	80062ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <prvIdleTask+0x28>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d9f9      	bls.n	8006244 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <prvIdleTask+0x2c>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006260:	e7f0      	b.n	8006244 <prvIdleTask+0x8>
 8006262:	bf00      	nop
 8006264:	2000077c 	.word	0x2000077c
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	e00c      	b.n	8006292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4a12      	ldr	r2, [pc, #72]	; (80062cc <prvInitialiseTaskLists+0x60>)
 8006284:	4413      	add	r3, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fcf0 	bl	8004c6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3301      	adds	r3, #1
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b37      	cmp	r3, #55	; 0x37
 8006296:	d9ef      	bls.n	8006278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006298:	480d      	ldr	r0, [pc, #52]	; (80062d0 <prvInitialiseTaskLists+0x64>)
 800629a:	f7fe fce7 	bl	8004c6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800629e:	480d      	ldr	r0, [pc, #52]	; (80062d4 <prvInitialiseTaskLists+0x68>)
 80062a0:	f7fe fce4 	bl	8004c6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062a4:	480c      	ldr	r0, [pc, #48]	; (80062d8 <prvInitialiseTaskLists+0x6c>)
 80062a6:	f7fe fce1 	bl	8004c6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062aa:	480c      	ldr	r0, [pc, #48]	; (80062dc <prvInitialiseTaskLists+0x70>)
 80062ac:	f7fe fcde 	bl	8004c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062b0:	480b      	ldr	r0, [pc, #44]	; (80062e0 <prvInitialiseTaskLists+0x74>)
 80062b2:	f7fe fcdb 	bl	8004c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <prvInitialiseTaskLists+0x78>)
 80062b8:	4a05      	ldr	r2, [pc, #20]	; (80062d0 <prvInitialiseTaskLists+0x64>)
 80062ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <prvInitialiseTaskLists+0x7c>)
 80062be:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <prvInitialiseTaskLists+0x68>)
 80062c0:	601a      	str	r2, [r3, #0]
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2000077c 	.word	0x2000077c
 80062d0:	20000bdc 	.word	0x20000bdc
 80062d4:	20000bf0 	.word	0x20000bf0
 80062d8:	20000c0c 	.word	0x20000c0c
 80062dc:	20000c20 	.word	0x20000c20
 80062e0:	20000c38 	.word	0x20000c38
 80062e4:	20000c04 	.word	0x20000c04
 80062e8:	20000c08 	.word	0x20000c08

080062ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062f2:	e019      	b.n	8006328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062f4:	f000 fdd6 	bl	8006ea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f8:	4b10      	ldr	r3, [pc, #64]	; (800633c <prvCheckTasksWaitingTermination+0x50>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe fd3b 	bl	8004d80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800630a:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <prvCheckTasksWaitingTermination+0x54>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3b01      	subs	r3, #1
 8006310:	4a0b      	ldr	r2, [pc, #44]	; (8006340 <prvCheckTasksWaitingTermination+0x54>)
 8006312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <prvCheckTasksWaitingTermination+0x58>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3b01      	subs	r3, #1
 800631a:	4a0a      	ldr	r2, [pc, #40]	; (8006344 <prvCheckTasksWaitingTermination+0x58>)
 800631c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800631e:	f000 fdf1 	bl	8006f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f810 	bl	8006348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <prvCheckTasksWaitingTermination+0x58>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e1      	bne.n	80062f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000c20 	.word	0x20000c20
 8006340:	20000c4c 	.word	0x20000c4c
 8006344:	20000c34 	.word	0x20000c34

08006348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006356:	2b00      	cmp	r3, #0
 8006358:	d108      	bne.n	800636c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	4618      	mov	r0, r3
 8006360:	f000 ff8e 	bl	8007280 <vPortFree>
				vPortFree( pxTCB );
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 ff8b 	bl	8007280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800636a:	e018      	b.n	800639e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006372:	2b01      	cmp	r3, #1
 8006374:	d103      	bne.n	800637e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 ff82 	bl	8007280 <vPortFree>
	}
 800637c:	e00f      	b.n	800639e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006384:	2b02      	cmp	r3, #2
 8006386:	d00a      	beq.n	800639e <prvDeleteTCB+0x56>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	60fb      	str	r3, [r7, #12]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <prvDeleteTCB+0x54>
	}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ae:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <prvResetNextTaskUnblockTime+0x38>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <prvResetNextTaskUnblockTime+0x3c>)
 80063ba:	f04f 32ff 	mov.w	r2, #4294967295
 80063be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063c0:	e008      	b.n	80063d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <prvResetNextTaskUnblockTime+0x38>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <prvResetNextTaskUnblockTime+0x3c>)
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20000c04 	.word	0x20000c04
 80063e4:	20000c6c 	.word	0x20000c6c

080063e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <xTaskGetSchedulerState+0x34>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063f6:	2301      	movs	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	e008      	b.n	800640e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <xTaskGetSchedulerState+0x38>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006404:	2302      	movs	r3, #2
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	e001      	b.n	800640e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800640a:	2300      	movs	r3, #0
 800640c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800640e:	687b      	ldr	r3, [r7, #4]
	}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000c58 	.word	0x20000c58
 8006420:	20000c74 	.word	0x20000c74

08006424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d056      	beq.n	80064e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800643a:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <xTaskPriorityDisinherit+0xd0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	429a      	cmp	r2, r3
 8006442:	d00a      	beq.n	800645a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	60fb      	str	r3, [r7, #12]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	60bb      	str	r3, [r7, #8]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	1e5a      	subs	r2, r3, #1
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	429a      	cmp	r2, r3
 800648c:	d02c      	beq.n	80064e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006492:	2b00      	cmp	r3, #0
 8006494:	d128      	bne.n	80064e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	3304      	adds	r3, #4
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fc70 	bl	8004d80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <xTaskPriorityDisinherit+0xd4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <xTaskPriorityDisinherit+0xa4>
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <xTaskPriorityDisinherit+0xd4>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4a09      	ldr	r2, [pc, #36]	; (80064fc <xTaskPriorityDisinherit+0xd8>)
 80064d6:	441a      	add	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7fe fbf1 	bl	8004cc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064e4:	2301      	movs	r3, #1
 80064e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064e8:	697b      	ldr	r3, [r7, #20]
	}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000778 	.word	0x20000778
 80064f8:	20000c54 	.word	0x20000c54
 80064fc:	2000077c 	.word	0x2000077c

08006500 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800650a:	4b21      	ldr	r3, [pc, #132]	; (8006590 <prvAddCurrentTaskToDelayedList+0x90>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006510:	4b20      	ldr	r3, [pc, #128]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3304      	adds	r3, #4
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fc32 	bl	8004d80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006522:	d10a      	bne.n	800653a <prvAddCurrentTaskToDelayedList+0x3a>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800652a:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4819      	ldr	r0, [pc, #100]	; (8006598 <prvAddCurrentTaskToDelayedList+0x98>)
 8006534:	f7fe fbc7 	bl	8004cc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006538:	e026      	b.n	8006588 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4413      	add	r3, r2
 8006540:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006542:	4b14      	ldr	r3, [pc, #80]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	429a      	cmp	r2, r3
 8006550:	d209      	bcs.n	8006566 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f7fe fbd5 	bl	8004d0e <vListInsert>
}
 8006564:	e010      	b.n	8006588 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3304      	adds	r3, #4
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f7fe fbcb 	bl	8004d0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	d202      	bcs.n	8006588 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006582:	4a08      	ldr	r2, [pc, #32]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6013      	str	r3, [r2, #0]
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000c50 	.word	0x20000c50
 8006594:	20000778 	.word	0x20000778
 8006598:	20000c38 	.word	0x20000c38
 800659c:	20000c08 	.word	0x20000c08
 80065a0:	20000c04 	.word	0x20000c04
 80065a4:	20000c6c 	.word	0x20000c6c

080065a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065b2:	f000 fb07 	bl	8006bc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065b6:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <xTimerCreateTimerTask+0x80>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d021      	beq.n	8006602 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065c6:	1d3a      	adds	r2, r7, #4
 80065c8:	f107 0108 	add.w	r1, r7, #8
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fb31 	bl	8004c38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	9202      	str	r2, [sp, #8]
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	2302      	movs	r3, #2
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	460a      	mov	r2, r1
 80065e8:	4910      	ldr	r1, [pc, #64]	; (800662c <xTimerCreateTimerTask+0x84>)
 80065ea:	4811      	ldr	r0, [pc, #68]	; (8006630 <xTimerCreateTimerTask+0x88>)
 80065ec:	f7ff f8de 	bl	80057ac <xTaskCreateStatic>
 80065f0:	4603      	mov	r3, r0
 80065f2:	4a10      	ldr	r2, [pc, #64]	; (8006634 <xTimerCreateTimerTask+0x8c>)
 80065f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <xTimerCreateTimerTask+0x8c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065fe:	2301      	movs	r3, #1
 8006600:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	613b      	str	r3, [r7, #16]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800661e:	697b      	ldr	r3, [r7, #20]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000ca8 	.word	0x20000ca8
 800662c:	08008250 	.word	0x08008250
 8006630:	0800676d 	.word	0x0800676d
 8006634:	20000cac 	.word	0x20000cac

08006638 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006646:	2300      	movs	r3, #0
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	623b      	str	r3, [r7, #32]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <xTimerGenericCommand+0x98>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02a      	beq.n	80066c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b05      	cmp	r3, #5
 800667e:	dc18      	bgt.n	80066b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006680:	f7ff feb2 	bl	80063e8 <xTaskGetSchedulerState>
 8006684:	4603      	mov	r3, r0
 8006686:	2b02      	cmp	r3, #2
 8006688:	d109      	bne.n	800669e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800668a:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <xTimerGenericCommand+0x98>)
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f107 0110 	add.w	r1, r7, #16
 8006692:	2300      	movs	r3, #0
 8006694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006696:	f7fe fca1 	bl	8004fdc <xQueueGenericSend>
 800669a:	6278      	str	r0, [r7, #36]	; 0x24
 800669c:	e012      	b.n	80066c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <xTimerGenericCommand+0x98>)
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	f107 0110 	add.w	r1, r7, #16
 80066a6:	2300      	movs	r3, #0
 80066a8:	2200      	movs	r2, #0
 80066aa:	f7fe fc97 	bl	8004fdc <xQueueGenericSend>
 80066ae:	6278      	str	r0, [r7, #36]	; 0x24
 80066b0:	e008      	b.n	80066c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <xTimerGenericCommand+0x98>)
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	f107 0110 	add.w	r1, r7, #16
 80066ba:	2300      	movs	r3, #0
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	f7fe fd8b 	bl	80051d8 <xQueueGenericSendFromISR>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3728      	adds	r7, #40	; 0x28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000ca8 	.word	0x20000ca8

080066d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066de:	4b22      	ldr	r3, [pc, #136]	; (8006768 <prvProcessExpiredTimer+0x94>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe fb47 	bl	8004d80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d022      	beq.n	8006746 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	699a      	ldr	r2, [r3, #24]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	18d1      	adds	r1, r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f000 f8d1 	bl	80068b4 <prvInsertTimerInActiveList>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01f      	beq.n	8006758 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006718:	2300      	movs	r3, #0
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	2300      	movs	r3, #0
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	2100      	movs	r1, #0
 8006722:	6978      	ldr	r0, [r7, #20]
 8006724:	f7ff ff88 	bl	8006638 <xTimerGenericCommand>
 8006728:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d113      	bne.n	8006758 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	60fb      	str	r3, [r7, #12]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	b2da      	uxtb	r2, r3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	6978      	ldr	r0, [r7, #20]
 800675e:	4798      	blx	r3
}
 8006760:	bf00      	nop
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000ca0 	.word	0x20000ca0

0800676c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006774:	f107 0308 	add.w	r3, r7, #8
 8006778:	4618      	mov	r0, r3
 800677a:	f000 f857 	bl	800682c <prvGetNextExpireTime>
 800677e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4619      	mov	r1, r3
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f803 	bl	8006790 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800678a:	f000 f8d5 	bl	8006938 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800678e:	e7f1      	b.n	8006774 <prvTimerTask+0x8>

08006790 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800679a:	f7ff fa43 	bl	8005c24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800679e:	f107 0308 	add.w	r3, r7, #8
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f866 	bl	8006874 <prvSampleTimeNow>
 80067a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d130      	bne.n	8006812 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <prvProcessTimerOrBlockTask+0x3c>
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d806      	bhi.n	80067cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067be:	f7ff fa3f 	bl	8005c40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ff85 	bl	80066d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067ca:	e024      	b.n	8006816 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067d2:	4b13      	ldr	r3, [pc, #76]	; (8006820 <prvProcessTimerOrBlockTask+0x90>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <prvProcessTimerOrBlockTask+0x50>
 80067dc:	2301      	movs	r3, #1
 80067de:	e000      	b.n	80067e2 <prvProcessTimerOrBlockTask+0x52>
 80067e0:	2300      	movs	r3, #0
 80067e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067e4:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <prvProcessTimerOrBlockTask+0x94>)
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	4619      	mov	r1, r3
 80067f2:	f7fe ffa7 	bl	8005744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067f6:	f7ff fa23 	bl	8005c40 <xTaskResumeAll>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006800:	4b09      	ldr	r3, [pc, #36]	; (8006828 <prvProcessTimerOrBlockTask+0x98>)
 8006802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	f3bf 8f6f 	isb	sy
}
 8006810:	e001      	b.n	8006816 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006812:	f7ff fa15 	bl	8005c40 <xTaskResumeAll>
}
 8006816:	bf00      	nop
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000ca4 	.word	0x20000ca4
 8006824:	20000ca8 	.word	0x20000ca8
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <prvGetNextExpireTime+0x44>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <prvGetNextExpireTime+0x16>
 800683e:	2201      	movs	r2, #1
 8006840:	e000      	b.n	8006844 <prvGetNextExpireTime+0x18>
 8006842:	2200      	movs	r2, #0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <prvGetNextExpireTime+0x44>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e001      	b.n	8006860 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20000ca0 	.word	0x20000ca0

08006874 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800687c:	f7ff fa7e 	bl	8005d7c <xTaskGetTickCount>
 8006880:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006882:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <prvSampleTimeNow+0x3c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	429a      	cmp	r2, r3
 800688a:	d205      	bcs.n	8006898 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800688c:	f000 f936 	bl	8006afc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	e002      	b.n	800689e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800689e:	4a04      	ldr	r2, [pc, #16]	; (80068b0 <prvSampleTimeNow+0x3c>)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068a4:	68fb      	ldr	r3, [r7, #12]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000cb0 	.word	0x20000cb0

080068b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d812      	bhi.n	8006900 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d302      	bcc.n	80068ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068e8:	2301      	movs	r3, #1
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e01b      	b.n	8006926 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068ee:	4b10      	ldr	r3, [pc, #64]	; (8006930 <prvInsertTimerInActiveList+0x7c>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7fe fa08 	bl	8004d0e <vListInsert>
 80068fe:	e012      	b.n	8006926 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d206      	bcs.n	8006916 <prvInsertTimerInActiveList+0x62>
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d302      	bcc.n	8006916 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	e007      	b.n	8006926 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <prvInsertTimerInActiveList+0x80>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3304      	adds	r3, #4
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f7fe f9f4 	bl	8004d0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006926:	697b      	ldr	r3, [r7, #20]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20000ca4 	.word	0x20000ca4
 8006934:	20000ca0 	.word	0x20000ca0

08006938 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08e      	sub	sp, #56	; 0x38
 800693c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800693e:	e0ca      	b.n	8006ad6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	da18      	bge.n	8006978 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	3304      	adds	r3, #4
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	61fb      	str	r3, [r7, #28]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800696e:	6850      	ldr	r0, [r2, #4]
 8006970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006972:	6892      	ldr	r2, [r2, #8]
 8006974:	4611      	mov	r1, r2
 8006976:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f2c0 80aa 	blt.w	8006ad4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	3304      	adds	r3, #4
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe f9f5 	bl	8004d80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006996:	463b      	mov	r3, r7
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff ff6b 	bl	8006874 <prvSampleTimeNow>
 800699e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b09      	cmp	r3, #9
 80069a4:	f200 8097 	bhi.w	8006ad6 <prvProcessReceivedCommands+0x19e>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <prvProcessReceivedCommands+0x78>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069d9 	.word	0x080069d9
 80069b4:	080069d9 	.word	0x080069d9
 80069b8:	080069d9 	.word	0x080069d9
 80069bc:	08006a4d 	.word	0x08006a4d
 80069c0:	08006a61 	.word	0x08006a61
 80069c4:	08006aab 	.word	0x08006aab
 80069c8:	080069d9 	.word	0x080069d9
 80069cc:	080069d9 	.word	0x080069d9
 80069d0:	08006a4d 	.word	0x08006a4d
 80069d4:	08006a61 	.word	0x08006a61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	18d1      	adds	r1, r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f8:	f7ff ff5c 	bl	80068b4 <prvInsertTimerInActiveList>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d069      	beq.n	8006ad6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d05e      	beq.n	8006ad6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	441a      	add	r2, r3
 8006a20:	2300      	movs	r3, #0
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	2100      	movs	r1, #0
 8006a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a2a:	f7ff fe05 	bl	8006638 <xTimerGenericCommand>
 8006a2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d14f      	bne.n	8006ad6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	61bb      	str	r3, [r7, #24]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a5e:	e03a      	b.n	8006ad6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	617b      	str	r3, [r7, #20]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	18d1      	adds	r1, r2, r3
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa4:	f7ff ff06 	bl	80068b4 <prvInsertTimerInActiveList>
					break;
 8006aa8:	e015      	b.n	8006ad6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aba:	f000 fbe1 	bl	8007280 <vPortFree>
 8006abe:	e00a      	b.n	8006ad6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ad2:	e000      	b.n	8006ad6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006ad4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ad6:	4b08      	ldr	r3, [pc, #32]	; (8006af8 <prvProcessReceivedCommands+0x1c0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	1d39      	adds	r1, r7, #4
 8006adc:	2200      	movs	r2, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fc16 	bl	8005310 <xQueueReceive>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f47f af2a 	bne.w	8006940 <prvProcessReceivedCommands+0x8>
	}
}
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	3730      	adds	r7, #48	; 0x30
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000ca8 	.word	0x20000ca8

08006afc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b02:	e048      	b.n	8006b96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b04:	4b2d      	ldr	r3, [pc, #180]	; (8006bbc <prvSwitchTimerLists+0xc0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b0e:	4b2b      	ldr	r3, [pc, #172]	; (8006bbc <prvSwitchTimerLists+0xc0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe f92f 	bl	8004d80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02e      	beq.n	8006b96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4413      	add	r3, r2
 8006b40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d90e      	bls.n	8006b68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b56:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <prvSwitchTimerLists+0xc0>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f7fe f8d4 	bl	8004d0e <vListInsert>
 8006b66:	e016      	b.n	8006b96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	2100      	movs	r1, #0
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff fd60 	bl	8006638 <xTimerGenericCommand>
 8006b78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	603b      	str	r3, [r7, #0]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <prvSwitchTimerLists+0xc0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1b1      	bne.n	8006b04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ba0:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <prvSwitchTimerLists+0xc0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <prvSwitchTimerLists+0xc4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <prvSwitchTimerLists+0xc0>)
 8006bac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bae:	4a04      	ldr	r2, [pc, #16]	; (8006bc0 <prvSwitchTimerLists+0xc4>)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	6013      	str	r3, [r2, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000ca0 	.word	0x20000ca0
 8006bc0:	20000ca4 	.word	0x20000ca4

08006bc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bca:	f000 f96b 	bl	8006ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bce:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <prvCheckForValidListAndQueue+0x60>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d120      	bne.n	8006c18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bd6:	4814      	ldr	r0, [pc, #80]	; (8006c28 <prvCheckForValidListAndQueue+0x64>)
 8006bd8:	f7fe f848 	bl	8004c6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bdc:	4813      	ldr	r0, [pc, #76]	; (8006c2c <prvCheckForValidListAndQueue+0x68>)
 8006bde:	f7fe f845 	bl	8004c6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006be2:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <prvCheckForValidListAndQueue+0x6c>)
 8006be4:	4a10      	ldr	r2, [pc, #64]	; (8006c28 <prvCheckForValidListAndQueue+0x64>)
 8006be6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006be8:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <prvCheckForValidListAndQueue+0x70>)
 8006bea:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <prvCheckForValidListAndQueue+0x68>)
 8006bec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <prvCheckForValidListAndQueue+0x74>)
 8006bf4:	4a11      	ldr	r2, [pc, #68]	; (8006c3c <prvCheckForValidListAndQueue+0x78>)
 8006bf6:	2110      	movs	r1, #16
 8006bf8:	200a      	movs	r0, #10
 8006bfa:	f7fe f953 	bl	8004ea4 <xQueueGenericCreateStatic>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4a08      	ldr	r2, [pc, #32]	; (8006c24 <prvCheckForValidListAndQueue+0x60>)
 8006c02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c04:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <prvCheckForValidListAndQueue+0x60>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <prvCheckForValidListAndQueue+0x60>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	490b      	ldr	r1, [pc, #44]	; (8006c40 <prvCheckForValidListAndQueue+0x7c>)
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fd6c 	bl	80056f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c18:	f000 f974 	bl	8006f04 <vPortExitCritical>
}
 8006c1c:	bf00      	nop
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000ca8 	.word	0x20000ca8
 8006c28:	20000c78 	.word	0x20000c78
 8006c2c:	20000c8c 	.word	0x20000c8c
 8006c30:	20000ca0 	.word	0x20000ca0
 8006c34:	20000ca4 	.word	0x20000ca4
 8006c38:	20000d54 	.word	0x20000d54
 8006c3c:	20000cb4 	.word	0x20000cb4
 8006c40:	08008258 	.word	0x08008258

08006c44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3b04      	subs	r3, #4
 8006c54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3b04      	subs	r3, #4
 8006c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f023 0201 	bic.w	r2, r3, #1
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3b04      	subs	r3, #4
 8006c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c74:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <pxPortInitialiseStack+0x64>)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3b14      	subs	r3, #20
 8006c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3b04      	subs	r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f06f 0202 	mvn.w	r2, #2
 8006c92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3b20      	subs	r3, #32
 8006c98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	08006cad 	.word	0x08006cad

08006cac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <prvTaskExitError+0x54>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d00a      	beq.n	8006cd6 <prvTaskExitError+0x2a>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60fb      	str	r3, [r7, #12]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <prvTaskExitError+0x28>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	60bb      	str	r3, [r7, #8]
}
 8006ce8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cea:	bf00      	nop
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0fc      	beq.n	8006cec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	2000000c 	.word	0x2000000c
	...

08006d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <pxCurrentTCBConst2>)
 8006d12:	6819      	ldr	r1, [r3, #0]
 8006d14:	6808      	ldr	r0, [r1, #0]
 8006d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1a:	f380 8809 	msr	PSP, r0
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f380 8811 	msr	BASEPRI, r0
 8006d2a:	4770      	bx	lr
 8006d2c:	f3af 8000 	nop.w

08006d30 <pxCurrentTCBConst2>:
 8006d30:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop

08006d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d38:	4808      	ldr	r0, [pc, #32]	; (8006d5c <prvPortStartFirstTask+0x24>)
 8006d3a:	6800      	ldr	r0, [r0, #0]
 8006d3c:	6800      	ldr	r0, [r0, #0]
 8006d3e:	f380 8808 	msr	MSP, r0
 8006d42:	f04f 0000 	mov.w	r0, #0
 8006d46:	f380 8814 	msr	CONTROL, r0
 8006d4a:	b662      	cpsie	i
 8006d4c:	b661      	cpsie	f
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	df00      	svc	0
 8006d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d5a:	bf00      	nop
 8006d5c:	e000ed08 	.word	0xe000ed08

08006d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d66:	4b46      	ldr	r3, [pc, #280]	; (8006e80 <xPortStartScheduler+0x120>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a46      	ldr	r2, [pc, #280]	; (8006e84 <xPortStartScheduler+0x124>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10a      	bne.n	8006d86 <xPortStartScheduler+0x26>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	613b      	str	r3, [r7, #16]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d86:	4b3e      	ldr	r3, [pc, #248]	; (8006e80 <xPortStartScheduler+0x120>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3f      	ldr	r2, [pc, #252]	; (8006e88 <xPortStartScheduler+0x128>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d10a      	bne.n	8006da6 <xPortStartScheduler+0x46>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	60fb      	str	r3, [r7, #12]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006da6:	4b39      	ldr	r3, [pc, #228]	; (8006e8c <xPortStartScheduler+0x12c>)
 8006da8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	22ff      	movs	r2, #255	; 0xff
 8006db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	4b31      	ldr	r3, [pc, #196]	; (8006e90 <xPortStartScheduler+0x130>)
 8006dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dce:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <xPortStartScheduler+0x134>)
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dd4:	e009      	b.n	8006dea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006dd6:	4b2f      	ldr	r3, [pc, #188]	; (8006e94 <xPortStartScheduler+0x134>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4a2d      	ldr	r2, [pc, #180]	; (8006e94 <xPortStartScheduler+0x134>)
 8006dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df2:	2b80      	cmp	r3, #128	; 0x80
 8006df4:	d0ef      	beq.n	8006dd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006df6:	4b27      	ldr	r3, [pc, #156]	; (8006e94 <xPortStartScheduler+0x134>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f1c3 0307 	rsb	r3, r3, #7
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d00a      	beq.n	8006e18 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60bb      	str	r3, [r7, #8]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e18:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <xPortStartScheduler+0x134>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <xPortStartScheduler+0x134>)
 8006e20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <xPortStartScheduler+0x134>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e2a:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <xPortStartScheduler+0x134>)
 8006e2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e36:	4b18      	ldr	r3, [pc, #96]	; (8006e98 <xPortStartScheduler+0x138>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <xPortStartScheduler+0x138>)
 8006e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e42:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <xPortStartScheduler+0x138>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <xPortStartScheduler+0x138>)
 8006e48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e4e:	f000 f8dd 	bl	800700c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <xPortStartScheduler+0x13c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e58:	f000 f8fc 	bl	8007054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e5c:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <xPortStartScheduler+0x140>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a0f      	ldr	r2, [pc, #60]	; (8006ea0 <xPortStartScheduler+0x140>)
 8006e62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e68:	f7ff ff66 	bl	8006d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e6c:	f7ff f850 	bl	8005f10 <vTaskSwitchContext>
	prvTaskExitError();
 8006e70:	f7ff ff1c 	bl	8006cac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	e000ed00 	.word	0xe000ed00
 8006e84:	410fc271 	.word	0x410fc271
 8006e88:	410fc270 	.word	0x410fc270
 8006e8c:	e000e400 	.word	0xe000e400
 8006e90:	20000da4 	.word	0x20000da4
 8006e94:	20000da8 	.word	0x20000da8
 8006e98:	e000ed20 	.word	0xe000ed20
 8006e9c:	2000000c 	.word	0x2000000c
 8006ea0:	e000ef34 	.word	0xe000ef34

08006ea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	607b      	str	r3, [r7, #4]
}
 8006ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ebe:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <vPortEnterCritical+0x58>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	4a0d      	ldr	r2, [pc, #52]	; (8006efc <vPortEnterCritical+0x58>)
 8006ec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ec8:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <vPortEnterCritical+0x58>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d10f      	bne.n	8006ef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <vPortEnterCritical+0x5c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <vPortEnterCritical+0x4a>
	}
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	2000000c 	.word	0x2000000c
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <vPortExitCritical+0x50>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <vPortExitCritical+0x24>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	607b      	str	r3, [r7, #4]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <vPortExitCritical+0x50>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	4a09      	ldr	r2, [pc, #36]	; (8006f54 <vPortExitCritical+0x50>)
 8006f30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f32:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <vPortExitCritical+0x50>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <vPortExitCritical+0x42>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	f383 8811 	msr	BASEPRI, r3
}
 8006f44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	2000000c 	.word	0x2000000c
	...

08006f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f60:	f3ef 8009 	mrs	r0, PSP
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <pxCurrentTCBConst>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	f01e 0f10 	tst.w	lr, #16
 8006f70:	bf08      	it	eq
 8006f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	6010      	str	r0, [r2, #0]
 8006f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f84:	f380 8811 	msr	BASEPRI, r0
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f7fe ffbe 	bl	8005f10 <vTaskSwitchContext>
 8006f94:	f04f 0000 	mov.w	r0, #0
 8006f98:	f380 8811 	msr	BASEPRI, r0
 8006f9c:	bc09      	pop	{r0, r3}
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	6808      	ldr	r0, [r1, #0]
 8006fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa6:	f01e 0f10 	tst.w	lr, #16
 8006faa:	bf08      	it	eq
 8006fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fb0:	f380 8809 	msr	PSP, r0
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	f3af 8000 	nop.w

08006fc0 <pxCurrentTCBConst>:
 8006fc0:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	607b      	str	r3, [r7, #4]
}
 8006fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fe2:	f7fe fedb 	bl	8005d9c <xTaskIncrementTick>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <xPortSysTickHandler+0x40>)
 8006fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <vPortSetupTimerInterrupt+0x34>)
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <vPortSetupTimerInterrupt+0x38>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <vPortSetupTimerInterrupt+0x3c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <vPortSetupTimerInterrupt+0x40>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	099b      	lsrs	r3, r3, #6
 8007028:	4a09      	ldr	r2, [pc, #36]	; (8007050 <vPortSetupTimerInterrupt+0x44>)
 800702a:	3b01      	subs	r3, #1
 800702c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800702e:	4b04      	ldr	r3, [pc, #16]	; (8007040 <vPortSetupTimerInterrupt+0x34>)
 8007030:	2207      	movs	r2, #7
 8007032:	601a      	str	r2, [r3, #0]
}
 8007034:	bf00      	nop
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	e000e010 	.word	0xe000e010
 8007044:	e000e018 	.word	0xe000e018
 8007048:	20000000 	.word	0x20000000
 800704c:	10624dd3 	.word	0x10624dd3
 8007050:	e000e014 	.word	0xe000e014

08007054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007064 <vPortEnableVFP+0x10>
 8007058:	6801      	ldr	r1, [r0, #0]
 800705a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800705e:	6001      	str	r1, [r0, #0]
 8007060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007062:	bf00      	nop
 8007064:	e000ed88 	.word	0xe000ed88

08007068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800706e:	f3ef 8305 	mrs	r3, IPSR
 8007072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d914      	bls.n	80070a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800707a:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <vPortValidateInterruptPriority+0x70>)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007084:	4b15      	ldr	r3, [pc, #84]	; (80070dc <vPortValidateInterruptPriority+0x74>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	7afa      	ldrb	r2, [r7, #11]
 800708a:	429a      	cmp	r2, r3
 800708c:	d20a      	bcs.n	80070a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	607b      	str	r3, [r7, #4]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <vPortValidateInterruptPriority+0x78>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <vPortValidateInterruptPriority+0x7c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d90a      	bls.n	80070ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	603b      	str	r3, [r7, #0]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <vPortValidateInterruptPriority+0x60>
	}
 80070ca:	bf00      	nop
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	e000e3f0 	.word	0xe000e3f0
 80070dc:	20000da4 	.word	0x20000da4
 80070e0:	e000ed0c 	.word	0xe000ed0c
 80070e4:	20000da8 	.word	0x20000da8

080070e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	; 0x28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070f4:	f7fe fd96 	bl	8005c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070f8:	4b5b      	ldr	r3, [pc, #364]	; (8007268 <pvPortMalloc+0x180>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007100:	f000 f920 	bl	8007344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007104:	4b59      	ldr	r3, [pc, #356]	; (800726c <pvPortMalloc+0x184>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 8093 	bne.w	8007238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01d      	beq.n	8007154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007118:	2208      	movs	r2, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d014      	beq.n	8007154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f023 0307 	bic.w	r3, r3, #7
 8007130:	3308      	adds	r3, #8
 8007132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <pvPortMalloc+0x6c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	617b      	str	r3, [r7, #20]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d06e      	beq.n	8007238 <pvPortMalloc+0x150>
 800715a:	4b45      	ldr	r3, [pc, #276]	; (8007270 <pvPortMalloc+0x188>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d869      	bhi.n	8007238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007164:	4b43      	ldr	r3, [pc, #268]	; (8007274 <pvPortMalloc+0x18c>)
 8007166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007168:	4b42      	ldr	r3, [pc, #264]	; (8007274 <pvPortMalloc+0x18c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800716e:	e004      	b.n	800717a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d903      	bls.n	800718c <pvPortMalloc+0xa4>
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f1      	bne.n	8007170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <pvPortMalloc+0x180>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007192:	429a      	cmp	r2, r3
 8007194:	d050      	beq.n	8007238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2208      	movs	r2, #8
 800719c:	4413      	add	r3, r2
 800719e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	2308      	movs	r3, #8
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d91f      	bls.n	80071f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4413      	add	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <pvPortMalloc+0xf8>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	613b      	str	r3, [r7, #16]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	1ad2      	subs	r2, r2, r3
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071f2:	69b8      	ldr	r0, [r7, #24]
 80071f4:	f000 f908 	bl	8007408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071f8:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <pvPortMalloc+0x188>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	4a1b      	ldr	r2, [pc, #108]	; (8007270 <pvPortMalloc+0x188>)
 8007204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007206:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <pvPortMalloc+0x188>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <pvPortMalloc+0x190>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d203      	bcs.n	800721a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007212:	4b17      	ldr	r3, [pc, #92]	; (8007270 <pvPortMalloc+0x188>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a18      	ldr	r2, [pc, #96]	; (8007278 <pvPortMalloc+0x190>)
 8007218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <pvPortMalloc+0x184>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	431a      	orrs	r2, r3
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <pvPortMalloc+0x194>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3301      	adds	r3, #1
 8007234:	4a11      	ldr	r2, [pc, #68]	; (800727c <pvPortMalloc+0x194>)
 8007236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007238:	f7fe fd02 	bl	8005c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <pvPortMalloc+0x174>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	60fb      	str	r3, [r7, #12]
}
 8007258:	bf00      	nop
 800725a:	e7fe      	b.n	800725a <pvPortMalloc+0x172>
	return pvReturn;
 800725c:	69fb      	ldr	r3, [r7, #28]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3728      	adds	r7, #40	; 0x28
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	200049b4 	.word	0x200049b4
 800726c:	200049c8 	.word	0x200049c8
 8007270:	200049b8 	.word	0x200049b8
 8007274:	200049ac 	.word	0x200049ac
 8007278:	200049bc 	.word	0x200049bc
 800727c:	200049c0 	.word	0x200049c0

08007280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d04d      	beq.n	800732e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007292:	2308      	movs	r3, #8
 8007294:	425b      	negs	r3, r3
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	4b24      	ldr	r3, [pc, #144]	; (8007338 <vPortFree+0xb8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <vPortFree+0x44>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	60fb      	str	r3, [r7, #12]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <vPortFree+0x62>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	60bb      	str	r3, [r7, #8]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	4b14      	ldr	r3, [pc, #80]	; (8007338 <vPortFree+0xb8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01e      	beq.n	800732e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d11a      	bne.n	800732e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <vPortFree+0xb8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	43db      	mvns	r3, r3
 8007302:	401a      	ands	r2, r3
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007308:	f7fe fc8c 	bl	8005c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <vPortFree+0xbc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4413      	add	r3, r2
 8007316:	4a09      	ldr	r2, [pc, #36]	; (800733c <vPortFree+0xbc>)
 8007318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800731a:	6938      	ldr	r0, [r7, #16]
 800731c:	f000 f874 	bl	8007408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <vPortFree+0xc0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	4a06      	ldr	r2, [pc, #24]	; (8007340 <vPortFree+0xc0>)
 8007328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800732a:	f7fe fc89 	bl	8005c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800732e:	bf00      	nop
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	200049c8 	.word	0x200049c8
 800733c:	200049b8 	.word	0x200049b8
 8007340:	200049c4 	.word	0x200049c4

08007344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800734a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800734e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007350:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <prvHeapInit+0xac>)
 8007352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3307      	adds	r3, #7
 8007362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0307 	bic.w	r3, r3, #7
 800736a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <prvHeapInit+0xac>)
 8007374:	4413      	add	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800737c:	4a1d      	ldr	r2, [pc, #116]	; (80073f4 <prvHeapInit+0xb0>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007382:	4b1c      	ldr	r3, [pc, #112]	; (80073f4 <prvHeapInit+0xb0>)
 8007384:	2200      	movs	r2, #0
 8007386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	4413      	add	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007390:	2208      	movs	r2, #8
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <prvHeapInit+0xb4>)
 80073a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073a6:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <prvHeapInit+0xb4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073ae:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <prvHeapInit+0xb4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <prvHeapInit+0xb4>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <prvHeapInit+0xb8>)
 80073d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <prvHeapInit+0xbc>)
 80073da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073dc:	4b09      	ldr	r3, [pc, #36]	; (8007404 <prvHeapInit+0xc0>)
 80073de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073e2:	601a      	str	r2, [r3, #0]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	20000dac 	.word	0x20000dac
 80073f4:	200049ac 	.word	0x200049ac
 80073f8:	200049b4 	.word	0x200049b4
 80073fc:	200049bc 	.word	0x200049bc
 8007400:	200049b8 	.word	0x200049b8
 8007404:	200049c8 	.word	0x200049c8

08007408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007410:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <prvInsertBlockIntoFreeList+0xac>)
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e002      	b.n	800741c <prvInsertBlockIntoFreeList+0x14>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	d8f7      	bhi.n	8007416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4413      	add	r3, r2
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d108      	bne.n	800744a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	441a      	add	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	441a      	add	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d118      	bne.n	8007490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d00d      	beq.n	8007486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e008      	b.n	8007498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e003      	b.n	8007498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	429a      	cmp	r2, r3
 800749e:	d002      	beq.n	80074a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	200049ac 	.word	0x200049ac
 80074b8:	200049b4 	.word	0x200049b4

080074bc <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80074c2:	2300      	movs	r3, #0
 80074c4:	71fb      	strb	r3, [r7, #7]
 80074c6:	e026      	b.n	8007516 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	3b50      	subs	r3, #80	; 0x50
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2100      	movs	r1, #0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 f82b 	bl	800752c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80074d6:	2100      	movs	r1, #0
 80074d8:	2000      	movs	r0, #0
 80074da:	f000 f827 	bl	800752c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80074de:	2100      	movs	r1, #0
 80074e0:	2010      	movs	r0, #16
 80074e2:	f000 f823 	bl	800752c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80074e6:	2300      	movs	r3, #0
 80074e8:	71bb      	strb	r3, [r7, #6]
 80074ea:	e00d      	b.n	8007508 <OLED_Refresh_Gram+0x4c>
 80074ec:	79ba      	ldrb	r2, [r7, #6]
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	490d      	ldr	r1, [pc, #52]	; (8007528 <OLED_Refresh_Gram+0x6c>)
 80074f2:	00d2      	lsls	r2, r2, #3
 80074f4:	440a      	add	r2, r1
 80074f6:	4413      	add	r3, r2
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2101      	movs	r1, #1
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f815 	bl	800752c <OLED_WR_Byte>
 8007502:	79bb      	ldrb	r3, [r7, #6]
 8007504:	3301      	adds	r3, #1
 8007506:	71bb      	strb	r3, [r7, #6]
 8007508:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800750c:	2b00      	cmp	r3, #0
 800750e:	daed      	bge.n	80074ec <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	3301      	adds	r3, #1
 8007514:	71fb      	strb	r3, [r7, #7]
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	2b07      	cmp	r3, #7
 800751a:	d9d5      	bls.n	80074c8 <OLED_Refresh_Gram+0xc>
	}   
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20004bac 	.word	0x20004bac

0800752c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	460a      	mov	r2, r1
 8007536:	71fb      	strb	r3, [r7, #7]
 8007538:	4613      	mov	r3, r2
 800753a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800753c:	79bb      	ldrb	r3, [r7, #6]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d006      	beq.n	8007550 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8007542:	2201      	movs	r2, #1
 8007544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007548:	481c      	ldr	r0, [pc, #112]	; (80075bc <OLED_WR_Byte+0x90>)
 800754a:	f7fb f911 	bl	8002770 <HAL_GPIO_WritePin>
 800754e:	e005      	b.n	800755c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8007550:	2200      	movs	r2, #0
 8007552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007556:	4819      	ldr	r0, [pc, #100]	; (80075bc <OLED_WR_Byte+0x90>)
 8007558:	f7fb f90a 	bl	8002770 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	e01e      	b.n	80075a0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8007562:	2200      	movs	r2, #0
 8007564:	2120      	movs	r1, #32
 8007566:	4815      	ldr	r0, [pc, #84]	; (80075bc <OLED_WR_Byte+0x90>)
 8007568:	f7fb f902 	bl	8002770 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800756c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007570:	2b00      	cmp	r3, #0
 8007572:	da05      	bge.n	8007580 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8007574:	2201      	movs	r2, #1
 8007576:	2140      	movs	r1, #64	; 0x40
 8007578:	4810      	ldr	r0, [pc, #64]	; (80075bc <OLED_WR_Byte+0x90>)
 800757a:	f7fb f8f9 	bl	8002770 <HAL_GPIO_WritePin>
 800757e:	e004      	b.n	800758a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8007580:	2200      	movs	r2, #0
 8007582:	2140      	movs	r1, #64	; 0x40
 8007584:	480d      	ldr	r0, [pc, #52]	; (80075bc <OLED_WR_Byte+0x90>)
 8007586:	f7fb f8f3 	bl	8002770 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800758a:	2201      	movs	r2, #1
 800758c:	2120      	movs	r1, #32
 800758e:	480b      	ldr	r0, [pc, #44]	; (80075bc <OLED_WR_Byte+0x90>)
 8007590:	f7fb f8ee 	bl	8002770 <HAL_GPIO_WritePin>
		dat<<=1;   
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	3301      	adds	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	2b07      	cmp	r3, #7
 80075a4:	d9dd      	bls.n	8007562 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80075a6:	2201      	movs	r2, #1
 80075a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075ac:	4803      	ldr	r0, [pc, #12]	; (80075bc <OLED_WR_Byte+0x90>)
 80075ae:	f7fb f8df 	bl	8002770 <HAL_GPIO_WritePin>
} 
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40021000 	.word	0x40021000

080075c0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80075c6:	2300      	movs	r3, #0
 80075c8:	71fb      	strb	r3, [r7, #7]
 80075ca:	e014      	b.n	80075f6 <OLED_Clear+0x36>
 80075cc:	2300      	movs	r3, #0
 80075ce:	71bb      	strb	r3, [r7, #6]
 80075d0:	e00a      	b.n	80075e8 <OLED_Clear+0x28>
 80075d2:	79ba      	ldrb	r2, [r7, #6]
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	490c      	ldr	r1, [pc, #48]	; (8007608 <OLED_Clear+0x48>)
 80075d8:	00d2      	lsls	r2, r2, #3
 80075da:	440a      	add	r2, r1
 80075dc:	4413      	add	r3, r2
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	79bb      	ldrb	r3, [r7, #6]
 80075e4:	3301      	adds	r3, #1
 80075e6:	71bb      	strb	r3, [r7, #6]
 80075e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	daf0      	bge.n	80075d2 <OLED_Clear+0x12>
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	3301      	adds	r3, #1
 80075f4:	71fb      	strb	r3, [r7, #7]
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	2b07      	cmp	r3, #7
 80075fa:	d9e7      	bls.n	80075cc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80075fc:	f7ff ff5e 	bl	80074bc <OLED_Refresh_Gram>
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	20004bac 	.word	0x20004bac

0800760c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	71fb      	strb	r3, [r7, #7]
 8007616:	460b      	mov	r3, r1
 8007618:	71bb      	strb	r3, [r7, #6]
 800761a:	4613      	mov	r3, r2
 800761c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8007622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007626:	2b00      	cmp	r3, #0
 8007628:	db41      	blt.n	80076ae <OLED_DrawPoint+0xa2>
 800762a:	79bb      	ldrb	r3, [r7, #6]
 800762c:	2b3f      	cmp	r3, #63	; 0x3f
 800762e:	d83e      	bhi.n	80076ae <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8007630:	79bb      	ldrb	r3, [r7, #6]
 8007632:	08db      	lsrs	r3, r3, #3
 8007634:	b2db      	uxtb	r3, r3
 8007636:	f1c3 0307 	rsb	r3, r3, #7
 800763a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800763c:	79bb      	ldrb	r3, [r7, #6]
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8007644:	7b7b      	ldrb	r3, [r7, #13]
 8007646:	f1c3 0307 	rsb	r3, r3, #7
 800764a:	2201      	movs	r2, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8007652:	797b      	ldrb	r3, [r7, #5]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d012      	beq.n	800767e <OLED_DrawPoint+0x72>
 8007658:	79fa      	ldrb	r2, [r7, #7]
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	4917      	ldr	r1, [pc, #92]	; (80076bc <OLED_DrawPoint+0xb0>)
 800765e:	00d2      	lsls	r2, r2, #3
 8007660:	440a      	add	r2, r1
 8007662:	4413      	add	r3, r2
 8007664:	7818      	ldrb	r0, [r3, #0]
 8007666:	79fa      	ldrb	r2, [r7, #7]
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	7bf9      	ldrb	r1, [r7, #15]
 800766c:	4301      	orrs	r1, r0
 800766e:	b2c8      	uxtb	r0, r1
 8007670:	4912      	ldr	r1, [pc, #72]	; (80076bc <OLED_DrawPoint+0xb0>)
 8007672:	00d2      	lsls	r2, r2, #3
 8007674:	440a      	add	r2, r1
 8007676:	4413      	add	r3, r2
 8007678:	4602      	mov	r2, r0
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	e018      	b.n	80076b0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800767e:	79fa      	ldrb	r2, [r7, #7]
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	490e      	ldr	r1, [pc, #56]	; (80076bc <OLED_DrawPoint+0xb0>)
 8007684:	00d2      	lsls	r2, r2, #3
 8007686:	440a      	add	r2, r1
 8007688:	4413      	add	r3, r2
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b25a      	sxtb	r2, r3
 800768e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007692:	43db      	mvns	r3, r3
 8007694:	b25b      	sxtb	r3, r3
 8007696:	4013      	ands	r3, r2
 8007698:	b259      	sxtb	r1, r3
 800769a:	79fa      	ldrb	r2, [r7, #7]
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	b2c8      	uxtb	r0, r1
 80076a0:	4906      	ldr	r1, [pc, #24]	; (80076bc <OLED_DrawPoint+0xb0>)
 80076a2:	00d2      	lsls	r2, r2, #3
 80076a4:	440a      	add	r2, r1
 80076a6:	4413      	add	r3, r2
 80076a8:	4602      	mov	r2, r0
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	e000      	b.n	80076b0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80076ae:	bf00      	nop
}
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20004bac 	.word	0x20004bac

080076c0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80076c0:	b590      	push	{r4, r7, lr}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4604      	mov	r4, r0
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4623      	mov	r3, r4
 80076d0:	71fb      	strb	r3, [r7, #7]
 80076d2:	4603      	mov	r3, r0
 80076d4:	71bb      	strb	r3, [r7, #6]
 80076d6:	460b      	mov	r3, r1
 80076d8:	717b      	strb	r3, [r7, #5]
 80076da:	4613      	mov	r3, r2
 80076dc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80076de:	79bb      	ldrb	r3, [r7, #6]
 80076e0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80076e2:	797b      	ldrb	r3, [r7, #5]
 80076e4:	3b20      	subs	r3, #32
 80076e6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80076e8:	2300      	movs	r3, #0
 80076ea:	73bb      	strb	r3, [r7, #14]
 80076ec:	e04d      	b.n	800778a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80076ee:	793b      	ldrb	r3, [r7, #4]
 80076f0:	2b0c      	cmp	r3, #12
 80076f2:	d10b      	bne.n	800770c <OLED_ShowChar+0x4c>
 80076f4:	797a      	ldrb	r2, [r7, #5]
 80076f6:	7bb9      	ldrb	r1, [r7, #14]
 80076f8:	4828      	ldr	r0, [pc, #160]	; (800779c <OLED_ShowChar+0xdc>)
 80076fa:	4613      	mov	r3, r2
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4403      	add	r3, r0
 8007704:	440b      	add	r3, r1
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	73fb      	strb	r3, [r7, #15]
 800770a:	e007      	b.n	800771c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800770c:	797a      	ldrb	r2, [r7, #5]
 800770e:	7bbb      	ldrb	r3, [r7, #14]
 8007710:	4923      	ldr	r1, [pc, #140]	; (80077a0 <OLED_ShowChar+0xe0>)
 8007712:	0112      	lsls	r2, r2, #4
 8007714:	440a      	add	r2, r1
 8007716:	4413      	add	r3, r2
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800771c:	2300      	movs	r3, #0
 800771e:	737b      	strb	r3, [r7, #13]
 8007720:	e02d      	b.n	800777e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8007722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	da07      	bge.n	800773a <OLED_ShowChar+0x7a>
 800772a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800772e:	79b9      	ldrb	r1, [r7, #6]
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff ff6a 	bl	800760c <OLED_DrawPoint>
 8007738:	e00c      	b.n	8007754 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800773a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800773e:	2b00      	cmp	r3, #0
 8007740:	bf0c      	ite	eq
 8007742:	2301      	moveq	r3, #1
 8007744:	2300      	movne	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	461a      	mov	r2, r3
 800774a:	79b9      	ldrb	r1, [r7, #6]
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff ff5c 	bl	800760c <OLED_DrawPoint>
			temp<<=1;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	73fb      	strb	r3, [r7, #15]
			y++;
 800775a:	79bb      	ldrb	r3, [r7, #6]
 800775c:	3301      	adds	r3, #1
 800775e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8007760:	79ba      	ldrb	r2, [r7, #6]
 8007762:	7b3b      	ldrb	r3, [r7, #12]
 8007764:	1ad2      	subs	r2, r2, r3
 8007766:	793b      	ldrb	r3, [r7, #4]
 8007768:	429a      	cmp	r2, r3
 800776a:	d105      	bne.n	8007778 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800776c:	7b3b      	ldrb	r3, [r7, #12]
 800776e:	71bb      	strb	r3, [r7, #6]
				x++;
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	3301      	adds	r3, #1
 8007774:	71fb      	strb	r3, [r7, #7]
				break;
 8007776:	e005      	b.n	8007784 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8007778:	7b7b      	ldrb	r3, [r7, #13]
 800777a:	3301      	adds	r3, #1
 800777c:	737b      	strb	r3, [r7, #13]
 800777e:	7b7b      	ldrb	r3, [r7, #13]
 8007780:	2b07      	cmp	r3, #7
 8007782:	d9ce      	bls.n	8007722 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	3301      	adds	r3, #1
 8007788:	73bb      	strb	r3, [r7, #14]
 800778a:	7bba      	ldrb	r2, [r7, #14]
 800778c:	793b      	ldrb	r3, [r7, #4]
 800778e:	429a      	cmp	r2, r3
 8007790:	d3ad      	bcc.n	80076ee <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8007792:	bf00      	nop
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	bd90      	pop	{r4, r7, pc}
 800779c:	080082b8 	.word	0x080082b8
 80077a0:	0800872c 	.word	0x0800872c

080077a4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	4603      	mov	r3, r0
 80077ac:	603a      	str	r2, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
 80077b0:	460b      	mov	r3, r1
 80077b2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80077b4:	e01f      	b.n	80077f6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	2b7a      	cmp	r3, #122	; 0x7a
 80077ba:	d904      	bls.n	80077c6 <OLED_ShowString+0x22>
 80077bc:	2300      	movs	r3, #0
 80077be:	71fb      	strb	r3, [r7, #7]
 80077c0:	79bb      	ldrb	r3, [r7, #6]
 80077c2:	3310      	adds	r3, #16
 80077c4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80077c6:	79bb      	ldrb	r3, [r7, #6]
 80077c8:	2b3a      	cmp	r3, #58	; 0x3a
 80077ca:	d905      	bls.n	80077d8 <OLED_ShowString+0x34>
 80077cc:	2300      	movs	r3, #0
 80077ce:	71fb      	strb	r3, [r7, #7]
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	71bb      	strb	r3, [r7, #6]
 80077d4:	f7ff fef4 	bl	80075c0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	79b9      	ldrb	r1, [r7, #6]
 80077de:	79f8      	ldrb	r0, [r7, #7]
 80077e0:	2301      	movs	r3, #1
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	230c      	movs	r3, #12
 80077e6:	f7ff ff6b 	bl	80076c0 <OLED_ShowChar>
        x+=8;
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	3308      	adds	r3, #8
 80077ee:	71fb      	strb	r3, [r7, #7]
        p++;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	3301      	adds	r3, #1
 80077f4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1db      	bne.n	80077b6 <OLED_ShowString+0x12>
    }  
}	 
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <OLED_Init>:

void OLED_Init(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800780c:	f7fa ffca 	bl	80027a4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8007810:	4b41      	ldr	r3, [pc, #260]	; (8007918 <OLED_Init+0x110>)
 8007812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007814:	4a40      	ldr	r2, [pc, #256]	; (8007918 <OLED_Init+0x110>)
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	6713      	str	r3, [r2, #112]	; 0x70
 800781c:	4b3e      	ldr	r3, [pc, #248]	; (8007918 <OLED_Init+0x110>)
 800781e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007820:	4a3d      	ldr	r2, [pc, #244]	; (8007918 <OLED_Init+0x110>)
 8007822:	f023 0304 	bic.w	r3, r3, #4
 8007826:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8007828:	f7fa ffd0 	bl	80027cc <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800782c:	2200      	movs	r2, #0
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	483a      	ldr	r0, [pc, #232]	; (800791c <OLED_Init+0x114>)
 8007832:	f7fa ff9d 	bl	8002770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007836:	2064      	movs	r0, #100	; 0x64
 8007838:	f7fa fcc8 	bl	80021cc <HAL_Delay>
	OLED_RST_Set();
 800783c:	2201      	movs	r2, #1
 800783e:	2180      	movs	r1, #128	; 0x80
 8007840:	4836      	ldr	r0, [pc, #216]	; (800791c <OLED_Init+0x114>)
 8007842:	f7fa ff95 	bl	8002770 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8007846:	2100      	movs	r1, #0
 8007848:	20ae      	movs	r0, #174	; 0xae
 800784a:	f7ff fe6f 	bl	800752c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800784e:	2100      	movs	r1, #0
 8007850:	20d5      	movs	r0, #213	; 0xd5
 8007852:	f7ff fe6b 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8007856:	2100      	movs	r1, #0
 8007858:	2050      	movs	r0, #80	; 0x50
 800785a:	f7ff fe67 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800785e:	2100      	movs	r1, #0
 8007860:	20a8      	movs	r0, #168	; 0xa8
 8007862:	f7ff fe63 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8007866:	2100      	movs	r1, #0
 8007868:	203f      	movs	r0, #63	; 0x3f
 800786a:	f7ff fe5f 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800786e:	2100      	movs	r1, #0
 8007870:	20d3      	movs	r0, #211	; 0xd3
 8007872:	f7ff fe5b 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8007876:	2100      	movs	r1, #0
 8007878:	2000      	movs	r0, #0
 800787a:	f7ff fe57 	bl	800752c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800787e:	2100      	movs	r1, #0
 8007880:	2040      	movs	r0, #64	; 0x40
 8007882:	f7ff fe53 	bl	800752c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8007886:	2100      	movs	r1, #0
 8007888:	208d      	movs	r0, #141	; 0x8d
 800788a:	f7ff fe4f 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800788e:	2100      	movs	r1, #0
 8007890:	2014      	movs	r0, #20
 8007892:	f7ff fe4b 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8007896:	2100      	movs	r1, #0
 8007898:	2020      	movs	r0, #32
 800789a:	f7ff fe47 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800789e:	2100      	movs	r1, #0
 80078a0:	2002      	movs	r0, #2
 80078a2:	f7ff fe43 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80078a6:	2100      	movs	r1, #0
 80078a8:	20a1      	movs	r0, #161	; 0xa1
 80078aa:	f7ff fe3f 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80078ae:	2100      	movs	r1, #0
 80078b0:	20c0      	movs	r0, #192	; 0xc0
 80078b2:	f7ff fe3b 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80078b6:	2100      	movs	r1, #0
 80078b8:	20da      	movs	r0, #218	; 0xda
 80078ba:	f7ff fe37 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80078be:	2100      	movs	r1, #0
 80078c0:	2012      	movs	r0, #18
 80078c2:	f7ff fe33 	bl	800752c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80078c6:	2100      	movs	r1, #0
 80078c8:	2081      	movs	r0, #129	; 0x81
 80078ca:	f7ff fe2f 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80078ce:	2100      	movs	r1, #0
 80078d0:	20ef      	movs	r0, #239	; 0xef
 80078d2:	f7ff fe2b 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80078d6:	2100      	movs	r1, #0
 80078d8:	20d9      	movs	r0, #217	; 0xd9
 80078da:	f7ff fe27 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80078de:	2100      	movs	r1, #0
 80078e0:	20f1      	movs	r0, #241	; 0xf1
 80078e2:	f7ff fe23 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80078e6:	2100      	movs	r1, #0
 80078e8:	20db      	movs	r0, #219	; 0xdb
 80078ea:	f7ff fe1f 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80078ee:	2100      	movs	r1, #0
 80078f0:	2030      	movs	r0, #48	; 0x30
 80078f2:	f7ff fe1b 	bl	800752c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80078f6:	2100      	movs	r1, #0
 80078f8:	20a4      	movs	r0, #164	; 0xa4
 80078fa:	f7ff fe17 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80078fe:	2100      	movs	r1, #0
 8007900:	20a6      	movs	r0, #166	; 0xa6
 8007902:	f7ff fe13 	bl	800752c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8007906:	2100      	movs	r1, #0
 8007908:	20af      	movs	r0, #175	; 0xaf
 800790a:	f7ff fe0f 	bl	800752c <OLED_WR_Byte>
	OLED_Clear(); 
 800790e:	f7ff fe57 	bl	80075c0 <OLED_Clear>
 8007912:	bf00      	nop
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40023800 	.word	0x40023800
 800791c:	40021000 	.word	0x40021000

08007920 <__errno>:
 8007920:	4b01      	ldr	r3, [pc, #4]	; (8007928 <__errno+0x8>)
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20000010 	.word	0x20000010

0800792c <__libc_init_array>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	4d0d      	ldr	r5, [pc, #52]	; (8007964 <__libc_init_array+0x38>)
 8007930:	4c0d      	ldr	r4, [pc, #52]	; (8007968 <__libc_init_array+0x3c>)
 8007932:	1b64      	subs	r4, r4, r5
 8007934:	10a4      	asrs	r4, r4, #2
 8007936:	2600      	movs	r6, #0
 8007938:	42a6      	cmp	r6, r4
 800793a:	d109      	bne.n	8007950 <__libc_init_array+0x24>
 800793c:	4d0b      	ldr	r5, [pc, #44]	; (800796c <__libc_init_array+0x40>)
 800793e:	4c0c      	ldr	r4, [pc, #48]	; (8007970 <__libc_init_array+0x44>)
 8007940:	f000 fc4e 	bl	80081e0 <_init>
 8007944:	1b64      	subs	r4, r4, r5
 8007946:	10a4      	asrs	r4, r4, #2
 8007948:	2600      	movs	r6, #0
 800794a:	42a6      	cmp	r6, r4
 800794c:	d105      	bne.n	800795a <__libc_init_array+0x2e>
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	f855 3b04 	ldr.w	r3, [r5], #4
 8007954:	4798      	blx	r3
 8007956:	3601      	adds	r6, #1
 8007958:	e7ee      	b.n	8007938 <__libc_init_array+0xc>
 800795a:	f855 3b04 	ldr.w	r3, [r5], #4
 800795e:	4798      	blx	r3
 8007960:	3601      	adds	r6, #1
 8007962:	e7f2      	b.n	800794a <__libc_init_array+0x1e>
 8007964:	08008d58 	.word	0x08008d58
 8007968:	08008d58 	.word	0x08008d58
 800796c:	08008d58 	.word	0x08008d58
 8007970:	08008d5c 	.word	0x08008d5c

08007974 <memcpy>:
 8007974:	440a      	add	r2, r1
 8007976:	4291      	cmp	r1, r2
 8007978:	f100 33ff 	add.w	r3, r0, #4294967295
 800797c:	d100      	bne.n	8007980 <memcpy+0xc>
 800797e:	4770      	bx	lr
 8007980:	b510      	push	{r4, lr}
 8007982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800798a:	4291      	cmp	r1, r2
 800798c:	d1f9      	bne.n	8007982 <memcpy+0xe>
 800798e:	bd10      	pop	{r4, pc}

08007990 <memset>:
 8007990:	4402      	add	r2, r0
 8007992:	4603      	mov	r3, r0
 8007994:	4293      	cmp	r3, r2
 8007996:	d100      	bne.n	800799a <memset+0xa>
 8007998:	4770      	bx	lr
 800799a:	f803 1b01 	strb.w	r1, [r3], #1
 800799e:	e7f9      	b.n	8007994 <memset+0x4>

080079a0 <siprintf>:
 80079a0:	b40e      	push	{r1, r2, r3}
 80079a2:	b500      	push	{lr}
 80079a4:	b09c      	sub	sp, #112	; 0x70
 80079a6:	ab1d      	add	r3, sp, #116	; 0x74
 80079a8:	9002      	str	r0, [sp, #8]
 80079aa:	9006      	str	r0, [sp, #24]
 80079ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079b0:	4809      	ldr	r0, [pc, #36]	; (80079d8 <siprintf+0x38>)
 80079b2:	9107      	str	r1, [sp, #28]
 80079b4:	9104      	str	r1, [sp, #16]
 80079b6:	4909      	ldr	r1, [pc, #36]	; (80079dc <siprintf+0x3c>)
 80079b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079bc:	9105      	str	r1, [sp, #20]
 80079be:	6800      	ldr	r0, [r0, #0]
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	a902      	add	r1, sp, #8
 80079c4:	f000 f868 	bl	8007a98 <_svfiprintf_r>
 80079c8:	9b02      	ldr	r3, [sp, #8]
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	b01c      	add	sp, #112	; 0x70
 80079d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d4:	b003      	add	sp, #12
 80079d6:	4770      	bx	lr
 80079d8:	20000010 	.word	0x20000010
 80079dc:	ffff0208 	.word	0xffff0208

080079e0 <__ssputs_r>:
 80079e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e4:	688e      	ldr	r6, [r1, #8]
 80079e6:	429e      	cmp	r6, r3
 80079e8:	4682      	mov	sl, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	4690      	mov	r8, r2
 80079ee:	461f      	mov	r7, r3
 80079f0:	d838      	bhi.n	8007a64 <__ssputs_r+0x84>
 80079f2:	898a      	ldrh	r2, [r1, #12]
 80079f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079f8:	d032      	beq.n	8007a60 <__ssputs_r+0x80>
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	6909      	ldr	r1, [r1, #16]
 80079fe:	eba5 0901 	sub.w	r9, r5, r1
 8007a02:	6965      	ldr	r5, [r4, #20]
 8007a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	444b      	add	r3, r9
 8007a10:	106d      	asrs	r5, r5, #1
 8007a12:	429d      	cmp	r5, r3
 8007a14:	bf38      	it	cc
 8007a16:	461d      	movcc	r5, r3
 8007a18:	0553      	lsls	r3, r2, #21
 8007a1a:	d531      	bpl.n	8007a80 <__ssputs_r+0xa0>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f000 fb39 	bl	8008094 <_malloc_r>
 8007a22:	4606      	mov	r6, r0
 8007a24:	b950      	cbnz	r0, 8007a3c <__ssputs_r+0x5c>
 8007a26:	230c      	movs	r3, #12
 8007a28:	f8ca 3000 	str.w	r3, [sl]
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3c:	6921      	ldr	r1, [r4, #16]
 8007a3e:	464a      	mov	r2, r9
 8007a40:	f7ff ff98 	bl	8007974 <memcpy>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	6126      	str	r6, [r4, #16]
 8007a52:	6165      	str	r5, [r4, #20]
 8007a54:	444e      	add	r6, r9
 8007a56:	eba5 0509 	sub.w	r5, r5, r9
 8007a5a:	6026      	str	r6, [r4, #0]
 8007a5c:	60a5      	str	r5, [r4, #8]
 8007a5e:	463e      	mov	r6, r7
 8007a60:	42be      	cmp	r6, r7
 8007a62:	d900      	bls.n	8007a66 <__ssputs_r+0x86>
 8007a64:	463e      	mov	r6, r7
 8007a66:	4632      	mov	r2, r6
 8007a68:	6820      	ldr	r0, [r4, #0]
 8007a6a:	4641      	mov	r1, r8
 8007a6c:	f000 faa8 	bl	8007fc0 <memmove>
 8007a70:	68a3      	ldr	r3, [r4, #8]
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	1b9b      	subs	r3, r3, r6
 8007a76:	4432      	add	r2, r6
 8007a78:	60a3      	str	r3, [r4, #8]
 8007a7a:	6022      	str	r2, [r4, #0]
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e7db      	b.n	8007a38 <__ssputs_r+0x58>
 8007a80:	462a      	mov	r2, r5
 8007a82:	f000 fb61 	bl	8008148 <_realloc_r>
 8007a86:	4606      	mov	r6, r0
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d1e1      	bne.n	8007a50 <__ssputs_r+0x70>
 8007a8c:	6921      	ldr	r1, [r4, #16]
 8007a8e:	4650      	mov	r0, sl
 8007a90:	f000 fab0 	bl	8007ff4 <_free_r>
 8007a94:	e7c7      	b.n	8007a26 <__ssputs_r+0x46>
	...

08007a98 <_svfiprintf_r>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	4698      	mov	r8, r3
 8007a9e:	898b      	ldrh	r3, [r1, #12]
 8007aa0:	061b      	lsls	r3, r3, #24
 8007aa2:	b09d      	sub	sp, #116	; 0x74
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	d50e      	bpl.n	8007aca <_svfiprintf_r+0x32>
 8007aac:	690b      	ldr	r3, [r1, #16]
 8007aae:	b963      	cbnz	r3, 8007aca <_svfiprintf_r+0x32>
 8007ab0:	2140      	movs	r1, #64	; 0x40
 8007ab2:	f000 faef 	bl	8008094 <_malloc_r>
 8007ab6:	6028      	str	r0, [r5, #0]
 8007ab8:	6128      	str	r0, [r5, #16]
 8007aba:	b920      	cbnz	r0, 8007ac6 <_svfiprintf_r+0x2e>
 8007abc:	230c      	movs	r3, #12
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	e0d1      	b.n	8007c6a <_svfiprintf_r+0x1d2>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	616b      	str	r3, [r5, #20]
 8007aca:	2300      	movs	r3, #0
 8007acc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ace:	2320      	movs	r3, #32
 8007ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ad8:	2330      	movs	r3, #48	; 0x30
 8007ada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c84 <_svfiprintf_r+0x1ec>
 8007ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae2:	f04f 0901 	mov.w	r9, #1
 8007ae6:	4623      	mov	r3, r4
 8007ae8:	469a      	mov	sl, r3
 8007aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aee:	b10a      	cbz	r2, 8007af4 <_svfiprintf_r+0x5c>
 8007af0:	2a25      	cmp	r2, #37	; 0x25
 8007af2:	d1f9      	bne.n	8007ae8 <_svfiprintf_r+0x50>
 8007af4:	ebba 0b04 	subs.w	fp, sl, r4
 8007af8:	d00b      	beq.n	8007b12 <_svfiprintf_r+0x7a>
 8007afa:	465b      	mov	r3, fp
 8007afc:	4622      	mov	r2, r4
 8007afe:	4629      	mov	r1, r5
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff ff6d 	bl	80079e0 <__ssputs_r>
 8007b06:	3001      	adds	r0, #1
 8007b08:	f000 80aa 	beq.w	8007c60 <_svfiprintf_r+0x1c8>
 8007b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b0e:	445a      	add	r2, fp
 8007b10:	9209      	str	r2, [sp, #36]	; 0x24
 8007b12:	f89a 3000 	ldrb.w	r3, [sl]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 80a2 	beq.w	8007c60 <_svfiprintf_r+0x1c8>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b26:	f10a 0a01 	add.w	sl, sl, #1
 8007b2a:	9304      	str	r3, [sp, #16]
 8007b2c:	9307      	str	r3, [sp, #28]
 8007b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b32:	931a      	str	r3, [sp, #104]	; 0x68
 8007b34:	4654      	mov	r4, sl
 8007b36:	2205      	movs	r2, #5
 8007b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3c:	4851      	ldr	r0, [pc, #324]	; (8007c84 <_svfiprintf_r+0x1ec>)
 8007b3e:	f7f8 fb47 	bl	80001d0 <memchr>
 8007b42:	9a04      	ldr	r2, [sp, #16]
 8007b44:	b9d8      	cbnz	r0, 8007b7e <_svfiprintf_r+0xe6>
 8007b46:	06d0      	lsls	r0, r2, #27
 8007b48:	bf44      	itt	mi
 8007b4a:	2320      	movmi	r3, #32
 8007b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b50:	0711      	lsls	r1, r2, #28
 8007b52:	bf44      	itt	mi
 8007b54:	232b      	movmi	r3, #43	; 0x2b
 8007b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b60:	d015      	beq.n	8007b8e <_svfiprintf_r+0xf6>
 8007b62:	9a07      	ldr	r2, [sp, #28]
 8007b64:	4654      	mov	r4, sl
 8007b66:	2000      	movs	r0, #0
 8007b68:	f04f 0c0a 	mov.w	ip, #10
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b72:	3b30      	subs	r3, #48	; 0x30
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	d94e      	bls.n	8007c16 <_svfiprintf_r+0x17e>
 8007b78:	b1b0      	cbz	r0, 8007ba8 <_svfiprintf_r+0x110>
 8007b7a:	9207      	str	r2, [sp, #28]
 8007b7c:	e014      	b.n	8007ba8 <_svfiprintf_r+0x110>
 8007b7e:	eba0 0308 	sub.w	r3, r0, r8
 8007b82:	fa09 f303 	lsl.w	r3, r9, r3
 8007b86:	4313      	orrs	r3, r2
 8007b88:	9304      	str	r3, [sp, #16]
 8007b8a:	46a2      	mov	sl, r4
 8007b8c:	e7d2      	b.n	8007b34 <_svfiprintf_r+0x9c>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	1d19      	adds	r1, r3, #4
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	9103      	str	r1, [sp, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfbb      	ittet	lt
 8007b9a:	425b      	neglt	r3, r3
 8007b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba0:	9307      	strge	r3, [sp, #28]
 8007ba2:	9307      	strlt	r3, [sp, #28]
 8007ba4:	bfb8      	it	lt
 8007ba6:	9204      	strlt	r2, [sp, #16]
 8007ba8:	7823      	ldrb	r3, [r4, #0]
 8007baa:	2b2e      	cmp	r3, #46	; 0x2e
 8007bac:	d10c      	bne.n	8007bc8 <_svfiprintf_r+0x130>
 8007bae:	7863      	ldrb	r3, [r4, #1]
 8007bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb2:	d135      	bne.n	8007c20 <_svfiprintf_r+0x188>
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	9203      	str	r2, [sp, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bfb8      	it	lt
 8007bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bc4:	3402      	adds	r4, #2
 8007bc6:	9305      	str	r3, [sp, #20]
 8007bc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c94 <_svfiprintf_r+0x1fc>
 8007bcc:	7821      	ldrb	r1, [r4, #0]
 8007bce:	2203      	movs	r2, #3
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	f7f8 fafd 	bl	80001d0 <memchr>
 8007bd6:	b140      	cbz	r0, 8007bea <_svfiprintf_r+0x152>
 8007bd8:	2340      	movs	r3, #64	; 0x40
 8007bda:	eba0 000a 	sub.w	r0, r0, sl
 8007bde:	fa03 f000 	lsl.w	r0, r3, r0
 8007be2:	9b04      	ldr	r3, [sp, #16]
 8007be4:	4303      	orrs	r3, r0
 8007be6:	3401      	adds	r4, #1
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bee:	4826      	ldr	r0, [pc, #152]	; (8007c88 <_svfiprintf_r+0x1f0>)
 8007bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bf4:	2206      	movs	r2, #6
 8007bf6:	f7f8 faeb 	bl	80001d0 <memchr>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d038      	beq.n	8007c70 <_svfiprintf_r+0x1d8>
 8007bfe:	4b23      	ldr	r3, [pc, #140]	; (8007c8c <_svfiprintf_r+0x1f4>)
 8007c00:	bb1b      	cbnz	r3, 8007c4a <_svfiprintf_r+0x1b2>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	3307      	adds	r3, #7
 8007c06:	f023 0307 	bic.w	r3, r3, #7
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	9303      	str	r3, [sp, #12]
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	4433      	add	r3, r6
 8007c12:	9309      	str	r3, [sp, #36]	; 0x24
 8007c14:	e767      	b.n	8007ae6 <_svfiprintf_r+0x4e>
 8007c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	e7a5      	b.n	8007b6c <_svfiprintf_r+0xd4>
 8007c20:	2300      	movs	r3, #0
 8007c22:	3401      	adds	r4, #1
 8007c24:	9305      	str	r3, [sp, #20]
 8007c26:	4619      	mov	r1, r3
 8007c28:	f04f 0c0a 	mov.w	ip, #10
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c32:	3a30      	subs	r2, #48	; 0x30
 8007c34:	2a09      	cmp	r2, #9
 8007c36:	d903      	bls.n	8007c40 <_svfiprintf_r+0x1a8>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0c5      	beq.n	8007bc8 <_svfiprintf_r+0x130>
 8007c3c:	9105      	str	r1, [sp, #20]
 8007c3e:	e7c3      	b.n	8007bc8 <_svfiprintf_r+0x130>
 8007c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c44:	4604      	mov	r4, r0
 8007c46:	2301      	movs	r3, #1
 8007c48:	e7f0      	b.n	8007c2c <_svfiprintf_r+0x194>
 8007c4a:	ab03      	add	r3, sp, #12
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	462a      	mov	r2, r5
 8007c50:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <_svfiprintf_r+0x1f8>)
 8007c52:	a904      	add	r1, sp, #16
 8007c54:	4638      	mov	r0, r7
 8007c56:	f3af 8000 	nop.w
 8007c5a:	1c42      	adds	r2, r0, #1
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	d1d6      	bne.n	8007c0e <_svfiprintf_r+0x176>
 8007c60:	89ab      	ldrh	r3, [r5, #12]
 8007c62:	065b      	lsls	r3, r3, #25
 8007c64:	f53f af2c 	bmi.w	8007ac0 <_svfiprintf_r+0x28>
 8007c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c6a:	b01d      	add	sp, #116	; 0x74
 8007c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c70:	ab03      	add	r3, sp, #12
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	462a      	mov	r2, r5
 8007c76:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <_svfiprintf_r+0x1f8>)
 8007c78:	a904      	add	r1, sp, #16
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f000 f87a 	bl	8007d74 <_printf_i>
 8007c80:	e7eb      	b.n	8007c5a <_svfiprintf_r+0x1c2>
 8007c82:	bf00      	nop
 8007c84:	08008d1c 	.word	0x08008d1c
 8007c88:	08008d26 	.word	0x08008d26
 8007c8c:	00000000 	.word	0x00000000
 8007c90:	080079e1 	.word	0x080079e1
 8007c94:	08008d22 	.word	0x08008d22

08007c98 <_printf_common>:
 8007c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	4699      	mov	r9, r3
 8007ca0:	688a      	ldr	r2, [r1, #8]
 8007ca2:	690b      	ldr	r3, [r1, #16]
 8007ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bfb8      	it	lt
 8007cac:	4613      	movlt	r3, r2
 8007cae:	6033      	str	r3, [r6, #0]
 8007cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	b10a      	cbz	r2, 8007cbe <_printf_common+0x26>
 8007cba:	3301      	adds	r3, #1
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	0699      	lsls	r1, r3, #26
 8007cc2:	bf42      	ittt	mi
 8007cc4:	6833      	ldrmi	r3, [r6, #0]
 8007cc6:	3302      	addmi	r3, #2
 8007cc8:	6033      	strmi	r3, [r6, #0]
 8007cca:	6825      	ldr	r5, [r4, #0]
 8007ccc:	f015 0506 	ands.w	r5, r5, #6
 8007cd0:	d106      	bne.n	8007ce0 <_printf_common+0x48>
 8007cd2:	f104 0a19 	add.w	sl, r4, #25
 8007cd6:	68e3      	ldr	r3, [r4, #12]
 8007cd8:	6832      	ldr	r2, [r6, #0]
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	42ab      	cmp	r3, r5
 8007cde:	dc26      	bgt.n	8007d2e <_printf_common+0x96>
 8007ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ce4:	1e13      	subs	r3, r2, #0
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	bf18      	it	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	0692      	lsls	r2, r2, #26
 8007cee:	d42b      	bmi.n	8007d48 <_printf_common+0xb0>
 8007cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	47c0      	blx	r8
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d01e      	beq.n	8007d3c <_printf_common+0xa4>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	68e5      	ldr	r5, [r4, #12]
 8007d02:	6832      	ldr	r2, [r6, #0]
 8007d04:	f003 0306 	and.w	r3, r3, #6
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	bf08      	it	eq
 8007d0c:	1aad      	subeq	r5, r5, r2
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	2600      	movs	r6, #0
 8007d24:	341a      	adds	r4, #26
 8007d26:	42b5      	cmp	r5, r6
 8007d28:	d11a      	bne.n	8007d60 <_printf_common+0xc8>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e008      	b.n	8007d40 <_printf_common+0xa8>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4652      	mov	r2, sl
 8007d32:	4649      	mov	r1, r9
 8007d34:	4638      	mov	r0, r7
 8007d36:	47c0      	blx	r8
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d103      	bne.n	8007d44 <_printf_common+0xac>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d44:	3501      	adds	r5, #1
 8007d46:	e7c6      	b.n	8007cd6 <_printf_common+0x3e>
 8007d48:	18e1      	adds	r1, r4, r3
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	2030      	movs	r0, #48	; 0x30
 8007d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d52:	4422      	add	r2, r4
 8007d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	e7c7      	b.n	8007cf0 <_printf_common+0x58>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4622      	mov	r2, r4
 8007d64:	4649      	mov	r1, r9
 8007d66:	4638      	mov	r0, r7
 8007d68:	47c0      	blx	r8
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d0e6      	beq.n	8007d3c <_printf_common+0xa4>
 8007d6e:	3601      	adds	r6, #1
 8007d70:	e7d9      	b.n	8007d26 <_printf_common+0x8e>
	...

08007d74 <_printf_i>:
 8007d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	460c      	mov	r4, r1
 8007d7a:	4691      	mov	r9, r2
 8007d7c:	7e27      	ldrb	r7, [r4, #24]
 8007d7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d80:	2f78      	cmp	r7, #120	; 0x78
 8007d82:	4680      	mov	r8, r0
 8007d84:	469a      	mov	sl, r3
 8007d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d8a:	d807      	bhi.n	8007d9c <_printf_i+0x28>
 8007d8c:	2f62      	cmp	r7, #98	; 0x62
 8007d8e:	d80a      	bhi.n	8007da6 <_printf_i+0x32>
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	f000 80d8 	beq.w	8007f46 <_printf_i+0x1d2>
 8007d96:	2f58      	cmp	r7, #88	; 0x58
 8007d98:	f000 80a3 	beq.w	8007ee2 <_printf_i+0x16e>
 8007d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007da4:	e03a      	b.n	8007e1c <_printf_i+0xa8>
 8007da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007daa:	2b15      	cmp	r3, #21
 8007dac:	d8f6      	bhi.n	8007d9c <_printf_i+0x28>
 8007dae:	a001      	add	r0, pc, #4	; (adr r0, 8007db4 <_printf_i+0x40>)
 8007db0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007db4:	08007e0d 	.word	0x08007e0d
 8007db8:	08007e21 	.word	0x08007e21
 8007dbc:	08007d9d 	.word	0x08007d9d
 8007dc0:	08007d9d 	.word	0x08007d9d
 8007dc4:	08007d9d 	.word	0x08007d9d
 8007dc8:	08007d9d 	.word	0x08007d9d
 8007dcc:	08007e21 	.word	0x08007e21
 8007dd0:	08007d9d 	.word	0x08007d9d
 8007dd4:	08007d9d 	.word	0x08007d9d
 8007dd8:	08007d9d 	.word	0x08007d9d
 8007ddc:	08007d9d 	.word	0x08007d9d
 8007de0:	08007f2d 	.word	0x08007f2d
 8007de4:	08007e51 	.word	0x08007e51
 8007de8:	08007f0f 	.word	0x08007f0f
 8007dec:	08007d9d 	.word	0x08007d9d
 8007df0:	08007d9d 	.word	0x08007d9d
 8007df4:	08007f4f 	.word	0x08007f4f
 8007df8:	08007d9d 	.word	0x08007d9d
 8007dfc:	08007e51 	.word	0x08007e51
 8007e00:	08007d9d 	.word	0x08007d9d
 8007e04:	08007d9d 	.word	0x08007d9d
 8007e08:	08007f17 	.word	0x08007f17
 8007e0c:	680b      	ldr	r3, [r1, #0]
 8007e0e:	1d1a      	adds	r2, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	600a      	str	r2, [r1, #0]
 8007e14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e0a3      	b.n	8007f68 <_printf_i+0x1f4>
 8007e20:	6825      	ldr	r5, [r4, #0]
 8007e22:	6808      	ldr	r0, [r1, #0]
 8007e24:	062e      	lsls	r6, r5, #24
 8007e26:	f100 0304 	add.w	r3, r0, #4
 8007e2a:	d50a      	bpl.n	8007e42 <_printf_i+0xce>
 8007e2c:	6805      	ldr	r5, [r0, #0]
 8007e2e:	600b      	str	r3, [r1, #0]
 8007e30:	2d00      	cmp	r5, #0
 8007e32:	da03      	bge.n	8007e3c <_printf_i+0xc8>
 8007e34:	232d      	movs	r3, #45	; 0x2d
 8007e36:	426d      	negs	r5, r5
 8007e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e3c:	485e      	ldr	r0, [pc, #376]	; (8007fb8 <_printf_i+0x244>)
 8007e3e:	230a      	movs	r3, #10
 8007e40:	e019      	b.n	8007e76 <_printf_i+0x102>
 8007e42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e46:	6805      	ldr	r5, [r0, #0]
 8007e48:	600b      	str	r3, [r1, #0]
 8007e4a:	bf18      	it	ne
 8007e4c:	b22d      	sxthne	r5, r5
 8007e4e:	e7ef      	b.n	8007e30 <_printf_i+0xbc>
 8007e50:	680b      	ldr	r3, [r1, #0]
 8007e52:	6825      	ldr	r5, [r4, #0]
 8007e54:	1d18      	adds	r0, r3, #4
 8007e56:	6008      	str	r0, [r1, #0]
 8007e58:	0628      	lsls	r0, r5, #24
 8007e5a:	d501      	bpl.n	8007e60 <_printf_i+0xec>
 8007e5c:	681d      	ldr	r5, [r3, #0]
 8007e5e:	e002      	b.n	8007e66 <_printf_i+0xf2>
 8007e60:	0669      	lsls	r1, r5, #25
 8007e62:	d5fb      	bpl.n	8007e5c <_printf_i+0xe8>
 8007e64:	881d      	ldrh	r5, [r3, #0]
 8007e66:	4854      	ldr	r0, [pc, #336]	; (8007fb8 <_printf_i+0x244>)
 8007e68:	2f6f      	cmp	r7, #111	; 0x6f
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2308      	moveq	r3, #8
 8007e6e:	230a      	movne	r3, #10
 8007e70:	2100      	movs	r1, #0
 8007e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e76:	6866      	ldr	r6, [r4, #4]
 8007e78:	60a6      	str	r6, [r4, #8]
 8007e7a:	2e00      	cmp	r6, #0
 8007e7c:	bfa2      	ittt	ge
 8007e7e:	6821      	ldrge	r1, [r4, #0]
 8007e80:	f021 0104 	bicge.w	r1, r1, #4
 8007e84:	6021      	strge	r1, [r4, #0]
 8007e86:	b90d      	cbnz	r5, 8007e8c <_printf_i+0x118>
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	d04d      	beq.n	8007f28 <_printf_i+0x1b4>
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e92:	fb03 5711 	mls	r7, r3, r1, r5
 8007e96:	5dc7      	ldrb	r7, [r0, r7]
 8007e98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e9c:	462f      	mov	r7, r5
 8007e9e:	42bb      	cmp	r3, r7
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	d9f4      	bls.n	8007e8e <_printf_i+0x11a>
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d10b      	bne.n	8007ec0 <_printf_i+0x14c>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	07df      	lsls	r7, r3, #31
 8007eac:	d508      	bpl.n	8007ec0 <_printf_i+0x14c>
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	6861      	ldr	r1, [r4, #4]
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	bfde      	ittt	le
 8007eb6:	2330      	movle	r3, #48	; 0x30
 8007eb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ebc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ec0:	1b92      	subs	r2, r2, r6
 8007ec2:	6122      	str	r2, [r4, #16]
 8007ec4:	f8cd a000 	str.w	sl, [sp]
 8007ec8:	464b      	mov	r3, r9
 8007eca:	aa03      	add	r2, sp, #12
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4640      	mov	r0, r8
 8007ed0:	f7ff fee2 	bl	8007c98 <_printf_common>
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d14c      	bne.n	8007f72 <_printf_i+0x1fe>
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	b004      	add	sp, #16
 8007ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee2:	4835      	ldr	r0, [pc, #212]	; (8007fb8 <_printf_i+0x244>)
 8007ee4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	680e      	ldr	r6, [r1, #0]
 8007eec:	061f      	lsls	r7, r3, #24
 8007eee:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ef2:	600e      	str	r6, [r1, #0]
 8007ef4:	d514      	bpl.n	8007f20 <_printf_i+0x1ac>
 8007ef6:	07d9      	lsls	r1, r3, #31
 8007ef8:	bf44      	itt	mi
 8007efa:	f043 0320 	orrmi.w	r3, r3, #32
 8007efe:	6023      	strmi	r3, [r4, #0]
 8007f00:	b91d      	cbnz	r5, 8007f0a <_printf_i+0x196>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	f023 0320 	bic.w	r3, r3, #32
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	2310      	movs	r3, #16
 8007f0c:	e7b0      	b.n	8007e70 <_printf_i+0xfc>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	f043 0320 	orr.w	r3, r3, #32
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	2378      	movs	r3, #120	; 0x78
 8007f18:	4828      	ldr	r0, [pc, #160]	; (8007fbc <_printf_i+0x248>)
 8007f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f1e:	e7e3      	b.n	8007ee8 <_printf_i+0x174>
 8007f20:	065e      	lsls	r6, r3, #25
 8007f22:	bf48      	it	mi
 8007f24:	b2ad      	uxthmi	r5, r5
 8007f26:	e7e6      	b.n	8007ef6 <_printf_i+0x182>
 8007f28:	4616      	mov	r6, r2
 8007f2a:	e7bb      	b.n	8007ea4 <_printf_i+0x130>
 8007f2c:	680b      	ldr	r3, [r1, #0]
 8007f2e:	6826      	ldr	r6, [r4, #0]
 8007f30:	6960      	ldr	r0, [r4, #20]
 8007f32:	1d1d      	adds	r5, r3, #4
 8007f34:	600d      	str	r5, [r1, #0]
 8007f36:	0635      	lsls	r5, r6, #24
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0x1cc>
 8007f3c:	6018      	str	r0, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <_printf_i+0x1d2>
 8007f40:	0671      	lsls	r1, r6, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0x1c8>
 8007f44:	8018      	strh	r0, [r3, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	4616      	mov	r6, r2
 8007f4c:	e7ba      	b.n	8007ec4 <_printf_i+0x150>
 8007f4e:	680b      	ldr	r3, [r1, #0]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	600a      	str	r2, [r1, #0]
 8007f54:	681e      	ldr	r6, [r3, #0]
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7f8 f938 	bl	80001d0 <memchr>
 8007f60:	b108      	cbz	r0, 8007f66 <_printf_i+0x1f2>
 8007f62:	1b80      	subs	r0, r0, r6
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	e7a8      	b.n	8007ec4 <_printf_i+0x150>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	4632      	mov	r2, r6
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	47d0      	blx	sl
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d0ab      	beq.n	8007ed8 <_printf_i+0x164>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	079b      	lsls	r3, r3, #30
 8007f84:	d413      	bmi.n	8007fae <_printf_i+0x23a>
 8007f86:	68e0      	ldr	r0, [r4, #12]
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	4298      	cmp	r0, r3
 8007f8c:	bfb8      	it	lt
 8007f8e:	4618      	movlt	r0, r3
 8007f90:	e7a4      	b.n	8007edc <_printf_i+0x168>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4632      	mov	r2, r6
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	47d0      	blx	sl
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d09b      	beq.n	8007ed8 <_printf_i+0x164>
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	9903      	ldr	r1, [sp, #12]
 8007fa6:	1a5b      	subs	r3, r3, r1
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dcf2      	bgt.n	8007f92 <_printf_i+0x21e>
 8007fac:	e7eb      	b.n	8007f86 <_printf_i+0x212>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f104 0619 	add.w	r6, r4, #25
 8007fb4:	e7f5      	b.n	8007fa2 <_printf_i+0x22e>
 8007fb6:	bf00      	nop
 8007fb8:	08008d2d 	.word	0x08008d2d
 8007fbc:	08008d3e 	.word	0x08008d3e

08007fc0 <memmove>:
 8007fc0:	4288      	cmp	r0, r1
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	eb01 0402 	add.w	r4, r1, r2
 8007fc8:	d902      	bls.n	8007fd0 <memmove+0x10>
 8007fca:	4284      	cmp	r4, r0
 8007fcc:	4623      	mov	r3, r4
 8007fce:	d807      	bhi.n	8007fe0 <memmove+0x20>
 8007fd0:	1e43      	subs	r3, r0, #1
 8007fd2:	42a1      	cmp	r1, r4
 8007fd4:	d008      	beq.n	8007fe8 <memmove+0x28>
 8007fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fde:	e7f8      	b.n	8007fd2 <memmove+0x12>
 8007fe0:	4402      	add	r2, r0
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	428a      	cmp	r2, r1
 8007fe6:	d100      	bne.n	8007fea <memmove+0x2a>
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ff2:	e7f7      	b.n	8007fe4 <memmove+0x24>

08007ff4 <_free_r>:
 8007ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d048      	beq.n	800808c <_free_r+0x98>
 8007ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffe:	9001      	str	r0, [sp, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f1a1 0404 	sub.w	r4, r1, #4
 8008006:	bfb8      	it	lt
 8008008:	18e4      	addlt	r4, r4, r3
 800800a:	f000 f8d3 	bl	80081b4 <__malloc_lock>
 800800e:	4a20      	ldr	r2, [pc, #128]	; (8008090 <_free_r+0x9c>)
 8008010:	9801      	ldr	r0, [sp, #4]
 8008012:	6813      	ldr	r3, [r2, #0]
 8008014:	4615      	mov	r5, r2
 8008016:	b933      	cbnz	r3, 8008026 <_free_r+0x32>
 8008018:	6063      	str	r3, [r4, #4]
 800801a:	6014      	str	r4, [r2, #0]
 800801c:	b003      	add	sp, #12
 800801e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008022:	f000 b8cd 	b.w	80081c0 <__malloc_unlock>
 8008026:	42a3      	cmp	r3, r4
 8008028:	d90b      	bls.n	8008042 <_free_r+0x4e>
 800802a:	6821      	ldr	r1, [r4, #0]
 800802c:	1862      	adds	r2, r4, r1
 800802e:	4293      	cmp	r3, r2
 8008030:	bf04      	itt	eq
 8008032:	681a      	ldreq	r2, [r3, #0]
 8008034:	685b      	ldreq	r3, [r3, #4]
 8008036:	6063      	str	r3, [r4, #4]
 8008038:	bf04      	itt	eq
 800803a:	1852      	addeq	r2, r2, r1
 800803c:	6022      	streq	r2, [r4, #0]
 800803e:	602c      	str	r4, [r5, #0]
 8008040:	e7ec      	b.n	800801c <_free_r+0x28>
 8008042:	461a      	mov	r2, r3
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	b10b      	cbz	r3, 800804c <_free_r+0x58>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d9fa      	bls.n	8008042 <_free_r+0x4e>
 800804c:	6811      	ldr	r1, [r2, #0]
 800804e:	1855      	adds	r5, r2, r1
 8008050:	42a5      	cmp	r5, r4
 8008052:	d10b      	bne.n	800806c <_free_r+0x78>
 8008054:	6824      	ldr	r4, [r4, #0]
 8008056:	4421      	add	r1, r4
 8008058:	1854      	adds	r4, r2, r1
 800805a:	42a3      	cmp	r3, r4
 800805c:	6011      	str	r1, [r2, #0]
 800805e:	d1dd      	bne.n	800801c <_free_r+0x28>
 8008060:	681c      	ldr	r4, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	6053      	str	r3, [r2, #4]
 8008066:	4421      	add	r1, r4
 8008068:	6011      	str	r1, [r2, #0]
 800806a:	e7d7      	b.n	800801c <_free_r+0x28>
 800806c:	d902      	bls.n	8008074 <_free_r+0x80>
 800806e:	230c      	movs	r3, #12
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	e7d3      	b.n	800801c <_free_r+0x28>
 8008074:	6825      	ldr	r5, [r4, #0]
 8008076:	1961      	adds	r1, r4, r5
 8008078:	428b      	cmp	r3, r1
 800807a:	bf04      	itt	eq
 800807c:	6819      	ldreq	r1, [r3, #0]
 800807e:	685b      	ldreq	r3, [r3, #4]
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	bf04      	itt	eq
 8008084:	1949      	addeq	r1, r1, r5
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	6054      	str	r4, [r2, #4]
 800808a:	e7c7      	b.n	800801c <_free_r+0x28>
 800808c:	b003      	add	sp, #12
 800808e:	bd30      	pop	{r4, r5, pc}
 8008090:	200049cc 	.word	0x200049cc

08008094 <_malloc_r>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	1ccd      	adds	r5, r1, #3
 8008098:	f025 0503 	bic.w	r5, r5, #3
 800809c:	3508      	adds	r5, #8
 800809e:	2d0c      	cmp	r5, #12
 80080a0:	bf38      	it	cc
 80080a2:	250c      	movcc	r5, #12
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	4606      	mov	r6, r0
 80080a8:	db01      	blt.n	80080ae <_malloc_r+0x1a>
 80080aa:	42a9      	cmp	r1, r5
 80080ac:	d903      	bls.n	80080b6 <_malloc_r+0x22>
 80080ae:	230c      	movs	r3, #12
 80080b0:	6033      	str	r3, [r6, #0]
 80080b2:	2000      	movs	r0, #0
 80080b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080b6:	f000 f87d 	bl	80081b4 <__malloc_lock>
 80080ba:	4921      	ldr	r1, [pc, #132]	; (8008140 <_malloc_r+0xac>)
 80080bc:	680a      	ldr	r2, [r1, #0]
 80080be:	4614      	mov	r4, r2
 80080c0:	b99c      	cbnz	r4, 80080ea <_malloc_r+0x56>
 80080c2:	4f20      	ldr	r7, [pc, #128]	; (8008144 <_malloc_r+0xb0>)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	b923      	cbnz	r3, 80080d2 <_malloc_r+0x3e>
 80080c8:	4621      	mov	r1, r4
 80080ca:	4630      	mov	r0, r6
 80080cc:	f000 f862 	bl	8008194 <_sbrk_r>
 80080d0:	6038      	str	r0, [r7, #0]
 80080d2:	4629      	mov	r1, r5
 80080d4:	4630      	mov	r0, r6
 80080d6:	f000 f85d 	bl	8008194 <_sbrk_r>
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	d123      	bne.n	8008126 <_malloc_r+0x92>
 80080de:	230c      	movs	r3, #12
 80080e0:	6033      	str	r3, [r6, #0]
 80080e2:	4630      	mov	r0, r6
 80080e4:	f000 f86c 	bl	80081c0 <__malloc_unlock>
 80080e8:	e7e3      	b.n	80080b2 <_malloc_r+0x1e>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	1b5b      	subs	r3, r3, r5
 80080ee:	d417      	bmi.n	8008120 <_malloc_r+0x8c>
 80080f0:	2b0b      	cmp	r3, #11
 80080f2:	d903      	bls.n	80080fc <_malloc_r+0x68>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	441c      	add	r4, r3
 80080f8:	6025      	str	r5, [r4, #0]
 80080fa:	e004      	b.n	8008106 <_malloc_r+0x72>
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	42a2      	cmp	r2, r4
 8008100:	bf0c      	ite	eq
 8008102:	600b      	streq	r3, [r1, #0]
 8008104:	6053      	strne	r3, [r2, #4]
 8008106:	4630      	mov	r0, r6
 8008108:	f000 f85a 	bl	80081c0 <__malloc_unlock>
 800810c:	f104 000b 	add.w	r0, r4, #11
 8008110:	1d23      	adds	r3, r4, #4
 8008112:	f020 0007 	bic.w	r0, r0, #7
 8008116:	1ac2      	subs	r2, r0, r3
 8008118:	d0cc      	beq.n	80080b4 <_malloc_r+0x20>
 800811a:	1a1b      	subs	r3, r3, r0
 800811c:	50a3      	str	r3, [r4, r2]
 800811e:	e7c9      	b.n	80080b4 <_malloc_r+0x20>
 8008120:	4622      	mov	r2, r4
 8008122:	6864      	ldr	r4, [r4, #4]
 8008124:	e7cc      	b.n	80080c0 <_malloc_r+0x2c>
 8008126:	1cc4      	adds	r4, r0, #3
 8008128:	f024 0403 	bic.w	r4, r4, #3
 800812c:	42a0      	cmp	r0, r4
 800812e:	d0e3      	beq.n	80080f8 <_malloc_r+0x64>
 8008130:	1a21      	subs	r1, r4, r0
 8008132:	4630      	mov	r0, r6
 8008134:	f000 f82e 	bl	8008194 <_sbrk_r>
 8008138:	3001      	adds	r0, #1
 800813a:	d1dd      	bne.n	80080f8 <_malloc_r+0x64>
 800813c:	e7cf      	b.n	80080de <_malloc_r+0x4a>
 800813e:	bf00      	nop
 8008140:	200049cc 	.word	0x200049cc
 8008144:	200049d0 	.word	0x200049d0

08008148 <_realloc_r>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	4607      	mov	r7, r0
 800814c:	4614      	mov	r4, r2
 800814e:	460e      	mov	r6, r1
 8008150:	b921      	cbnz	r1, 800815c <_realloc_r+0x14>
 8008152:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008156:	4611      	mov	r1, r2
 8008158:	f7ff bf9c 	b.w	8008094 <_malloc_r>
 800815c:	b922      	cbnz	r2, 8008168 <_realloc_r+0x20>
 800815e:	f7ff ff49 	bl	8007ff4 <_free_r>
 8008162:	4625      	mov	r5, r4
 8008164:	4628      	mov	r0, r5
 8008166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008168:	f000 f830 	bl	80081cc <_malloc_usable_size_r>
 800816c:	42a0      	cmp	r0, r4
 800816e:	d20f      	bcs.n	8008190 <_realloc_r+0x48>
 8008170:	4621      	mov	r1, r4
 8008172:	4638      	mov	r0, r7
 8008174:	f7ff ff8e 	bl	8008094 <_malloc_r>
 8008178:	4605      	mov	r5, r0
 800817a:	2800      	cmp	r0, #0
 800817c:	d0f2      	beq.n	8008164 <_realloc_r+0x1c>
 800817e:	4631      	mov	r1, r6
 8008180:	4622      	mov	r2, r4
 8008182:	f7ff fbf7 	bl	8007974 <memcpy>
 8008186:	4631      	mov	r1, r6
 8008188:	4638      	mov	r0, r7
 800818a:	f7ff ff33 	bl	8007ff4 <_free_r>
 800818e:	e7e9      	b.n	8008164 <_realloc_r+0x1c>
 8008190:	4635      	mov	r5, r6
 8008192:	e7e7      	b.n	8008164 <_realloc_r+0x1c>

08008194 <_sbrk_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d06      	ldr	r5, [pc, #24]	; (80081b0 <_sbrk_r+0x1c>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	f7f9 ff30 	bl	8002004 <_sbrk>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_sbrk_r+0x1a>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_sbrk_r+0x1a>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	20004fac 	.word	0x20004fac

080081b4 <__malloc_lock>:
 80081b4:	4801      	ldr	r0, [pc, #4]	; (80081bc <__malloc_lock+0x8>)
 80081b6:	f000 b811 	b.w	80081dc <__retarget_lock_acquire_recursive>
 80081ba:	bf00      	nop
 80081bc:	20004fb4 	.word	0x20004fb4

080081c0 <__malloc_unlock>:
 80081c0:	4801      	ldr	r0, [pc, #4]	; (80081c8 <__malloc_unlock+0x8>)
 80081c2:	f000 b80c 	b.w	80081de <__retarget_lock_release_recursive>
 80081c6:	bf00      	nop
 80081c8:	20004fb4 	.word	0x20004fb4

080081cc <_malloc_usable_size_r>:
 80081cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d0:	1f18      	subs	r0, r3, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfbc      	itt	lt
 80081d6:	580b      	ldrlt	r3, [r1, r0]
 80081d8:	18c0      	addlt	r0, r0, r3
 80081da:	4770      	bx	lr

080081dc <__retarget_lock_acquire_recursive>:
 80081dc:	4770      	bx	lr

080081de <__retarget_lock_release_recursive>:
 80081de:	4770      	bx	lr

080081e0 <_init>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr

080081ec <_fini>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr
