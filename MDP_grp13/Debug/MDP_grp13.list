
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d784  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  0800d918  0800d918  0001d918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e518  0800e518  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e518  0800e518  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e520  0800e520  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e520  0800e520  0001e520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e524  0800e524  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800e528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000050e8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005160  20005160  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022170  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000430c  00000000  00000000  00042218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  00046528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b8  00000000  00000000  00047f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005adf  00000000  00000000  00049830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5a0  00000000  00000000  0004f30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9536  00000000  00000000  0006c8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155de5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078c4  00000000  00000000  00155e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8fc 	.word	0x0800d8fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800d8fc 	.word	0x0800d8fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prevError  = 0.0f;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->differentiator  = 0.0f;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	631a      	str	r2, [r3, #48]	; 0x30
	pid->prevMeasurement = 0.0f;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34

	pid->out = 0.0f;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement, float prePWM) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f78:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f7c:	ed87 1a00 	vstr	s2, [r7]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8000f80:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8c:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9e:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000fb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8000fc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fca:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff0:	dd04      	ble.n	8000ffc <PIDController_Update+0x90>

        pid->integrator = pid->limMaxInt;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	69da      	ldr	r2, [r3, #28]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
 8000ffa:	e00e      	b.n	800101a <PIDController_Update+0xae>

    } else if (pid->integrator < pid->limMinInt) {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	edd3 7a06 	vldr	s15, [r3, #24]
 8001008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	d503      	bpl.n	800101a <PIDController_Update+0xae>

        pid->integrator = pid->limMinInt;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + prePWM;// + pid->differentiator;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001020:	edd7 7a04 	vldr	s15, [r7, #16]
 8001024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001028:	edd7 7a00 	vldr	s15, [r7]
 800102c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    if (pid->out > pid->limMax) {
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd04      	ble.n	8001056 <PIDController_Update+0xea>

        pid->out = pid->limMax;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	639a      	str	r2, [r3, #56]	; 0x38
 8001054:	e00e      	b.n	8001074 <PIDController_Update+0x108>

    } else if (pid->out < pid->limMin) {
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106a:	d503      	bpl.n	8001074 <PIDController_Update+0x108>

        pid->out = pid->limMin;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	639a      	str	r2, [r3, #56]	; 0x38

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
    pid->prevMeasurement = measurement;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Return controller output */
    return pid->out;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001084:	ee07 3a90 	vmov	s15, r3

}
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <delay>:

/* Timer variables */
float startSec;
float currSec;

void delay(uint16_t time){  //provide us delay
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <delay+0x30>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim4) < time);
 80010aa:	bf00      	nop
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <delay+0x30>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3f9      	bcc.n	80010ac <delay+0x14>
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20004a4c 	.word	0x20004a4c
 80010cc:	00000000 	.word	0x00000000

080010d0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)		//For HCSR04_Read();
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7f1b      	ldrb	r3, [r3, #28]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f040 8083 	bne.w	80011e8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80010e2:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d11a      	bne.n	8001120 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80010ea:	2100      	movs	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f005 fddf 	bl	8006cb0 <HAL_TIM_ReadCapturedValue>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a41      	ldr	r2, [pc, #260]	; (80011fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010f6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80010f8:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a1a      	ldr	r2, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 020a 	bic.w	r2, r2, #10
 800110c:	621a      	str	r2, [r3, #32]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6a1a      	ldr	r2, [r3, #32]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0202 	orr.w	r2, r2, #2
 800111c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 800111e:	e063      	b.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d15f      	bne.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001128:	2100      	movs	r1, #0
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f005 fdc0 	bl	8006cb0 <HAL_TIM_ReadCapturedValue>
 8001130:	4603      	mov	r3, r0
 8001132:	4a33      	ldr	r2, [pc, #204]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001134:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d907      	bls.n	800115a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x130>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e00f      	b.n	800117a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d909      	bls.n	800117a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001174:	33ff      	adds	r3, #255	; 0xff
 8001176:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001178:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x134>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9c0 	bl	8000504 <__aeabi_ui2d>
 8001184:	a31a      	add	r3, pc, #104	; (adr r3, 80011f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	f7ff fa35 	bl	80005f8 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119e:	f7ff fb55 	bl	800084c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fcd5 	bl	8000b58 <__aeabi_d2uiz>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011b4:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a1a      	ldr	r2, [r3, #32]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 020a 	bic.w	r2, r2, #10
 80011ca:	621a      	str	r2, [r3, #32]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a12      	ldr	r2, [r2, #32]
 80011d6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0202 	bic.w	r2, r2, #2
 80011e6:	60da      	str	r2, [r3, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	b020c49c 	.word	0xb020c49c
 80011f4:	3fa16872 	.word	0x3fa16872
 80011f8:	200000ac 	.word	0x200000ac
 80011fc:	200000a0 	.word	0x200000a0
 8001200:	200000a4 	.word	0x200000a4
 8001204:	200000a8 	.word	0x200000a8
 8001208:	200000b0 	.word	0x200000b0
 800120c:	20004a4c 	.word	0x20004a4c

08001210 <HCSR04_Read>:

uint16_t HCSR04_Read (void)		//Read Ultrasonic Distance
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <HCSR04_Read+0x3c>)
 800121c:	f003 ff0c 	bl	8005038 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001220:	200a      	movs	r0, #10
 8001222:	f7ff ff39 	bl	8001098 <delay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <HCSR04_Read+0x3c>)
 800122e:	f003 ff03 	bl	8005038 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HCSR04_Read+0x40>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HCSR04_Read+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0202 	orr.w	r2, r2, #2
 8001240:	60da      	str	r2, [r3, #12]
	return Distance;
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <HCSR04_Read+0x44>)
 8001244:	881b      	ldrh	r3, [r3, #0]
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020c00 	.word	0x40020c00
 8001250:	20004a4c 	.word	0x20004a4c
 8001254:	200000b0 	.word	0x200000b0

08001258 <ultraDistCheck>:

void ultraDistCheck (void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	uDistCheck1 = HCSR04_Read();
 800125c:	f7ff ffd8 	bl	8001210 <HCSR04_Read>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <ultraDistCheck+0x80>)
 8001266:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f003 f83f 	bl	80042ec <HAL_Delay>
	uDistCheck2 = HCSR04_Read();
 800126e:	f7ff ffcf 	bl	8001210 <HCSR04_Read>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <ultraDistCheck+0x84>)
 8001278:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f003 f836 	bl	80042ec <HAL_Delay>
	while (abs(uDistCheck1 - uDistCheck2) >= 5) { // || uDistCheck2 - uDistCheck1 >= 5) {
 8001280:	e011      	b.n	80012a6 <ultraDistCheck+0x4e>
		uDistCheck1 = HCSR04_Read();
 8001282:	f7ff ffc5 	bl	8001210 <HCSR04_Read>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <ultraDistCheck+0x80>)
 800128c:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 800128e:	2064      	movs	r0, #100	; 0x64
 8001290:	f003 f82c 	bl	80042ec <HAL_Delay>
		uDistCheck2 = HCSR04_Read();
 8001294:	f7ff ffbc 	bl	8001210 <HCSR04_Read>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <ultraDistCheck+0x84>)
 800129e:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f003 f823 	bl	80042ec <HAL_Delay>
	while (abs(uDistCheck1 - uDistCheck2) >= 5) { // || uDistCheck2 - uDistCheck1 >= 5) {
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <ultraDistCheck+0x80>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <ultraDistCheck+0x84>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfb8      	it	lt
 80012b6:	425b      	neglt	r3, r3
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	dce2      	bgt.n	8001282 <ultraDistCheck+0x2a>
	}
	uDistFinal = (uDistCheck1 + uDistCheck2)/2;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <ultraDistCheck+0x80>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <ultraDistCheck+0x84>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	0fda      	lsrs	r2, r3, #31
 80012ca:	4413      	add	r3, r2
 80012cc:	105b      	asrs	r3, r3, #1
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <ultraDistCheck+0x88>)
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200000b2 	.word	0x200000b2
 80012dc:	200000b4 	.word	0x200000b4
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	00000000 	.word	0x00000000

080012e8 <irLeft>:

uint32_t irLeft (void) { //ADC1 (a bit more wonky)
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	adc1 = 0;
 80012ee:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <irLeft+0xd0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
	float V = 0;
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 80012fa:	4830      	ldr	r0, [pc, #192]	; (80013bc <irLeft+0xd4>)
 80012fc:	f003 f85e 	bl	80043bc <HAL_ADC_Start>
	adc1 = HAL_ADC_GetValue(&hadc1);
 8001300:	482e      	ldr	r0, [pc, #184]	; (80013bc <irLeft+0xd4>)
 8001302:	f003 f92d 	bl	8004560 <HAL_ADC_GetValue>
 8001306:	4603      	mov	r3, r0
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <irLeft+0xd0>)
 800130a:	6013      	str	r3, [r2, #0]
	V = (float)adc1/1000;
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <irLeft+0xd0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001318:	eddf 6a29 	vldr	s13, [pc, #164]	; 80013c0 <irLeft+0xd8>
 800131c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001320:	edc7 7a01 	vstr	s15, [r7, #4]

	if (V <= 0.5) V = 0.5; //cap at 80 cm
 8001324:	edd7 7a01 	vldr	s15, [r7, #4]
 8001328:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	d803      	bhi.n	800133e <irLeft+0x56>
 8001336:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	e00c      	b.n	8001358 <irLeft+0x70>
	else if (V >= 2.84) V = 2.84; //cap at 10 cm
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff f902 	bl	8000548 <__aeabi_f2d>
 8001344:	a316      	add	r3, pc, #88	; (adr r3, 80013a0 <irLeft+0xb8>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff fbdb 	bl	8000b04 <__aeabi_dcmpge>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <irLeft+0x70>
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <irLeft+0xdc>)
 8001356:	607b      	str	r3, [r7, #4]


	ir1Dist = 34.96332 * pow(V, -1.19878);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff f8f5 	bl	8000548 <__aeabi_f2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80013a8 <irLeft+0xc0>
 8001366:	ec43 2b10 	vmov	d0, r2, r3
 800136a:	f00a fe9b 	bl	800c0a4 <pow>
 800136e:	ec51 0b10 	vmov	r0, r1, d0
 8001372:	a30f      	add	r3, pc, #60	; (adr r3, 80013b0 <irLeft+0xc8>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f93e 	bl	80005f8 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fbe8 	bl	8000b58 <__aeabi_d2uiz>
 8001388:	4603      	mov	r3, r0
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <irLeft+0xe0>)
 800138c:	6013      	str	r3, [r2, #0]
	return ir1Dist;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <irLeft+0xe0>)
 8001390:	681b      	ldr	r3, [r3, #0]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	eb851eb8 	.word	0xeb851eb8
 80013a4:	4006b851 	.word	0x4006b851
 80013a8:	eff19503 	.word	0xeff19503
 80013ac:	bff32e33 	.word	0xbff32e33
 80013b0:	11dbca97 	.word	0x11dbca97
 80013b4:	40417b4e 	.word	0x40417b4e
 80013b8:	20004c28 	.word	0x20004c28
 80013bc:	20004be0 	.word	0x20004be0
 80013c0:	447a0000 	.word	0x447a0000
 80013c4:	4035c28f 	.word	0x4035c28f
 80013c8:	200000bc 	.word	0x200000bc
 80013cc:	00000000 	.word	0x00000000

080013d0 <irRight>:

uint32_t irRight (void) { //ADC2
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	adc2 = 0;
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <irRight+0xd8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
	float V = 0;
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc2);
 80013e2:	4832      	ldr	r0, [pc, #200]	; (80014ac <irRight+0xdc>)
 80013e4:	f002 ffea 	bl	80043bc <HAL_ADC_Start>
	adc2 = HAL_ADC_GetValue(&hadc2);
 80013e8:	4830      	ldr	r0, [pc, #192]	; (80014ac <irRight+0xdc>)
 80013ea:	f003 f8b9 	bl	8004560 <HAL_ADC_GetValue>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <irRight+0xd8>)
 80013f2:	6013      	str	r3, [r2, #0]
	V = (float)adc2/1000;
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <irRight+0xd8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001400:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80014b0 <irRight+0xe0>
 8001404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001408:	edc7 7a01 	vstr	s15, [r7, #4]

	if (V <= 0.42) V = 0.44; //cap at 80 cm
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	a31d      	add	r3, pc, #116	; (adr r3, 8001488 <irRight+0xb8>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fb6a 	bl	8000af0 <__aeabi_dcmple>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <irRight+0x58>
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <irRight+0xe4>)
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	e00c      	b.n	8001442 <irRight+0x72>
	else if (V >= 2.9) V = 2.95; //cap at 10 cm
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	a318      	add	r3, pc, #96	; (adr r3, 8001490 <irRight+0xc0>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff fb66 	bl	8000b04 <__aeabi_dcmpge>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <irRight+0x72>
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <irRight+0xe8>)
 8001440:	607b      	str	r3, [r7, #4]


	ir2Dist = 32.6167 * pow(V, -1.0928);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff f880 	bl	8000548 <__aeabi_f2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001498 <irRight+0xc8>
 8001450:	ec43 2b10 	vmov	d0, r2, r3
 8001454:	f00a fe26 	bl	800c0a4 <pow>
 8001458:	ec51 0b10 	vmov	r0, r1, d0
 800145c:	a310      	add	r3, pc, #64	; (adr r3, 80014a0 <irRight+0xd0>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f8c9 	bl	80005f8 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb73 	bl	8000b58 <__aeabi_d2uiz>
 8001472:	4603      	mov	r3, r0
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <irRight+0xec>)
 8001476:	6013      	str	r3, [r2, #0]
	return ir2Dist;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <irRight+0xec>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	ae147ae1 	.word	0xae147ae1
 800148c:	3fdae147 	.word	0x3fdae147
 8001490:	33333333 	.word	0x33333333
 8001494:	40073333 	.word	0x40073333
 8001498:	da5119ce 	.word	0xda5119ce
 800149c:	bff17c1b 	.word	0xbff17c1b
 80014a0:	068db8bb 	.word	0x068db8bb
 80014a4:	40404ef0 	.word	0x40404ef0
 80014a8:	20004c98 	.word	0x20004c98
 80014ac:	20004adc 	.word	0x20004adc
 80014b0:	447a0000 	.word	0x447a0000
 80014b4:	3ee147ae 	.word	0x3ee147ae
 80014b8:	403ccccd 	.word	0x403ccccd
 80014bc:	200000c0 	.word	0x200000c0

080014c0 <waitCmd>:

void waitCmd (void) {	//not complete
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK",2);
	while (*aRxBuffer == 'Z') {
 80014c4:	e007      	b.n	80014d6 <waitCmd+0x16>
		//HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK",2);
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	4906      	ldr	r1, [pc, #24]	; (80014e4 <waitCmd+0x24>)
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <waitCmd+0x28>)
 80014cc:	f006 fa9c 	bl	8007a08 <HAL_UART_Receive_IT>
		HAL_Delay(100);
 80014d0:	2064      	movs	r0, #100	; 0x64
 80014d2:	f002 ff0b 	bl	80042ec <HAL_Delay>
	while (*aRxBuffer == 'Z') {
 80014d6:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <waitCmd+0x24>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b5a      	cmp	r3, #90	; 0x5a
 80014dc:	d0f3      	beq.n	80014c6 <waitCmd+0x6>
	}
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20004c9c 	.word	0x20004c9c
 80014e8:	20004a94 	.word	0x20004a94

080014ec <preCorr>:
		}
	}

}

void preCorr(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
		while(uDistFinal>15 && uDistFinal<40){
 80014f0:	e01f      	b.n	8001532 <preCorr+0x46>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	2108      	movs	r1, #8
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <preCorr+0x6c>)
 80014f8:	f003 fd9e 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2104      	movs	r1, #4
 8001500:	4815      	ldr	r0, [pc, #84]	; (8001558 <preCorr+0x6c>)
 8001502:	f003 fd99 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2110      	movs	r1, #16
 800150a:	4813      	ldr	r0, [pc, #76]	; (8001558 <preCorr+0x6c>)
 800150c:	f003 fd94 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2120      	movs	r1, #32
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <preCorr+0x6c>)
 8001516:	f003 fd8f 	bl	8005038 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <preCorr+0x70>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 600);
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <preCorr+0x70>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 7216 	mov.w	r2, #600	; 0x258
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
			ultraDistCheck();
 800152e:	f7ff fe93 	bl	8001258 <ultraDistCheck>
		while(uDistFinal>15 && uDistFinal<40){
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <preCorr+0x74>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	dd03      	ble.n	8001542 <preCorr+0x56>
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <preCorr+0x74>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b27      	cmp	r3, #39	; 0x27
 8001540:	ddd7      	ble.n	80014f2 <preCorr+0x6>
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <preCorr+0x70>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <preCorr+0x70>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40020000 	.word	0x40020000
 800155c:	20004a04 	.word	0x20004a04
 8001560:	200000b8 	.word	0x200000b8

08001564 <corrMotor>:

void corrMotor(int mode){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if(mode==1){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d131      	bne.n	80015d6 <corrMotor+0x72>
		while(uDistFinal>22 || uDistFinal>40){
 8001572:	e01f      	b.n	80015b4 <corrMotor+0x50>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2108      	movs	r1, #8
 8001578:	4831      	ldr	r0, [pc, #196]	; (8001640 <corrMotor+0xdc>)
 800157a:	f003 fd5d 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2104      	movs	r1, #4
 8001582:	482f      	ldr	r0, [pc, #188]	; (8001640 <corrMotor+0xdc>)
 8001584:	f003 fd58 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2110      	movs	r1, #16
 800158c:	482c      	ldr	r0, [pc, #176]	; (8001640 <corrMotor+0xdc>)
 800158e:	f003 fd53 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2120      	movs	r1, #32
 8001596:	482a      	ldr	r0, [pc, #168]	; (8001640 <corrMotor+0xdc>)
 8001598:	f003 fd4e 	bl	8005038 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <corrMotor+0xe0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 600);
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <corrMotor+0xe0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
			ultraDistCheck();
 80015b0:	f7ff fe52 	bl	8001258 <ultraDistCheck>
		while(uDistFinal>22 || uDistFinal>40){
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <corrMotor+0xe4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b16      	cmp	r3, #22
 80015ba:	dcdb      	bgt.n	8001574 <corrMotor+0x10>
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <corrMotor+0xe4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b28      	cmp	r3, #40	; 0x28
 80015c2:	dcd7      	bgt.n	8001574 <corrMotor+0x10>

		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <corrMotor+0xe0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <corrMotor+0xe0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
			ultraDistCheck();
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
	}
}
 80015d4:	e02f      	b.n	8001636 <corrMotor+0xd2>
	else if(mode==2){
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d12c      	bne.n	8001636 <corrMotor+0xd2>
		while(uDistFinal<24){
 80015dc:	e01f      	b.n	800161e <corrMotor+0xba>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2108      	movs	r1, #8
 80015e2:	4817      	ldr	r0, [pc, #92]	; (8001640 <corrMotor+0xdc>)
 80015e4:	f003 fd28 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2104      	movs	r1, #4
 80015ec:	4814      	ldr	r0, [pc, #80]	; (8001640 <corrMotor+0xdc>)
 80015ee:	f003 fd23 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2110      	movs	r1, #16
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <corrMotor+0xdc>)
 80015f8:	f003 fd1e 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2120      	movs	r1, #32
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <corrMotor+0xdc>)
 8001602:	f003 fd19 	bl	8005038 <HAL_GPIO_WritePin>
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <corrMotor+0xe0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 600);
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <corrMotor+0xe0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
			ultraDistCheck();
 800161a:	f7ff fe1d 	bl	8001258 <ultraDistCheck>
		while(uDistFinal<24){
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <corrMotor+0xe4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b17      	cmp	r3, #23
 8001624:	dddb      	ble.n	80015de <corrMotor+0x7a>
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <corrMotor+0xe0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <corrMotor+0xe0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40020000 	.word	0x40020000
 8001644:	20004a04 	.word	0x20004a04
 8001648:	200000b8 	.word	0x200000b8
 800164c:	00000000 	.word	0x00000000

08001650 <correction>:

void correction(){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	*aRxBuffer = 'Z';
 8001656:	4b94      	ldr	r3, [pc, #592]	; (80018a8 <correction+0x258>)
 8001658:	225a      	movs	r2, #90	; 0x5a
 800165a:	701a      	strb	r2, [r3, #0]
	irLeft();
 800165c:	f7ff fe44 	bl	80012e8 <irLeft>
	irRight();
 8001660:	f7ff feb6 	bl	80013d0 <irRight>
	ultraDistCheck();
 8001664:	f7ff fdf8 	bl	8001258 <ultraDistCheck>
	if(uDistFinal>40){
 8001668:	4b90      	ldr	r3, [pc, #576]	; (80018ac <correction+0x25c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b28      	cmp	r3, #40	; 0x28
 800166e:	dd20      	ble.n	80016b2 <correction+0x62>
		while(irLeft()<=35 && irRight()<=35){
 8001670:	e00d      	b.n	800168e <correction+0x3e>
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 600);
 8001672:	4b8f      	ldr	r3, [pc, #572]	; (80018b0 <correction+0x260>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f44f 7216 	mov.w	r2, #600	; 0x258
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 600);
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <correction+0x260>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
			irLeft();
 8001686:	f7ff fe2f 	bl	80012e8 <irLeft>
			irRight();
 800168a:	f7ff fea1 	bl	80013d0 <irRight>
		while(irLeft()<=35 && irRight()<=35){
 800168e:	f7ff fe2b 	bl	80012e8 <irLeft>
 8001692:	4603      	mov	r3, r0
 8001694:	2b23      	cmp	r3, #35	; 0x23
 8001696:	d804      	bhi.n	80016a2 <correction+0x52>
 8001698:	f7ff fe9a 	bl	80013d0 <irRight>
 800169c:	4603      	mov	r3, r0
 800169e:	2b23      	cmp	r3, #35	; 0x23
 80016a0:	d9e7      	bls.n	8001672 <correction+0x22>
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80016a2:	4b83      	ldr	r3, [pc, #524]	; (80018b0 <correction+0x260>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 80016aa:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <correction+0x260>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	int mode = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
	if(irLeft()<=35 || irRight()<=35){
 80016b6:	f7ff fe17 	bl	80012e8 <irLeft>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b23      	cmp	r3, #35	; 0x23
 80016be:	d904      	bls.n	80016ca <correction+0x7a>
 80016c0:	f7ff fe86 	bl	80013d0 <irRight>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b23      	cmp	r3, #35	; 0x23
 80016c8:	d808      	bhi.n	80016dc <correction+0x8c>
		if(irLeft<irRight)mode =1;
 80016ca:	4a7a      	ldr	r2, [pc, #488]	; (80018b4 <correction+0x264>)
 80016cc:	4b7a      	ldr	r3, [pc, #488]	; (80018b8 <correction+0x268>)
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d202      	bcs.n	80016d8 <correction+0x88>
 80016d2:	2301      	movs	r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	e001      	b.n	80016dc <correction+0x8c>
		else mode=2;
 80016d8:	2302      	movs	r3, #2
 80016da:	607b      	str	r3, [r7, #4]
	}
	if(mode==1){
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d15b      	bne.n	800179a <correction+0x14a>
		preCorr();
 80016e2:	f7ff ff03 	bl	80014ec <preCorr>
		while(irLeft()<=35){
 80016e6:	e04e      	b.n	8001786 <correction+0x136>
			htim1.Instance->CCR4 = RIGHT;
 80016e8:	4b74      	ldr	r3, [pc, #464]	; (80018bc <correction+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	22e3      	movs	r2, #227	; 0xe3
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80016f0:	2064      	movs	r0, #100	; 0x64
 80016f2:	f002 fdfb 	bl	80042ec <HAL_Delay>
			motorCont(1000, 1000, 'R', 'R', 1);
 80016f6:	ed9f 0b68 	vldr	d0, [pc, #416]	; 8001898 <correction+0x248>
 80016fa:	2352      	movs	r3, #82	; 0x52
 80016fc:	2252      	movs	r2, #82	; 0x52
 80016fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001706:	f000 fdaf 	bl	8002268 <motorCont>
			htim1.Instance->CCR4 = LEFT;
 800170a:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <correction+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	226c      	movs	r2, #108	; 0x6c
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8001712:	2064      	movs	r0, #100	; 0x64
 8001714:	f002 fdea 	bl	80042ec <HAL_Delay>
			motorCont(1000, 1000, 'F', 'F', 1);
 8001718:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8001898 <correction+0x248>
 800171c:	2346      	movs	r3, #70	; 0x46
 800171e:	2246      	movs	r2, #70	; 0x46
 8001720:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001728:	f000 fd9e 	bl	8002268 <motorCont>
			irLeft();
 800172c:	f7ff fddc 	bl	80012e8 <irLeft>
			htim1.Instance->CCR4 = CENTER;
 8001730:	4b62      	ldr	r3, [pc, #392]	; (80018bc <correction+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2295      	movs	r2, #149	; 0x95
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(50);
 8001738:	2032      	movs	r0, #50	; 0x32
 800173a:	f002 fdd7 	bl	80042ec <HAL_Delay>
			ultraDistCheck();
 800173e:	f7ff fd8b 	bl	8001258 <ultraDistCheck>
			if(uDistFinal<15){
 8001742:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <correction+0x25c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b0e      	cmp	r3, #14
 8001748:	dc0b      	bgt.n	8001762 <correction+0x112>
				motorCont(1000, 1000, 'R', 'R', 2);
 800174a:	ed9f 0b55 	vldr	d0, [pc, #340]	; 80018a0 <correction+0x250>
 800174e:	2352      	movs	r3, #82	; 0x52
 8001750:	2252      	movs	r2, #82	; 0x52
 8001752:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175a:	f000 fd85 	bl	8002268 <motorCont>
				ultraDistCheck();
 800175e:	f7ff fd7b 	bl	8001258 <ultraDistCheck>
			}
			if(uDistFinal>15 && uDistFinal<40){
 8001762:	4b52      	ldr	r3, [pc, #328]	; (80018ac <correction+0x25c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	dd0d      	ble.n	8001786 <correction+0x136>
 800176a:	4b50      	ldr	r3, [pc, #320]	; (80018ac <correction+0x25c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b27      	cmp	r3, #39	; 0x27
 8001770:	dc09      	bgt.n	8001786 <correction+0x136>
				motorCont(1000, 1000, 'F', 'F', 2);
 8001772:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80018a0 <correction+0x250>
 8001776:	2346      	movs	r3, #70	; 0x46
 8001778:	2246      	movs	r2, #70	; 0x46
 800177a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800177e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001782:	f000 fd71 	bl	8002268 <motorCont>
		while(irLeft()<=35){
 8001786:	f7ff fdaf 	bl	80012e8 <irLeft>
 800178a:	4603      	mov	r3, r0
 800178c:	2b23      	cmp	r3, #35	; 0x23
 800178e:	d9ab      	bls.n	80016e8 <correction+0x98>
			}
		}
		htim1.Instance->CCR4 = CENTER;
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <correction+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2295      	movs	r2, #149	; 0x95
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
 8001798:	e060      	b.n	800185c <correction+0x20c>
	}
	else if(mode==2){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d15d      	bne.n	800185c <correction+0x20c>
		preCorr();
 80017a0:	f7ff fea4 	bl	80014ec <preCorr>
		while(irRight()<=35){
 80017a4:	e04e      	b.n	8001844 <correction+0x1f4>
			htim1.Instance->CCR4 =LEFT;
 80017a6:	4b45      	ldr	r3, [pc, #276]	; (80018bc <correction+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	226c      	movs	r2, #108	; 0x6c
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40

			HAL_Delay(100);
 80017ae:	2064      	movs	r0, #100	; 0x64
 80017b0:	f002 fd9c 	bl	80042ec <HAL_Delay>
			motorCont(1000, 1000, 'R', 'R', 1);
 80017b4:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8001898 <correction+0x248>
 80017b8:	2352      	movs	r3, #82	; 0x52
 80017ba:	2252      	movs	r2, #82	; 0x52
 80017bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c4:	f000 fd50 	bl	8002268 <motorCont>
			htim1.Instance->CCR4 = RIGHT;
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <correction+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	22e3      	movs	r2, #227	; 0xe3
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80017d0:	2064      	movs	r0, #100	; 0x64
 80017d2:	f002 fd8b 	bl	80042ec <HAL_Delay>
			motorCont(1000, 1000, 'F', 'F', 1);
 80017d6:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8001898 <correction+0x248>
 80017da:	2346      	movs	r3, #70	; 0x46
 80017dc:	2246      	movs	r2, #70	; 0x46
 80017de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e6:	f000 fd3f 	bl	8002268 <motorCont>
			irRight();
 80017ea:	f7ff fdf1 	bl	80013d0 <irRight>
			htim1.Instance->CCR4 = CENTER;
 80017ee:	4b33      	ldr	r3, [pc, #204]	; (80018bc <correction+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2295      	movs	r2, #149	; 0x95
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(50);
 80017f6:	2032      	movs	r0, #50	; 0x32
 80017f8:	f002 fd78 	bl	80042ec <HAL_Delay>
			ultraDistCheck();
 80017fc:	f7ff fd2c 	bl	8001258 <ultraDistCheck>
			if(uDistFinal<15){
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <correction+0x25c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b0e      	cmp	r3, #14
 8001806:	dc0b      	bgt.n	8001820 <correction+0x1d0>
				motorCont(1000, 1000, 'R', 'R', 2);
 8001808:	ed9f 0b25 	vldr	d0, [pc, #148]	; 80018a0 <correction+0x250>
 800180c:	2352      	movs	r3, #82	; 0x52
 800180e:	2252      	movs	r2, #82	; 0x52
 8001810:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001818:	f000 fd26 	bl	8002268 <motorCont>
				ultraDistCheck();
 800181c:	f7ff fd1c 	bl	8001258 <ultraDistCheck>
			}
			if(uDistFinal>15 && uDistFinal<40){
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <correction+0x25c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	dd0d      	ble.n	8001844 <correction+0x1f4>
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <correction+0x25c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b27      	cmp	r3, #39	; 0x27
 800182e:	dc09      	bgt.n	8001844 <correction+0x1f4>
				motorCont(1000, 1000, 'F', 'F', 2);
 8001830:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80018a0 <correction+0x250>
 8001834:	2346      	movs	r3, #70	; 0x46
 8001836:	2246      	movs	r2, #70	; 0x46
 8001838:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800183c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001840:	f000 fd12 	bl	8002268 <motorCont>
		while(irRight()<=35){
 8001844:	f7ff fdc4 	bl	80013d0 <irRight>
 8001848:	4603      	mov	r3, r0
 800184a:	2b23      	cmp	r3, #35	; 0x23
 800184c:	d9ab      	bls.n	80017a6 <correction+0x156>
			}
		}
		htim1.Instance->CCR4 = CENTER;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <correction+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2295      	movs	r2, #149	; 0x95
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(50);
 8001856:	2032      	movs	r0, #50	; 0x32
 8001858:	f002 fd48 	bl	80042ec <HAL_Delay>
	}
	HAL_Delay(1000);
 800185c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001860:	f002 fd44 	bl	80042ec <HAL_Delay>
	if(uDistFinal>23 && uDistFinal<40){//Forward until 25
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <correction+0x25c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b17      	cmp	r3, #23
 800186a:	dd07      	ble.n	800187c <correction+0x22c>
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <correction+0x25c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b27      	cmp	r3, #39	; 0x27
 8001872:	dc03      	bgt.n	800187c <correction+0x22c>
		corrMotor(1);
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff fe75 	bl	8001564 <corrMotor>
	}
	else if(uDistFinal<23){
		corrMotor(2);
	}
}
 800187a:	e006      	b.n	800188a <correction+0x23a>
	else if(uDistFinal<23){
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <correction+0x25c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b16      	cmp	r3, #22
 8001882:	dc02      	bgt.n	800188a <correction+0x23a>
		corrMotor(2);
 8001884:	2002      	movs	r0, #2
 8001886:	f7ff fe6d 	bl	8001564 <corrMotor>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	f3af 8000 	nop.w
 8001898:	00000000 	.word	0x00000000
 800189c:	3ff00000 	.word	0x3ff00000
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40000000 	.word	0x40000000
 80018a8:	20004c9c 	.word	0x20004c9c
 80018ac:	200000b8 	.word	0x200000b8
 80018b0:	20004a04 	.word	0x20004a04
 80018b4:	080012e9 	.word	0x080012e9
 80018b8:	080013d1 	.word	0x080013d1
 80018bc:	20004c50 	.word	0x20004c50

080018c0 <motorSpeed>:


void motorSpeed(float left, float right){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80018ca:	edc7 0a00 	vstr	s1, [r7]
	if(left<0){
 80018ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d510      	bpl.n	80018fe <motorSpeed+0x3e>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	2108      	movs	r1, #8
 80018e0:	482f      	ldr	r0, [pc, #188]	; (80019a0 <motorSpeed+0xe0>)
 80018e2:	f003 fba9 	bl	8005038 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2104      	movs	r1, #4
 80018ea:	482d      	ldr	r0, [pc, #180]	; (80019a0 <motorSpeed+0xe0>)
 80018ec:	f003 fba4 	bl	8005038 <HAL_GPIO_WritePin>
		left = fabs(left);
 80018f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f4:	eef0 7ae7 	vabs.f32	s15, s15
 80018f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80018fc:	e010      	b.n	8001920 <motorSpeed+0x60>
	}
	else if(left>0){
 80018fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	dd09      	ble.n	8001920 <motorSpeed+0x60>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	2108      	movs	r1, #8
 8001910:	4823      	ldr	r0, [pc, #140]	; (80019a0 <motorSpeed+0xe0>)
 8001912:	f003 fb91 	bl	8005038 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2104      	movs	r1, #4
 800191a:	4821      	ldr	r0, [pc, #132]	; (80019a0 <motorSpeed+0xe0>)
 800191c:	f003 fb8c 	bl	8005038 <HAL_GPIO_WritePin>
	}
	if(right<0){
 8001920:	edd7 7a00 	vldr	s15, [r7]
 8001924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	d510      	bpl.n	8001950 <motorSpeed+0x90>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2110      	movs	r1, #16
 8001932:	481b      	ldr	r0, [pc, #108]	; (80019a0 <motorSpeed+0xe0>)
 8001934:	f003 fb80 	bl	8005038 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	2120      	movs	r1, #32
 800193c:	4818      	ldr	r0, [pc, #96]	; (80019a0 <motorSpeed+0xe0>)
 800193e:	f003 fb7b 	bl	8005038 <HAL_GPIO_WritePin>
		right = fabs(right);
 8001942:	edd7 7a00 	vldr	s15, [r7]
 8001946:	eef0 7ae7 	vabs.f32	s15, s15
 800194a:	edc7 7a00 	vstr	s15, [r7]
 800194e:	e010      	b.n	8001972 <motorSpeed+0xb2>
	}
	else if(right>0){
 8001950:	edd7 7a00 	vldr	s15, [r7]
 8001954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	dd09      	ble.n	8001972 <motorSpeed+0xb2>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2110      	movs	r1, #16
 8001962:	480f      	ldr	r0, [pc, #60]	; (80019a0 <motorSpeed+0xe0>)
 8001964:	f003 fb68 	bl	8005038 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2120      	movs	r1, #32
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <motorSpeed+0xe0>)
 800196e:	f003 fb63 	bl	8005038 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left);
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <motorSpeed+0xe4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	edd7 7a01 	vldr	s15, [r7, #4]
 800197a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800197e:	ee17 2a90 	vmov	r2, s15
 8001982:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right);
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <motorSpeed+0xe4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	edd7 7a00 	vldr	s15, [r7]
 800198c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001990:	ee17 2a90 	vmov	r2, s15
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40020000 	.word	0x40020000
 80019a4:	20004a04 	.word	0x20004a04

080019a8 <readEncoder>:

/* ========================= PID Functions ========================= */

/* Read current encoder values */
void readEncoder(){ //Forward = Positive, Backwards = negative
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
	currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <readEncoder+0x60>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <readEncoder+0x64>)
 80019b6:	801a      	strh	r2, [r3, #0]
	fLeft = currentLeft *-1*CMPERREV;
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <readEncoder+0x64>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	425b      	negs	r3, r3
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001a10 <readEncoder+0x68>
 80019cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <readEncoder+0x6c>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]

	currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <readEncoder+0x70>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	b21a      	sxth	r2, r3
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <readEncoder+0x74>)
 80019e0:	801a      	strh	r2, [r3, #0]
	fRight = currentRight * CMPERREV;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <readEncoder+0x74>)
 80019e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a10 <readEncoder+0x68>
 80019f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <readEncoder+0x78>)
 80019fa:	edc3 7a00 	vstr	s15, [r3]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20004ca4 	.word	0x20004ca4
 8001a0c:	20004b28 	.word	0x20004b28
 8001a10:	3c5844d0 	.word	0x3c5844d0
 8001a14:	20004cec 	.word	0x20004cec
 8001a18:	20004b94 	.word	0x20004b94
 8001a1c:	20004c4c 	.word	0x20004c4c
 8001a20:	20004b90 	.word	0x20004b90

08001a24 <getTime>:

/* Time value functions, in seconds with decimals */
float getTime(){
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)/1e6f;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <getTime+0x2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a36:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a54 <getTime+0x30>
 8001a3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a3e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a42:	eeb0 0a67 	vmov.f32	s0, s15
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20004b48 	.word	0x20004b48
 8001a54:	49742400 	.word	0x49742400

08001a58 <timeStart>:

void timeStart(){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	startSec = getTime();
 8001a5c:	f7ff ffe2 	bl	8001a24 <getTime>
 8001a60:	eef0 7a40 	vmov.f32	s15, s0
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <timeStart+0x18>)
 8001a66:	edc3 7a00 	vstr	s15, [r3]
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200049fc 	.word	0x200049fc

08001a74 <timeNow>:

float timeNow(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	currSec = getTime() - startSec;
 8001a78:	f7ff ffd4 	bl	8001a24 <getTime>
 8001a7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <timeNow+0x2c>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <timeNow+0x30>)
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
	return currSec;
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <timeNow+0x30>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	ee07 3a90 	vmov	s15, r3
}
 8001a98:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200049fc 	.word	0x200049fc
 8001aa4:	20004ad8 	.word	0x20004ad8

08001aa8 <forwardFeed>:

float forwardFeed(float vel){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0a01 	vstr	s0, [r7, #4]
	return vel*PWMM+PWMC;
 8001ab2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ad4 <forwardFeed+0x2c>
 8001aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ad8 <forwardFeed+0x30>
 8001ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	42580000 	.word	0x42580000
 8001ad8:	439b0000 	.word	0x439b0000

08001adc <PIDmotor>:

/* Master function for motor with PID control */
void PIDmotor(float setDist){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0c0      	sub	sp, #256	; 0x100
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Turn servo to extreme end before centering for higher accuracy */
	htim1.Instance->CCR4 = LEFT;
 8001ae6:	4b9e      	ldr	r3, [pc, #632]	; (8001d60 <PIDmotor+0x284>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	226c      	movs	r2, #108	; 0x6c
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(500);
 8001aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af2:	f002 fbfb 	bl	80042ec <HAL_Delay>
	htim1.Instance->CCR4 = CENTER+3;
 8001af6:	4b9a      	ldr	r3, [pc, #616]	; (8001d60 <PIDmotor+0x284>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2298      	movs	r2, #152	; 0x98
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(500);
 8001afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b02:	f002 fbf3 	bl	80042ec <HAL_Delay>

	/* Set UARTBuffer to default value */
	*aRxBuffer = 'Z';
 8001b06:	4b97      	ldr	r3, [pc, #604]	; (8001d64 <PIDmotor+0x288>)
 8001b08:	225a      	movs	r2, #90	; 0x5a
 8001b0a:	701a      	strb	r2, [r3, #0]

	/* Set distance of motors */
	float setDistLeft  = setDist;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float setDistRight = setDist;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	/* Initialise PID Controllers */
	PIDController pidLeft = {PID_KP,PID_KI,PID_KD,0,-3000,3000,-150,150,prePWMLeft,1.0f};
 8001b18:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b1c:	223c      	movs	r2, #60	; 0x3c
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f009 fe45 	bl	800b7b0 <memset>
 8001b26:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <PIDmotor+0x28c>)
 8001b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b2c:	4b8f      	ldr	r3, [pc, #572]	; (8001d6c <PIDmotor+0x290>)
 8001b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b32:	4b8f      	ldr	r3, [pc, #572]	; (8001d70 <PIDmotor+0x294>)
 8001b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b38:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <PIDmotor+0x298>)
 8001b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b3e:	4b8e      	ldr	r3, [pc, #568]	; (8001d78 <PIDmotor+0x29c>)
 8001b40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b44:	4b8d      	ldr	r3, [pc, #564]	; (8001d7c <PIDmotor+0x2a0>)
 8001b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b4a:	4b8d      	ldr	r3, [pc, #564]	; (8001d80 <PIDmotor+0x2a4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	PIDController pidRight ={PID_KP,PID_KI,PID_KD,0,-3000,3000,-150,150,prePWMRight,1.0f};
 8001b5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b5e:	223c      	movs	r2, #60	; 0x3c
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f009 fe24 	bl	800b7b0 <memset>
 8001b68:	4b7f      	ldr	r3, [pc, #508]	; (8001d68 <PIDmotor+0x28c>)
 8001b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b6c:	4b7f      	ldr	r3, [pc, #508]	; (8001d6c <PIDmotor+0x290>)
 8001b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b72:	4b7f      	ldr	r3, [pc, #508]	; (8001d70 <PIDmotor+0x294>)
 8001b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b78:	4b7e      	ldr	r3, [pc, #504]	; (8001d74 <PIDmotor+0x298>)
 8001b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b7e:	4b7e      	ldr	r3, [pc, #504]	; (8001d78 <PIDmotor+0x29c>)
 8001b80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b84:	4b7d      	ldr	r3, [pc, #500]	; (8001d7c <PIDmotor+0x2a0>)
 8001b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b8a:	4b7e      	ldr	r3, [pc, #504]	; (8001d84 <PIDmotor+0x2a8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	Profile profileLeft;
	Profile profileRight;

	/* Initialise and set Encoder to 0 */
	HAL_TIM_Base_Start(&htim5);
 8001b9a:	487b      	ldr	r0, [pc, #492]	; (8001d88 <PIDmotor+0x2ac>)
 8001b9c:	f004 f92e 	bl	8005dfc <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8001ba0:	213c      	movs	r1, #60	; 0x3c
 8001ba2:	487a      	ldr	r0, [pc, #488]	; (8001d8c <PIDmotor+0x2b0>)
 8001ba4:	f004 fcc8 	bl	8006538 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001ba8:	213c      	movs	r1, #60	; 0x3c
 8001baa:	4879      	ldr	r0, [pc, #484]	; (8001d90 <PIDmotor+0x2b4>)
 8001bac:	f004 fcc4 	bl	8006538 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001bb0:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <PIDmotor+0x2b0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001bb8:	4b75      	ldr	r3, [pc, #468]	; (8001d90 <PIDmotor+0x2b4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

	/* Initialise PID controllers and profiles */
	PIDController_Init(&pidLeft);
 8001bc0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f9b3 	bl	8000f30 <PIDController_Init>
	PIDController_Init(&pidRight);
 8001bca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9ae 	bl	8000f30 <PIDController_Init>

	Profile_Init(&profileLeft);
 8001bd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fc8c 	bl	80034f6 <Profile_Init>
	Profile_Init(&profileRight);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fc87 	bl	80034f6 <Profile_Init>
	float time = trapezoidal(&profileLeft, setDistLeft, AMAX, VMAX);
 8001be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bec:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8001bf0:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8001bf4:	ed97 0a3f 	vldr	s0, [r7, #252]	; 0xfc
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fcb9 	bl	8003570 <trapezoidal>
 8001bfe:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
	trapezoidal(&profileRight, setDistRight, AMAX, VMAX);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8001c0a:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8001c0e:	ed97 0a3e 	vldr	s0, [r7, #248]	; 0xf8
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 fcac 	bl	8003570 <trapezoidal>
	constDisp = profileRight.constDisp;
 8001c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1a:	4a5e      	ldr	r2, [pc, #376]	; (8001d94 <PIDmotor+0x2b8>)
 8001c1c:	6013      	str	r3, [r2, #0]

	timeStart();
 8001c1e:	f7ff ff1b 	bl	8001a58 <timeStart>
	while(timeNow()<time){
 8001c22:	e07e      	b.n	8001d22 <PIDmotor+0x246>

		/* Take current encoder values */
		readEncoder();
 8001c24:	f7ff fec0 	bl	80019a8 <readEncoder>
		currProfile(&profileLeft, currSec);
 8001c28:	4b5b      	ldr	r3, [pc, #364]	; (8001d98 <PIDmotor+0x2bc>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c32:	eeb0 0a67 	vmov.f32	s0, s15
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 fdb8 	bl	80037ac <currProfile>
		currProfile(&profileRight, currSec);
 8001c3c:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <PIDmotor+0x2bc>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fdae 	bl	80037ac <currProfile>

		/* Calculate feed forward of motors */
		prePWMLeft=forwardFeed(profileLeft.currVel);
 8001c50:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	f7ff ff26 	bl	8001aa8 <forwardFeed>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <PIDmotor+0x2a4>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
		prePWMRight=forwardFeed(profileRight.currVel);
 8001c66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	f7ff ff1b 	bl	8001aa8 <forwardFeed>
 8001c72:	eef0 7a40 	vmov.f32	s15, s0
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <PIDmotor+0x2a8>)
 8001c78:	edc3 7a00 	vstr	s15, [r3]

		/* For debug purposes */
		distanceLeft = profileLeft.disp;
 8001c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c7e:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <PIDmotor+0x2c0>)
 8001c80:	6013      	str	r3, [r2, #0]
		distanceRight = profileRight.disp;
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	4a46      	ldr	r2, [pc, #280]	; (8001da0 <PIDmotor+0x2c4>)
 8001c86:	6013      	str	r3, [r2, #0]
		acc = profileLeft.currAcc;
 8001c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c8a:	4a46      	ldr	r2, [pc, #280]	; (8001da4 <PIDmotor+0x2c8>)
 8001c8c:	6013      	str	r3, [r2, #0]
		vel = profileRight.currVel;
 8001c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c90:	4a45      	ldr	r2, [pc, #276]	; (8001da8 <PIDmotor+0x2cc>)
 8001c92:	6013      	str	r3, [r2, #0]
		disp = profileLeft.currDisp;
 8001c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c96:	4a45      	ldr	r2, [pc, #276]	; (8001dac <PIDmotor+0x2d0>)
 8001c98:	6013      	str	r3, [r2, #0]

		/* Compute new control signal */
		outLeft = PIDController_Update(&pidLeft, profileLeft.currDisp, fLeft, prePWMLeft);
 8001c9a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <PIDmotor+0x2d4>)
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <PIDmotor+0x2a4>)
 8001ca6:	edd3 6a00 	vldr	s13, [r3]
 8001caa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cae:	eeb0 1a66 	vmov.f32	s2, s13
 8001cb2:	eef0 0a47 	vmov.f32	s1, s14
 8001cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f956 	bl	8000f6c <PIDController_Update>
 8001cc0:	eef0 7a40 	vmov.f32	s15, s0
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <PIDmotor+0x2d8>)
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		outRight = PIDController_Update(&pidRight, profileRight.currDisp, fRight, prePWMRight);
 8001cca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <PIDmotor+0x2dc>)
 8001cd0:	ed93 7a00 	vldr	s14, [r3]
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <PIDmotor+0x2a8>)
 8001cd6:	edd3 6a00 	vldr	s13, [r3]
 8001cda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cde:	eeb0 1a66 	vmov.f32	s2, s13
 8001ce2:	eef0 0a47 	vmov.f32	s1, s14
 8001ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f93e 	bl	8000f6c <PIDController_Update>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <PIDmotor+0x2e0>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]

		/* Update new values to motors */
		motorSpeed(outLeft, outRight);
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <PIDmotor+0x2d8>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <PIDmotor+0x2e0>)
 8001d02:	ed93 7a00 	vldr	s14, [r3]
 8001d06:	eef0 0a47 	vmov.f32	s1, s14
 8001d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0e:	f7ff fdd7 	bl	80018c0 <motorSpeed>
		errorLeft = pidLeft.prevError;
 8001d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d16:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <PIDmotor+0x2e4>)
 8001d18:	6013      	str	r3, [r2, #0]
		errorRight = pidRight.prevError;
 8001d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d1e:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <PIDmotor+0x2e8>)
 8001d20:	6013      	str	r3, [r2, #0]
	while(timeNow()<time){
 8001d22:	f7ff fea7 	bl	8001a74 <timeNow>
 8001d26:	eeb0 7a40 	vmov.f32	s14, s0
 8001d2a:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	f73f af75 	bgt.w	8001c24 <PIDmotor+0x148>
	}

	/* Stop Motor */
	motorSpeed(0,0);
 8001d3a:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001dc8 <PIDmotor+0x2ec>
 8001d3e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001dc8 <PIDmotor+0x2ec>
 8001d42:	f7ff fdbd 	bl	80018c0 <motorSpeed>

	/* Reset Encoders value */
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <PIDmotor+0x2b0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <PIDmotor+0x2b4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d56:	bf00      	nop
 8001d58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20004c50 	.word	0x20004c50
 8001d64:	20004c9c 	.word	0x20004c9c
 8001d68:	469c4000 	.word	0x469c4000
 8001d6c:	447a0000 	.word	0x447a0000
 8001d70:	c53b8000 	.word	0xc53b8000
 8001d74:	453b8000 	.word	0x453b8000
 8001d78:	c3160000 	.word	0xc3160000
 8001d7c:	43160000 	.word	0x43160000
 8001d80:	20004a00 	.word	0x20004a00
 8001d84:	20004cf0 	.word	0x20004cf0
 8001d88:	20004b48 	.word	0x20004b48
 8001d8c:	20004ca4 	.word	0x20004ca4
 8001d90:	20004b94 	.word	0x20004b94
 8001d94:	20004ca0 	.word	0x20004ca0
 8001d98:	20004ad8 	.word	0x20004ad8
 8001d9c:	200000d4 	.word	0x200000d4
 8001da0:	200000d8 	.word	0x200000d8
 8001da4:	200049f8 	.word	0x200049f8
 8001da8:	20004bdc 	.word	0x20004bdc
 8001dac:	20004d08 	.word	0x20004d08
 8001db0:	20004cec 	.word	0x20004cec
 8001db4:	200000c4 	.word	0x200000c4
 8001db8:	20004b90 	.word	0x20004b90
 8001dbc:	200000c8 	.word	0x200000c8
 8001dc0:	200000cc 	.word	0x200000cc
 8001dc4:	200000d0 	.word	0x200000d0
 8001dc8:	00000000 	.word	0x00000000

08001dcc <calculateTurn>:

/* Calculate turn ratio */
float calculateTurn(float dist){
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	ed87 0a01 	vstr	s0, [r7, #4]
	//return ((dist / (2 * 3.14)) - 16) / (dist / (2 *3.14));
	return 0.793;
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <calculateTurn+0x20>)
 8001dd8:	ee07 3a90 	vmov	s15, r3
}
 8001ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	3f4b020c 	.word	0x3f4b020c

08001df0 <readEncoderTurn>:

/* Read encoder values for turn */
void readEncoderTurn(){ //Forward = Positive, Backwards = negative
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <readEncoderTurn+0x60>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <readEncoderTurn+0x64>)
 8001dfe:	801a      	strh	r2, [r3, #0]
	fLeft = currentLeft *-1*CMPERREVTURN;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <readEncoderTurn+0x64>)
 8001e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e06:	425b      	negs	r3, r3
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e10:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e58 <readEncoderTurn+0x68>
 8001e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <readEncoderTurn+0x6c>)
 8001e1a:	edc3 7a00 	vstr	s15, [r3]

	currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <readEncoderTurn+0x70>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <readEncoderTurn+0x74>)
 8001e28:	801a      	strh	r2, [r3, #0]
	fRight = currentRight * CMPERREVTURN;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <readEncoderTurn+0x74>)
 8001e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e38:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001e58 <readEncoderTurn+0x68>
 8001e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <readEncoderTurn+0x78>)
 8001e42:	edc3 7a00 	vstr	s15, [r3]
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	20004ca4 	.word	0x20004ca4
 8001e54:	20004b28 	.word	0x20004b28
 8001e58:	3c5844d0 	.word	0x3c5844d0
 8001e5c:	20004cec 	.word	0x20004cec
 8001e60:	20004b94 	.word	0x20004b94
 8001e64:	20004c4c 	.word	0x20004c4c
 8001e68:	20004b90 	.word	0x20004b90
 8001e6c:	00000000 	.word	0x00000000

08001e70 <PIDturn>:

void PIDturn(float degree, int turn){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0c0      	sub	sp, #256	; 0x100
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	6018      	str	r0, [r3, #0]

	/* Set UARTBuffer to default value */
	*aRxBuffer = 'Z';
 8001e7e:	4b90      	ldr	r3, [pc, #576]	; (80020c0 <PIDturn+0x250>)
 8001e80:	225a      	movs	r2, #90	; 0x5a
 8001e82:	701a      	strb	r2, [r3, #0]

	/* Calibrate motors */
	float setDist = CIRCUM * (degree/360);
 8001e84:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e88:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80020c4 <PIDturn+0x254>
 8001e8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e90:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80020c8 <PIDturn+0x258>
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
	float turnRatio = calculateTurn(CIRCUM);
 8001e9c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80020c8 <PIDturn+0x258>
 8001ea0:	f7ff ff94 	bl	8001dcc <calculateTurn>
 8001ea4:	ed87 0a3e 	vstr	s0, [r7, #248]	; 0xf8

	/* Initialise PID Controllers */
	PIDController pidLeft = {PID_KP,PID_KI,PID_KD,0,-3000,3000,-150,150,prePWMLeft,1.0f};
 8001ea8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001eac:	223c      	movs	r2, #60	; 0x3c
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f009 fc7d 	bl	800b7b0 <memset>
 8001eb6:	4b85      	ldr	r3, [pc, #532]	; (80020cc <PIDturn+0x25c>)
 8001eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ebc:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <PIDturn+0x260>)
 8001ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ec2:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <PIDturn+0x264>)
 8001ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ec8:	4b83      	ldr	r3, [pc, #524]	; (80020d8 <PIDturn+0x268>)
 8001eca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ece:	4b83      	ldr	r3, [pc, #524]	; (80020dc <PIDturn+0x26c>)
 8001ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ed4:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <PIDturn+0x270>)
 8001ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001eda:	4b82      	ldr	r3, [pc, #520]	; (80020e4 <PIDturn+0x274>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001ee2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	PIDController pidRight ={PID_KP,PID_KI,PID_KD,0,-3000,3000,-150,150,prePWMRight,1.0f};
 8001eea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001eee:	223c      	movs	r2, #60	; 0x3c
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f009 fc5c 	bl	800b7b0 <memset>
 8001ef8:	4b74      	ldr	r3, [pc, #464]	; (80020cc <PIDturn+0x25c>)
 8001efa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001efc:	4b74      	ldr	r3, [pc, #464]	; (80020d0 <PIDturn+0x260>)
 8001efe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f02:	4b74      	ldr	r3, [pc, #464]	; (80020d4 <PIDturn+0x264>)
 8001f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f08:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <PIDturn+0x268>)
 8001f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f0e:	4b73      	ldr	r3, [pc, #460]	; (80020dc <PIDturn+0x26c>)
 8001f10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f14:	4b72      	ldr	r3, [pc, #456]	; (80020e0 <PIDturn+0x270>)
 8001f16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <PIDturn+0x278>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	Profile profileLeft;
	Profile profileRight;

	/* Initialise and set Encoder to 0 */
	HAL_TIM_Base_Start(&htim5);
 8001f2a:	4870      	ldr	r0, [pc, #448]	; (80020ec <PIDturn+0x27c>)
 8001f2c:	f003 ff66 	bl	8005dfc <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8001f30:	213c      	movs	r1, #60	; 0x3c
 8001f32:	486f      	ldr	r0, [pc, #444]	; (80020f0 <PIDturn+0x280>)
 8001f34:	f004 fb00 	bl	8006538 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8001f38:	213c      	movs	r1, #60	; 0x3c
 8001f3a:	486e      	ldr	r0, [pc, #440]	; (80020f4 <PIDturn+0x284>)
 8001f3c:	f004 fafc 	bl	8006538 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001f40:	4b6b      	ldr	r3, [pc, #428]	; (80020f0 <PIDturn+0x280>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001f48:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <PIDturn+0x284>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

	/* Initialise PID controllers and profiles */
	PIDController_Init(&pidLeft);
 8001f50:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe ffeb 	bl	8000f30 <PIDController_Init>
	PIDController_Init(&pidRight);
 8001f5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ffe6 	bl	8000f30 <PIDController_Init>

	/* if right turn does not achieve 90 degree, set a higher set distance */
	if(turn==2)
 8001f64:	463b      	mov	r3, r7
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d111      	bne.n	8001f90 <PIDturn+0x120>
		setDist = setDist * 1.01;
 8001f6c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001f70:	f7fe faea 	bl	8000548 <__aeabi_f2d>
 8001f74:	a350      	add	r3, pc, #320	; (adr r3, 80020b8 <PIDturn+0x248>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb3d 	bl	80005f8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fe07 	bl	8000b98 <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	/* Initialise motion profile and get total time for movement */
	Profile_Init(&profileLeft);
 8001f90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 faae 	bl	80034f6 <Profile_Init>
	float time = trapezoidal(&profileLeft, setDist, AMAX, VMAX);
 8001f9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f9e:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8001fa2:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8001fa6:	ed97 0a3f 	vldr	s0, [r7, #252]	; 0xfc
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 fae0 	bl	8003570 <trapezoidal>
 8001fb0:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4



	timeStart();
 8001fb4:	f7ff fd50 	bl	8001a58 <timeStart>
	while(timeNow()<time){
 8001fb8:	e11c      	b.n	80021f4 <PIDturn+0x384>

		/* Take current encoder values */
		readEncoderTurn();
 8001fba:	f7ff ff19 	bl	8001df0 <readEncoderTurn>
		currProfile(&profileLeft, currSec);
 8001fbe:	4b4e      	ldr	r3, [pc, #312]	; (80020f8 <PIDturn+0x288>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f001 fbed 	bl	80037ac <currProfile>




		/* Compute new control signal */
		if(turn==1){ //Left Turn
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 80a0 	bne.w	800211c <PIDturn+0x2ac>

			/* Constantly calculate the correct feed forward */
			prePWMLeft=forwardFeed(profileLeft.currVel * turnRatio);
 8001fdc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001fe0:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8001fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fec:	f7ff fd5c 	bl	8001aa8 <forwardFeed>
 8001ff0:	eef0 7a40 	vmov.f32	s15, s0
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <PIDturn+0x274>)
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
			prePWMRight=forwardFeed(profileLeft.currVel);
 8001ffa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8002002:	f7ff fd51 	bl	8001aa8 <forwardFeed>
 8002006:	eef0 7a40 	vmov.f32	s15, s0
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <PIDturn+0x278>)
 800200c:	edc3 7a00 	vstr	s15, [r3]

			/* Reduce inner wheel distance and speed for turning */
			distanceLeft = profileLeft.currDisp * turnRatio;
 8002010:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002014:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <PIDturn+0x28c>)
 800201e:	edc3 7a00 	vstr	s15, [r3]
			distanceRight = profileLeft.currDisp;
 8002022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002024:	4a36      	ldr	r2, [pc, #216]	; (8002100 <PIDturn+0x290>)
 8002026:	6013      	str	r3, [r2, #0]

			outLeft = PIDController_Update(&pidLeft, distanceLeft, fLeft, prePWMLeft);
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <PIDturn+0x28c>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <PIDturn+0x294>)
 8002030:	ed93 7a00 	vldr	s14, [r3]
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <PIDturn+0x274>)
 8002036:	edd3 6a00 	vldr	s13, [r3]
 800203a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800203e:	eeb0 1a66 	vmov.f32	s2, s13
 8002042:	eef0 0a47 	vmov.f32	s1, s14
 8002046:	eeb0 0a67 	vmov.f32	s0, s15
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe ff8e 	bl	8000f6c <PIDController_Update>
 8002050:	eef0 7a40 	vmov.f32	s15, s0
 8002054:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <PIDturn+0x298>)
 8002056:	edc3 7a00 	vstr	s15, [r3]
			outRight = PIDController_Update(&pidRight, distanceRight, fRight, prePWMRight);
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <PIDturn+0x290>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <PIDturn+0x29c>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <PIDturn+0x278>)
 8002068:	edd3 6a00 	vldr	s13, [r3]
 800206c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002070:	eeb0 1a66 	vmov.f32	s2, s13
 8002074:	eef0 0a47 	vmov.f32	s1, s14
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ff75 	bl	8000f6c <PIDController_Update>
 8002082:	eef0 7a40 	vmov.f32	s15, s0
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <PIDturn+0x2a0>)
 8002088:	edc3 7a00 	vstr	s15, [r3]

			/* Update new values to motors */
			motorSpeed(outLeft, outRight);
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <PIDturn+0x298>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <PIDturn+0x2a0>)
 8002094:	ed93 7a00 	vldr	s14, [r3]
 8002098:	eef0 0a47 	vmov.f32	s1, s14
 800209c:	eeb0 0a67 	vmov.f32	s0, s15
 80020a0:	f7ff fc0e 	bl	80018c0 <motorSpeed>
			errorLeft = pidLeft.prevError;
 80020a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <PIDturn+0x2a4>)
 80020aa:	6013      	str	r3, [r2, #0]
			errorRight = pidRight.prevError;
 80020ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <PIDturn+0x2a8>)
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e09e      	b.n	80021f4 <PIDturn+0x384>
 80020b6:	bf00      	nop
 80020b8:	c28f5c29 	.word	0xc28f5c29
 80020bc:	3ff028f5 	.word	0x3ff028f5
 80020c0:	20004c9c 	.word	0x20004c9c
 80020c4:	43b40000 	.word	0x43b40000
 80020c8:	43988000 	.word	0x43988000
 80020cc:	469c4000 	.word	0x469c4000
 80020d0:	447a0000 	.word	0x447a0000
 80020d4:	c53b8000 	.word	0xc53b8000
 80020d8:	453b8000 	.word	0x453b8000
 80020dc:	c3160000 	.word	0xc3160000
 80020e0:	43160000 	.word	0x43160000
 80020e4:	20004a00 	.word	0x20004a00
 80020e8:	20004cf0 	.word	0x20004cf0
 80020ec:	20004b48 	.word	0x20004b48
 80020f0:	20004ca4 	.word	0x20004ca4
 80020f4:	20004b94 	.word	0x20004b94
 80020f8:	20004ad8 	.word	0x20004ad8
 80020fc:	200000d4 	.word	0x200000d4
 8002100:	200000d8 	.word	0x200000d8
 8002104:	20004cec 	.word	0x20004cec
 8002108:	200000c4 	.word	0x200000c4
 800210c:	20004b90 	.word	0x20004b90
 8002110:	200000c8 	.word	0x200000c8
 8002114:	200000cc 	.word	0x200000cc
 8002118:	200000d0 	.word	0x200000d0
		}
		else{

			prePWMLeft=forwardFeed(profileLeft.currVel);
 800211c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	f7ff fcc0 	bl	8001aa8 <forwardFeed>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	4b41      	ldr	r3, [pc, #260]	; (8002234 <PIDturn+0x3c4>)
 800212e:	edc3 7a00 	vstr	s15, [r3]
			prePWMRight=forwardFeed(profileLeft.currVel * turnRatio);
 8002132:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002136:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	eeb0 0a67 	vmov.f32	s0, s15
 8002142:	f7ff fcb1 	bl	8001aa8 <forwardFeed>
 8002146:	eef0 7a40 	vmov.f32	s15, s0
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <PIDturn+0x3c8>)
 800214c:	edc3 7a00 	vstr	s15, [r3]
			distanceLeft = profileLeft.currDisp;
 8002150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002152:	4a3a      	ldr	r2, [pc, #232]	; (800223c <PIDturn+0x3cc>)
 8002154:	6013      	str	r3, [r2, #0]
			distanceRight = profileLeft.currDisp * turnRatio;
 8002156:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800215a:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <PIDturn+0x3d0>)
 8002164:	edc3 7a00 	vstr	s15, [r3]

			outLeft = PIDController_Update(&pidLeft, distanceLeft, fLeft, prePWMLeft);
 8002168:	4b34      	ldr	r3, [pc, #208]	; (800223c <PIDturn+0x3cc>)
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	4b35      	ldr	r3, [pc, #212]	; (8002244 <PIDturn+0x3d4>)
 8002170:	ed93 7a00 	vldr	s14, [r3]
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <PIDturn+0x3c4>)
 8002176:	edd3 6a00 	vldr	s13, [r3]
 800217a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800217e:	eeb0 1a66 	vmov.f32	s2, s13
 8002182:	eef0 0a47 	vmov.f32	s1, s14
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe feee 	bl	8000f6c <PIDController_Update>
 8002190:	eef0 7a40 	vmov.f32	s15, s0
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <PIDturn+0x3d8>)
 8002196:	edc3 7a00 	vstr	s15, [r3]
			outRight = PIDController_Update(&pidRight, distanceRight, fRight, prePWMRight);
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <PIDturn+0x3d0>)
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <PIDturn+0x3dc>)
 80021a2:	ed93 7a00 	vldr	s14, [r3]
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <PIDturn+0x3c8>)
 80021a8:	edd3 6a00 	vldr	s13, [r3]
 80021ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021b0:	eeb0 1a66 	vmov.f32	s2, s13
 80021b4:	eef0 0a47 	vmov.f32	s1, s14
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fed5 	bl	8000f6c <PIDController_Update>
 80021c2:	eef0 7a40 	vmov.f32	s15, s0
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <PIDturn+0x3e0>)
 80021c8:	edc3 7a00 	vstr	s15, [r3]

			/* Update new values to motors */
			motorSpeed(outLeft, outRight);
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <PIDturn+0x3d8>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <PIDturn+0x3e0>)
 80021d4:	ed93 7a00 	vldr	s14, [r3]
 80021d8:	eef0 0a47 	vmov.f32	s1, s14
 80021dc:	eeb0 0a67 	vmov.f32	s0, s15
 80021e0:	f7ff fb6e 	bl	80018c0 <motorSpeed>
			errorLeft = pidLeft.prevError;
 80021e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e8:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <PIDturn+0x3e4>)
 80021ea:	6013      	str	r3, [r2, #0]
			errorRight = pidRight.prevError;
 80021ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <PIDturn+0x3e8>)
 80021f2:	6013      	str	r3, [r2, #0]
	while(timeNow()<time){
 80021f4:	f7ff fc3e 	bl	8001a74 <timeNow>
 80021f8:	eeb0 7a40 	vmov.f32	s14, s0
 80021fc:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	f73f aed7 	bgt.w	8001fba <PIDturn+0x14a>
			}
	}

	/* Stop Motor */
	motorSpeed(0,0);
 800220c:	eddf 0a13 	vldr	s1, [pc, #76]	; 800225c <PIDturn+0x3ec>
 8002210:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800225c <PIDturn+0x3ec>
 8002214:	f7ff fb54 	bl	80018c0 <motorSpeed>

	/* Reset Encoders value */
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <PIDturn+0x3f0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <PIDturn+0x3f4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002228:	bf00      	nop
 800222a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20004a00 	.word	0x20004a00
 8002238:	20004cf0 	.word	0x20004cf0
 800223c:	200000d4 	.word	0x200000d4
 8002240:	200000d8 	.word	0x200000d8
 8002244:	20004cec 	.word	0x20004cec
 8002248:	200000c4 	.word	0x200000c4
 800224c:	20004b90 	.word	0x20004b90
 8002250:	200000c8 	.word	0x200000c8
 8002254:	200000cc 	.word	0x200000cc
 8002258:	200000d0 	.word	0x200000d0
 800225c:	00000000 	.word	0x00000000
 8002260:	20004ca4 	.word	0x20004ca4
 8002264:	20004b94 	.word	0x20004b94

08002268 <motorCont>:


//Master function for image recognition motor control
int motorCont(int speedL, int speedR, char dirL, char dirR, double dist){
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6178      	str	r0, [r7, #20]
 8002270:	6139      	str	r1, [r7, #16]
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	ed87 0b00 	vstr	d0, [r7]
 800227a:	460b      	mov	r3, r1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	4613      	mov	r3, r2
 8002280:	73bb      	strb	r3, [r7, #14]
	*aRxBuffer = 'Z';
 8002282:	4b82      	ldr	r3, [pc, #520]	; (800248c <motorCont+0x224>)
 8002284:	225a      	movs	r2, #90	; 0x5a
 8002286:	701a      	strb	r2, [r3, #0]
	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8002288:	213c      	movs	r1, #60	; 0x3c
 800228a:	4881      	ldr	r0, [pc, #516]	; (8002490 <motorCont+0x228>)
 800228c:	f004 f954 	bl	8006538 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8002290:	213c      	movs	r1, #60	; 0x3c
 8002292:	4880      	ldr	r0, [pc, #512]	; (8002494 <motorCont+0x22c>)
 8002294:	f004 f950 	bl	8006538 <HAL_TIM_Encoder_Start>
	currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 8002298:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <motorCont+0x228>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	b21a      	sxth	r2, r3
 80022a0:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <motorCont+0x230>)
 80022a2:	801a      	strh	r2, [r3, #0]
	currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 80022a4:	4b7b      	ldr	r3, [pc, #492]	; (8002494 <motorCont+0x22c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	4b7b      	ldr	r3, [pc, #492]	; (800249c <motorCont+0x234>)
 80022ae:	801a      	strh	r2, [r3, #0]
	tick = HAL_GetTick();
 80022b0:	f002 f810 	bl	80042d4 <HAL_GetTick>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b79      	ldr	r3, [pc, #484]	; (80024a0 <motorCont+0x238>)
 80022ba:	601a      	str	r2, [r3, #0]
	double encDist = dist * 72;
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	4b78      	ldr	r3, [pc, #480]	; (80024a4 <motorCont+0x23c>)
 80022c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c6:	f7fe f997 	bl	80005f8 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//Select direction of motor//
	switch(dirL){
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b46      	cmp	r3, #70	; 0x46
 80022d6:	d002      	beq.n	80022de <motorCont+0x76>
 80022d8:	2b52      	cmp	r3, #82	; 0x52
 80022da:	d00b      	beq.n	80022f4 <motorCont+0x8c>
 80022dc:	e015      	b.n	800230a <motorCont+0xa2>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80022de:	2201      	movs	r2, #1
 80022e0:	2108      	movs	r1, #8
 80022e2:	4871      	ldr	r0, [pc, #452]	; (80024a8 <motorCont+0x240>)
 80022e4:	f002 fea8 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2104      	movs	r1, #4
 80022ec:	486e      	ldr	r0, [pc, #440]	; (80024a8 <motorCont+0x240>)
 80022ee:	f002 fea3 	bl	8005038 <HAL_GPIO_WritePin>
			break;
 80022f2:	e00a      	b.n	800230a <motorCont+0xa2>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2108      	movs	r1, #8
 80022f8:	486b      	ldr	r0, [pc, #428]	; (80024a8 <motorCont+0x240>)
 80022fa:	f002 fe9d 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	2104      	movs	r1, #4
 8002302:	4869      	ldr	r0, [pc, #420]	; (80024a8 <motorCont+0x240>)
 8002304:	f002 fe98 	bl	8005038 <HAL_GPIO_WritePin>
			break;
 8002308:	bf00      	nop
	}

	switch(dirR){
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	2b46      	cmp	r3, #70	; 0x46
 800230e:	d002      	beq.n	8002316 <motorCont+0xae>
 8002310:	2b52      	cmp	r3, #82	; 0x52
 8002312:	d00b      	beq.n	800232c <motorCont+0xc4>
 8002314:	e015      	b.n	8002342 <motorCont+0xda>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002316:	2201      	movs	r2, #1
 8002318:	2110      	movs	r1, #16
 800231a:	4863      	ldr	r0, [pc, #396]	; (80024a8 <motorCont+0x240>)
 800231c:	f002 fe8c 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	2120      	movs	r1, #32
 8002324:	4860      	ldr	r0, [pc, #384]	; (80024a8 <motorCont+0x240>)
 8002326:	f002 fe87 	bl	8005038 <HAL_GPIO_WritePin>
			break;
 800232a:	e00a      	b.n	8002342 <motorCont+0xda>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2110      	movs	r1, #16
 8002330:	485d      	ldr	r0, [pc, #372]	; (80024a8 <motorCont+0x240>)
 8002332:	f002 fe81 	bl	8005038 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2120      	movs	r1, #32
 800233a:	485b      	ldr	r0, [pc, #364]	; (80024a8 <motorCont+0x240>)
 800233c:	f002 fe7c 	bl	8005038 <HAL_GPIO_WritePin>
			break;
 8002340:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8002342:	4b5a      	ldr	r3, [pc, #360]	; (80024ac <motorCont+0x244>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <motorCont+0x244>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38


	while(1){
			currentLeft = __HAL_TIM_GET_COUNTER(&htim2);
 8002352:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <motorCont+0x228>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	b21a      	sxth	r2, r3
 800235a:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <motorCont+0x230>)
 800235c:	801a      	strh	r2, [r3, #0]
			currentRight = __HAL_TIM_GET_COUNTER(&htim3);
 800235e:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <motorCont+0x22c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	b21a      	sxth	r2, r3
 8002366:	4b4d      	ldr	r3, [pc, #308]	; (800249c <motorCont+0x234>)
 8002368:	801a      	strh	r2, [r3, #0]
			diffl = abs(currentLeft);
 800236a:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <motorCont+0x230>)
 800236c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	bfb8      	it	lt
 8002374:	425b      	neglt	r3, r3
 8002376:	b29b      	uxth	r3, r3
 8002378:	b21a      	sxth	r2, r3
 800237a:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <motorCont+0x248>)
 800237c:	801a      	strh	r2, [r3, #0]
			diffr =abs(currentRight);
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <motorCont+0x234>)
 8002380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002384:	2b00      	cmp	r3, #0
 8002386:	bfb8      	it	lt
 8002388:	425b      	neglt	r3, r3
 800238a:	b29b      	uxth	r3, r3
 800238c:	b21a      	sxth	r2, r3
 800238e:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <motorCont+0x24c>)
 8002390:	801a      	strh	r2, [r3, #0]
			avg = abs((diffl+diffr)/2);
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <motorCont+0x248>)
 8002394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002398:	461a      	mov	r2, r3
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <motorCont+0x24c>)
 800239c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a0:	4413      	add	r3, r2
 80023a2:	0fda      	lsrs	r2, r3, #31
 80023a4:	4413      	add	r3, r2
 80023a6:	105b      	asrs	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bfb8      	it	lt
 80023ac:	425b      	neglt	r3, r3
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <motorCont+0x250>)
 80023b2:	801a      	strh	r2, [r3, #0]
			sprintf(display,"Left:%5d\0", diffl/68);
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <motorCont+0x248>)
 80023b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ba:	4a40      	ldr	r2, [pc, #256]	; (80024bc <motorCont+0x254>)
 80023bc:	fb82 1203 	smull	r1, r2, r2, r3
 80023c0:	1152      	asrs	r2, r2, #5
 80023c2:	17db      	asrs	r3, r3, #31
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	493d      	ldr	r1, [pc, #244]	; (80024c0 <motorCont+0x258>)
 80023cc:	483d      	ldr	r0, [pc, #244]	; (80024c4 <motorCont+0x25c>)
 80023ce:	f009 f9f7 	bl	800b7c0 <siprintf>
			OLED_ShowString(10,35,display);
 80023d2:	4a3c      	ldr	r2, [pc, #240]	; (80024c4 <motorCont+0x25c>)
 80023d4:	2123      	movs	r1, #35	; 0x23
 80023d6:	200a      	movs	r0, #10
 80023d8:	f009 f8f4 	bl	800b5c4 <OLED_ShowString>
			sprintf(display,"Right:%5d\0", diffr/68);
 80023dc:	4b35      	ldr	r3, [pc, #212]	; (80024b4 <motorCont+0x24c>)
 80023de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e2:	4a36      	ldr	r2, [pc, #216]	; (80024bc <motorCont+0x254>)
 80023e4:	fb82 1203 	smull	r1, r2, r2, r3
 80023e8:	1152      	asrs	r2, r2, #5
 80023ea:	17db      	asrs	r3, r3, #31
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4935      	ldr	r1, [pc, #212]	; (80024c8 <motorCont+0x260>)
 80023f4:	4833      	ldr	r0, [pc, #204]	; (80024c4 <motorCont+0x25c>)
 80023f6:	f009 f9e3 	bl	800b7c0 <siprintf>
			OLED_ShowString(10,50,display);
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <motorCont+0x25c>)
 80023fc:	2132      	movs	r1, #50	; 0x32
 80023fe:	200a      	movs	r0, #10
 8002400:	f009 f8e0 	bl	800b5c4 <OLED_ShowString>
			OLED_Refresh_Gram();
 8002404:	f008 ff6a 	bl	800b2dc <OLED_Refresh_Gram>

			if(avg>=encDist){
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <motorCont+0x250>)
 800240a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f888 	bl	8000524 <__aeabi_i2d>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800241c:	f7fe fb68 	bl	8000af0 <__aeabi_dcmple>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <motorCont+0x1d8>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <motorCont+0x244>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <motorCont+0x244>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 8002436:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800243a:	f001 ff57 	bl	80042ec <HAL_Delay>
				break;
 800243e:	e000      	b.n	8002442 <motorCont+0x1da>
	while(1){
 8002440:	e787      	b.n	8002352 <motorCont+0xea>
			}

		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <motorCont+0x228>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3,0);
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <motorCont+0x22c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

		speedL=speedR=tick=diffl=diffr=0;
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <motorCont+0x24c>)
 8002454:	2200      	movs	r2, #0
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <motorCont+0x24c>)
 800245a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <motorCont+0x248>)
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <motorCont+0x248>)
 8002464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002468:	461a      	mov	r2, r3
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <motorCont+0x238>)
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <motorCont+0x238>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	617b      	str	r3, [r7, #20]
		OLED_Refresh_Gram();
 8002478:	f008 ff30 	bl	800b2dc <OLED_Refresh_Gram>
		*aRxBuffer = 'Z';
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <motorCont+0x224>)
 800247e:	225a      	movs	r2, #90	; 0x5a
 8002480:	701a      	strb	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	4618      	mov	r0, r3
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20004c9c 	.word	0x20004c9c
 8002490:	20004ca4 	.word	0x20004ca4
 8002494:	20004b94 	.word	0x20004b94
 8002498:	20004b28 	.word	0x20004b28
 800249c:	20004c4c 	.word	0x20004c4c
 80024a0:	2000009c 	.word	0x2000009c
 80024a4:	40520000 	.word	0x40520000
 80024a8:	40020000 	.word	0x40020000
 80024ac:	20004a04 	.word	0x20004a04
 80024b0:	20000094 	.word	0x20000094
 80024b4:	20000096 	.word	0x20000096
 80024b8:	20000098 	.word	0x20000098
 80024bc:	78787879 	.word	0x78787879
 80024c0:	0800d930 	.word	0x0800d930
 80024c4:	20004b34 	.word	0x20004b34
 80024c8:	0800d93c 	.word	0x0800d93c

080024cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d0:	f001 fe9a 	bl	8004208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d4:	f000 f848 	bl	8002568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d8:	f000 fc18 	bl	8002d0c <MX_GPIO_Init>
  MX_TIM8_Init();
 80024dc:	f000 fb60 	bl	8002ba0 <MX_TIM8_Init>
  MX_TIM2_Init();
 80024e0:	f000 fa14 	bl	800290c <MX_TIM2_Init>
  MX_TIM1_Init();
 80024e4:	f000 f974 	bl	80027d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80024e8:	f000 fa64 	bl	80029b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80024ec:	f000 fab6 	bl	8002a5c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80024f0:	f000 fbe2 	bl	8002cb8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80024f4:	f000 f898 	bl	8002628 <MX_ADC1_Init>
  MX_ADC2_Init();
 80024f8:	f000 f8e8 	bl	80026cc <MX_ADC2_Init>
  MX_RTC_Init();
 80024fc:	f000 f938 	bl	8002770 <MX_RTC_Init>
  MX_TIM5_Init();
 8002500:	f000 fb00 	bl	8002b04 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002504:	2100      	movs	r1, #0
 8002506:	480f      	ldr	r0, [pc, #60]	; (8002544 <main+0x78>)
 8002508:	f003 fe48 	bl	800619c <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 800250c:	2201      	movs	r2, #1
 800250e:	490e      	ldr	r1, [pc, #56]	; (8002548 <main+0x7c>)
 8002510:	480e      	ldr	r0, [pc, #56]	; (800254c <main+0x80>)
 8002512:	f005 fa79 	bl	8007a08 <HAL_UART_Receive_IT>
  OLED_Init();
 8002516:	f009 f887 	bl	800b628 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800251a:	f006 f991 	bl	8008840 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <main+0x84>)
 8002520:	2100      	movs	r1, #0
 8002522:	480c      	ldr	r0, [pc, #48]	; (8002554 <main+0x88>)
 8002524:	f006 f9d6 	bl	80088d4 <osThreadNew>
 8002528:	4603      	mov	r3, r0
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <main+0x8c>)
 800252c:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <main+0x90>)
 8002530:	2100      	movs	r1, #0
 8002532:	480b      	ldr	r0, [pc, #44]	; (8002560 <main+0x94>)
 8002534:	f006 f9ce 	bl	80088d4 <osThreadNew>
 8002538:	4603      	mov	r3, r0
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <main+0x98>)
 800253c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800253e:	f006 f9a3 	bl	8008888 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002542:	e7fe      	b.n	8002542 <main+0x76>
 8002544:	20004a4c 	.word	0x20004a4c
 8002548:	20004c9c 	.word	0x20004c9c
 800254c:	20004a94 	.word	0x20004a94
 8002550:	0800d9bc 	.word	0x0800d9bc
 8002554:	08002e85 	.word	0x08002e85
 8002558:	20004b24 	.word	0x20004b24
 800255c:	0800d9e0 	.word	0x0800d9e0
 8002560:	08002f6d 	.word	0x08002f6d
 8002564:	20004b30 	.word	0x20004b30

08002568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	; 0x50
 800256c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	2230      	movs	r2, #48	; 0x30
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f009 f91a 	bl	800b7b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	4b23      	ldr	r3, [pc, #140]	; (8002620 <SystemClock_Config+0xb8>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a22      	ldr	r2, [pc, #136]	; (8002620 <SystemClock_Config+0xb8>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <SystemClock_Config+0xb8>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a8:	2300      	movs	r3, #0
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <SystemClock_Config+0xbc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <SystemClock_Config+0xbc>)
 80025b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <SystemClock_Config+0xbc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80025c4:	230a      	movs	r3, #10
 80025c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025cc:	2310      	movs	r3, #16
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025d0:	2301      	movs	r3, #1
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d8:	f107 0320 	add.w	r3, r7, #32
 80025dc:	4618      	mov	r0, r3
 80025de:	f002 fd6d 	bl	80050bc <HAL_RCC_OscConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80025e8:	f000 ff80 	bl	80034ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ec:	230f      	movs	r3, #15
 80025ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f002 ffd0 	bl	80055ac <HAL_RCC_ClockConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002612:	f000 ff6b 	bl	80034ec <Error_Handler>
  }
}
 8002616:	bf00      	nop
 8002618:	3750      	adds	r7, #80	; 0x50
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40007000 	.word	0x40007000

08002628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800262e:	463b      	mov	r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_ADC1_Init+0x98>)
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <MX_ADC1_Init+0x9c>)
 800263e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_ADC1_Init+0x98>)
 8002642:	2200      	movs	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <MX_ADC1_Init+0x98>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_ADC1_Init+0x98>)
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <MX_ADC1_Init+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <MX_ADC1_Init+0x98>)
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <MX_ADC1_Init+0x98>)
 8002662:	2200      	movs	r2, #0
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_ADC1_Init+0x98>)
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <MX_ADC1_Init+0xa0>)
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_ADC1_Init+0x98>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_ADC1_Init+0x98>)
 8002674:	2201      	movs	r2, #1
 8002676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_ADC1_Init+0x98>)
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_ADC1_Init+0x98>)
 8002682:	2201      	movs	r2, #1
 8002684:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002686:	480e      	ldr	r0, [pc, #56]	; (80026c0 <MX_ADC1_Init+0x98>)
 8002688:	f001 fe54 	bl	8004334 <HAL_ADC_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002692:	f000 ff2b 	bl	80034ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002696:	230b      	movs	r3, #11
 8002698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026a2:	463b      	mov	r3, r7
 80026a4:	4619      	mov	r1, r3
 80026a6:	4806      	ldr	r0, [pc, #24]	; (80026c0 <MX_ADC1_Init+0x98>)
 80026a8:	f001 ff68 	bl	800457c <HAL_ADC_ConfigChannel>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80026b2:	f000 ff1b 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20004be0 	.word	0x20004be0
 80026c4:	40012000 	.word	0x40012000
 80026c8:	0f000001 	.word	0x0f000001

080026cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026d2:	463b      	mov	r3, r7
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <MX_ADC2_Init+0x98>)
 80026e0:	4a21      	ldr	r2, [pc, #132]	; (8002768 <MX_ADC2_Init+0x9c>)
 80026e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <MX_ADC2_Init+0x98>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <MX_ADC2_Init+0x98>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <MX_ADC2_Init+0x98>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_ADC2_Init+0x98>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <MX_ADC2_Init+0x98>)
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <MX_ADC2_Init+0x98>)
 8002706:	2200      	movs	r2, #0
 8002708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <MX_ADC2_Init+0x98>)
 800270c:	4a17      	ldr	r2, [pc, #92]	; (800276c <MX_ADC2_Init+0xa0>)
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_ADC2_Init+0x98>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <MX_ADC2_Init+0x98>)
 8002718:	2201      	movs	r2, #1
 800271a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <MX_ADC2_Init+0x98>)
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <MX_ADC2_Init+0x98>)
 8002726:	2201      	movs	r2, #1
 8002728:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800272a:	480e      	ldr	r0, [pc, #56]	; (8002764 <MX_ADC2_Init+0x98>)
 800272c:	f001 fe02 	bl	8004334 <HAL_ADC_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8002736:	f000 fed9 	bl	80034ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800273a:	230c      	movs	r3, #12
 800273c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002746:	463b      	mov	r3, r7
 8002748:	4619      	mov	r1, r3
 800274a:	4806      	ldr	r0, [pc, #24]	; (8002764 <MX_ADC2_Init+0x98>)
 800274c:	f001 ff16 	bl	800457c <HAL_ADC_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8002756:	f000 fec9 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20004adc 	.word	0x20004adc
 8002768:	40012100 	.word	0x40012100
 800276c:	0f000001 	.word	0x0f000001

08002770 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_RTC_Init+0x58>)
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <MX_RTC_Init+0x5c>)
 8002778:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <MX_RTC_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_RTC_Init+0x58>)
 8002782:	227f      	movs	r2, #127	; 0x7f
 8002784:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <MX_RTC_Init+0x58>)
 8002788:	22ff      	movs	r2, #255	; 0xff
 800278a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_RTC_Init+0x58>)
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <MX_RTC_Init+0x58>)
 8002794:	2200      	movs	r2, #0
 8002796:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <MX_RTC_Init+0x58>)
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800279e:	480a      	ldr	r0, [pc, #40]	; (80027c8 <MX_RTC_Init+0x58>)
 80027a0:	f003 f9b6 	bl	8005b10 <HAL_RTC_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80027aa:	f000 fe9f 	bl	80034ec <Error_Handler>
  }
  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 80027ae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_RTC_Init+0x58>)
 80027b4:	f003 fa91 	bl	8005cda <HAL_RTCEx_SetCalibrationOutPut>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80027be:	f000 fe95 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20004c2c 	.word	0x20004c2c
 80027cc:	40002800 	.word	0x40002800

080027d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b096      	sub	sp, #88	; 0x58
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	611a      	str	r2, [r3, #16]
 80027fe:	615a      	str	r2, [r3, #20]
 8002800:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	2220      	movs	r2, #32
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f008 ffd1 	bl	800b7b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <MX_TIM1_Init+0x134>)
 8002810:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <MX_TIM1_Init+0x138>)
 8002812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <MX_TIM1_Init+0x134>)
 8002816:	22a0      	movs	r2, #160	; 0xa0
 8002818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800281a:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <MX_TIM1_Init+0x134>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8002820:	4b38      	ldr	r3, [pc, #224]	; (8002904 <MX_TIM1_Init+0x134>)
 8002822:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002828:	4b36      	ldr	r3, [pc, #216]	; (8002904 <MX_TIM1_Init+0x134>)
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800282e:	4b35      	ldr	r3, [pc, #212]	; (8002904 <MX_TIM1_Init+0x134>)
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002834:	4b33      	ldr	r3, [pc, #204]	; (8002904 <MX_TIM1_Init+0x134>)
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800283a:	4832      	ldr	r0, [pc, #200]	; (8002904 <MX_TIM1_Init+0x134>)
 800283c:	f003 fa8f 	bl	8005d5e <HAL_TIM_Base_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002846:	f000 fe51 	bl	80034ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800284a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002850:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002854:	4619      	mov	r1, r3
 8002856:	482b      	ldr	r0, [pc, #172]	; (8002904 <MX_TIM1_Init+0x134>)
 8002858:	f004 f962 	bl	8006b20 <HAL_TIM_ConfigClockSource>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002862:	f000 fe43 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002866:	4827      	ldr	r0, [pc, #156]	; (8002904 <MX_TIM1_Init+0x134>)
 8002868:	f003 fb30 	bl	8005ecc <HAL_TIM_PWM_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002872:	f000 fe3b 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800287e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002882:	4619      	mov	r1, r3
 8002884:	481f      	ldr	r0, [pc, #124]	; (8002904 <MX_TIM1_Init+0x134>)
 8002886:	f004 feb9 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002890:	f000 fe2c 	bl	80034ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002894:	2360      	movs	r3, #96	; 0x60
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028a4:	2300      	movs	r3, #0
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	220c      	movs	r2, #12
 80028b2:	4619      	mov	r1, r3
 80028b4:	4813      	ldr	r0, [pc, #76]	; (8002904 <MX_TIM1_Init+0x134>)
 80028b6:	f004 f871 	bl	800699c <HAL_TIM_PWM_ConfigChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80028c0:	f000 fe14 	bl	80034ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4807      	ldr	r0, [pc, #28]	; (8002904 <MX_TIM1_Init+0x134>)
 80028e8:	f004 ff04 	bl	80076f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80028f2:	f000 fdfb 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028f6:	4803      	ldr	r0, [pc, #12]	; (8002904 <MX_TIM1_Init+0x134>)
 80028f8:	f001 fb52 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 80028fc:	bf00      	nop
 80028fe:	3758      	adds	r7, #88	; 0x58
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20004c50 	.word	0x20004c50
 8002908:	40010000 	.word	0x40010000

0800290c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f008 ff48 	bl	800b7b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002928:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <MX_TIM2_Init+0xa4>)
 800292a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800292e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <MX_TIM2_Init+0xa4>)
 8002932:	2200      	movs	r2, #0
 8002934:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <MX_TIM2_Init+0xa4>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <MX_TIM2_Init+0xa4>)
 800293e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002942:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_TIM2_Init+0xa4>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <MX_TIM2_Init+0xa4>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002950:	2303      	movs	r3, #3
 8002952:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002958:	2301      	movs	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002960:	230a      	movs	r3, #10
 8002962:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002968:	2301      	movs	r3, #1
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002970:	230a      	movs	r3, #10
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002974:	f107 030c 	add.w	r3, r7, #12
 8002978:	4619      	mov	r1, r3
 800297a:	480d      	ldr	r0, [pc, #52]	; (80029b0 <MX_TIM2_Init+0xa4>)
 800297c:	f003 fd36 	bl	80063ec <HAL_TIM_Encoder_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002986:	f000 fdb1 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	4619      	mov	r1, r3
 8002996:	4806      	ldr	r0, [pc, #24]	; (80029b0 <MX_TIM2_Init+0xa4>)
 8002998:	f004 fe30 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80029a2:	f000 fda3 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	3730      	adds	r7, #48	; 0x30
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20004ca4 	.word	0x20004ca4

080029b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08c      	sub	sp, #48	; 0x30
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f008 fef4 	bl	800b7b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <MX_TIM3_Init+0xa0>)
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <MX_TIM3_Init+0xa4>)
 80029d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <MX_TIM3_Init+0xa0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <MX_TIM3_Init+0xa0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <MX_TIM3_Init+0xa0>)
 80029e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <MX_TIM3_Init+0xa0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <MX_TIM3_Init+0xa0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029f6:	2303      	movs	r3, #3
 80029f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029fe:	2301      	movs	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002a06:	230a      	movs	r3, #10
 8002a08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002a16:	230a      	movs	r3, #10
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	4619      	mov	r1, r3
 8002a20:	480c      	ldr	r0, [pc, #48]	; (8002a54 <MX_TIM3_Init+0xa0>)
 8002a22:	f003 fce3 	bl	80063ec <HAL_TIM_Encoder_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002a2c:	f000 fd5e 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4805      	ldr	r0, [pc, #20]	; (8002a54 <MX_TIM3_Init+0xa0>)
 8002a3e:	f004 fddd 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a48:	f000 fd50 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	3730      	adds	r7, #48	; 0x30
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20004b94 	.word	0x20004b94
 8002a58:	40000400 	.word	0x40000400

08002a5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a62:	f107 0310 	add.w	r3, r7, #16
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002a7a:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <MX_TIM4_Init+0xa4>)
 8002a7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002a80:	220f      	movs	r2, #15
 8002a82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002a8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a92:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002a9e:	4817      	ldr	r0, [pc, #92]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002aa0:	f003 fb2c 	bl	80060fc <HAL_TIM_IC_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002aaa:	f000 fd1f 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ab6:	f107 0310 	add.w	r3, r7, #16
 8002aba:	4619      	mov	r1, r3
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002abe:	f004 fd9d 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002ac8:	f000 fd10 	bl	80034ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002acc:	2300      	movs	r3, #0
 8002ace:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002adc:	463b      	mov	r3, r7
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4806      	ldr	r0, [pc, #24]	; (8002afc <MX_TIM4_Init+0xa0>)
 8002ae4:	f003 febe 	bl	8006864 <HAL_TIM_IC_ConfigChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002aee:	f000 fcfd 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20004a4c 	.word	0x20004a4c
 8002b00:	40000800 	.word	0x40000800

08002b04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b18:	463b      	mov	r3, r7
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <MX_TIM5_Init+0x98>)
 8002b24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b28:	220f      	movs	r2, #15
 8002b2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b46:	4814      	ldr	r0, [pc, #80]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b48:	f003 f909 	bl	8005d5e <HAL_TIM_Base_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002b52:	f000 fccb 	bl	80034ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b5c:	f107 0308 	add.w	r3, r7, #8
 8002b60:	4619      	mov	r1, r3
 8002b62:	480d      	ldr	r0, [pc, #52]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b64:	f003 ffdc 	bl	8006b20 <HAL_TIM_ConfigClockSource>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002b6e:	f000 fcbd 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4806      	ldr	r0, [pc, #24]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b80:	f004 fd3c 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002b8a:	f000 fcaf 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20004b48 	.word	0x20004b48
 8002b9c:	40000c00 	.word	0x40000c00

08002ba0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b092      	sub	sp, #72	; 0x48
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
 8002bc0:	615a      	str	r2, [r3, #20]
 8002bc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f008 fdf0 	bl	800b7b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002bd2:	4a38      	ldr	r2, [pc, #224]	; (8002cb4 <MX_TIM8_Init+0x114>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002be4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002be8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002bf0:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002bfc:	482c      	ldr	r0, [pc, #176]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002bfe:	f003 f965 	bl	8005ecc <HAL_TIM_PWM_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002c08:	f000 fc70 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4825      	ldr	r0, [pc, #148]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002c1c:	f004 fcee 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002c26:	f000 fc61 	bl	80034ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c2a:	2360      	movs	r3, #96	; 0x60
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c36:	2300      	movs	r3, #0
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4818      	ldr	r0, [pc, #96]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002c50:	f003 fea4 	bl	800699c <HAL_TIM_PWM_ConfigChannel>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002c5a:	f000 fc47 	bl	80034ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c62:	2204      	movs	r2, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4812      	ldr	r0, [pc, #72]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002c68:	f003 fe98 	bl	800699c <HAL_TIM_PWM_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002c72:	f000 fc3b 	bl	80034ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <MX_TIM8_Init+0x110>)
 8002c9a:	f004 fd2b 	bl	80076f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002ca4:	f000 fc22 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	3748      	adds	r7, #72	; 0x48
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20004a04 	.word	0x20004a04
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <MX_USART3_UART_Init+0x50>)
 8002cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_USART3_UART_Init+0x4c>)
 8002cf0:	f004 fd66 	bl	80077c0 <HAL_UART_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002cfa:	f000 fbf7 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20004a94 	.word	0x20004a94
 8002d08:	40004800 	.word	0x40004800

08002d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d12:	f107 0314 	add.w	r3, r7, #20
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a48      	ldr	r2, [pc, #288]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d2c:	f043 0310 	orr.w	r3, r3, #16
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a41      	ldr	r2, [pc, #260]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	4b34      	ldr	r3, [pc, #208]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <MX_GPIO_Init+0x140>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8002db4:	4826      	ldr	r0, [pc, #152]	; (8002e50 <MX_GPIO_Init+0x144>)
 8002db6:	f002 f93f 	bl	8005038 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	213c      	movs	r1, #60	; 0x3c
 8002dbe:	4825      	ldr	r0, [pc, #148]	; (8002e54 <MX_GPIO_Init+0x148>)
 8002dc0:	f002 f93a 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dca:	4823      	ldr	r0, [pc, #140]	; (8002e58 <MX_GPIO_Init+0x14c>)
 8002dcc:	f002 f934 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002dd0:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8002dd4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	4819      	ldr	r0, [pc, #100]	; (8002e50 <MX_GPIO_Init+0x144>)
 8002dea:	f001 ff89 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8002dee:	233c      	movs	r3, #60	; 0x3c
 8002df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	4813      	ldr	r0, [pc, #76]	; (8002e54 <MX_GPIO_Init+0x148>)
 8002e06:	f001 ff7b 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USRBUT_Pin */
  GPIO_InitStruct.Pin = USRBUT_Pin;
 8002e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USRBUT_GPIO_Port, &GPIO_InitStruct);
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480e      	ldr	r0, [pc, #56]	; (8002e58 <MX_GPIO_Init+0x14c>)
 8002e20:	f001 ff6e 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8002e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4806      	ldr	r0, [pc, #24]	; (8002e58 <MX_GPIO_Init+0x14c>)
 8002e3e:	f001 ff5f 	bl	8004d00 <HAL_GPIO_Init>

}
 8002e42:	bf00      	nop
 8002e44:	3728      	adds	r7, #40	; 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40020000 	.word	0x40020000
 8002e58:	40020c00 	.word	0x40020c00

08002e5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,10,0xFFFF); //might not nd
 8002e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e68:	220a      	movs	r2, #10
 8002e6a:	4904      	ldr	r1, [pc, #16]	; (8002e7c <HAL_UART_RxCpltCallback+0x20>)
 8002e6c:	4804      	ldr	r0, [pc, #16]	; (8002e80 <HAL_UART_RxCpltCallback+0x24>)
 8002e6e:	f004 fcf4 	bl	800785a <HAL_UART_Transmit>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20004c9c 	.word	0x20004c9c
 8002e80:	20004a94 	.word	0x20004a94

08002e84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08e      	sub	sp, #56	; 0x38
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t test[20] = "Testing Pi";
 8002e8c:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <StartDefaultTask+0xc4>)
 8002e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e94:	c303      	stmia	r3!, {r0, r1}
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	3302      	adds	r3, #2
 8002e9a:	0c12      	lsrs	r2, r2, #16
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	721a      	strb	r2, [r3, #8]
	uint8_t checkPi[1];

	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4927      	ldr	r1, [pc, #156]	; (8002f4c <StartDefaultTask+0xc8>)
 8002eae:	4828      	ldr	r0, [pc, #160]	; (8002f50 <StartDefaultTask+0xcc>)
 8002eb0:	f004 fdaa 	bl	8007a08 <HAL_UART_Receive_IT>
		OLED_ShowString(5,5,test);
 8002eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2105      	movs	r1, #5
 8002ebc:	2005      	movs	r0, #5
 8002ebe:	f008 fb81 	bl	800b5c4 <OLED_ShowString>
//		sprintf(checkPi, "Pi cmd: %s\0", aRxBuffer);
//		OLED_ShowString(10, 20, checkPi);
		ultraDistCheck();
 8002ec2:	f7fe f9c9 	bl	8001258 <ultraDistCheck>
		HAL_Delay(200);
 8002ec6:	20c8      	movs	r0, #200	; 0xc8
 8002ec8:	f001 fa10 	bl	80042ec <HAL_Delay>
		sprintf(ultra, "uDistF: %u\0", uDistFinal);
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <StartDefaultTask+0xd0>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f107 0310 	add.w	r3, r7, #16
 8002ed4:	4920      	ldr	r1, [pc, #128]	; (8002f58 <StartDefaultTask+0xd4>)
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f008 fc72 	bl	800b7c0 <siprintf>
		OLED_ShowString(10, 50, ultra);
 8002edc:	f107 0310 	add.w	r3, r7, #16
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2132      	movs	r1, #50	; 0x32
 8002ee4:	200a      	movs	r0, #10
 8002ee6:	f008 fb6d 	bl	800b5c4 <OLED_ShowString>
//		OLED_ShowString(10, 25, ultra);
//
//		sprintf(ultra, "uDist2: %u\0", uDistCheck2);
//		OLED_ShowString(10, 35, ultra);

		irLeft();
 8002eea:	f7fe f9fd 	bl	80012e8 <irLeft>
		HAL_Delay(100);
 8002eee:	2064      	movs	r0, #100	; 0x64
 8002ef0:	f001 f9fc 	bl	80042ec <HAL_Delay>
		sprintf(ultra, "IR left: %u\0", ir1Dist);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <StartDefaultTask+0xd8>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	4918      	ldr	r1, [pc, #96]	; (8002f60 <StartDefaultTask+0xdc>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	f008 fc5e 	bl	800b7c0 <siprintf>
		OLED_ShowString(10, 30, ultra);
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	461a      	mov	r2, r3
 8002f0a:	211e      	movs	r1, #30
 8002f0c:	200a      	movs	r0, #10
 8002f0e:	f008 fb59 	bl	800b5c4 <OLED_ShowString>

		irRight();
 8002f12:	f7fe fa5d 	bl	80013d0 <irRight>
		HAL_Delay(100);
 8002f16:	2064      	movs	r0, #100	; 0x64
 8002f18:	f001 f9e8 	bl	80042ec <HAL_Delay>
		sprintf(ultra, "IR right: %u\0", ir2Dist);
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <StartDefaultTask+0xe0>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f107 0310 	add.w	r3, r7, #16
 8002f24:	4910      	ldr	r1, [pc, #64]	; (8002f68 <StartDefaultTask+0xe4>)
 8002f26:	4618      	mov	r0, r3
 8002f28:	f008 fc4a 	bl	800b7c0 <siprintf>
		OLED_ShowString(10, 40, ultra);
 8002f2c:	f107 0310 	add.w	r3, r7, #16
 8002f30:	461a      	mov	r2, r3
 8002f32:	2128      	movs	r1, #40	; 0x28
 8002f34:	200a      	movs	r0, #10
 8002f36:	f008 fb45 	bl	800b5c4 <OLED_ShowString>


		OLED_Refresh_Gram();
 8002f3a:	f008 f9cf 	bl	800b2dc <OLED_Refresh_Gram>
		//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		osDelay(100);
 8002f3e:	2064      	movs	r0, #100	; 0x64
 8002f40:	f005 fd5a 	bl	80089f8 <osDelay>
	{
 8002f44:	e7b1      	b.n	8002eaa <StartDefaultTask+0x26>
 8002f46:	bf00      	nop
 8002f48:	0800d974 	.word	0x0800d974
 8002f4c:	20004c9c 	.word	0x20004c9c
 8002f50:	20004a94 	.word	0x20004a94
 8002f54:	200000b8 	.word	0x200000b8
 8002f58:	0800d948 	.word	0x0800d948
 8002f5c:	200000bc 	.word	0x200000bc
 8002f60:	0800d954 	.word	0x0800d954
 8002f64:	200000c0 	.word	0x200000c0
 8002f68:	0800d964 	.word	0x0800d964

08002f6c <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002f74:	2100      	movs	r1, #0
 8002f76:	48d8      	ldr	r0, [pc, #864]	; (80032d8 <motor+0x36c>)
 8002f78:	f002 fff8 	bl	8005f6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	48d6      	ldr	r0, [pc, #856]	; (80032d8 <motor+0x36c>)
 8002f80:	f002 fff4 	bl	8005f6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002f84:	210c      	movs	r1, #12
 8002f86:	48d5      	ldr	r0, [pc, #852]	; (80032dc <motor+0x370>)
 8002f88:	f002 fff0 	bl	8005f6c <HAL_TIM_PWM_Start>

	*aRxBuffer = '\0';
 8002f8c:	4bd4      	ldr	r3, [pc, #848]	; (80032e0 <motor+0x374>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
	uint8_t toRpiTest[6] = "NiHao";
 8002f92:	4ad4      	ldr	r2, [pc, #848]	; (80032e4 <motor+0x378>)
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f9c:	6018      	str	r0, [r3, #0]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	8019      	strh	r1, [r3, #0]
		for(;;)
		  {
			switch (*aRxBuffer)
 8002fa2:	4bcf      	ldr	r3, [pc, #828]	; (80032e0 <motor+0x374>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b5a      	cmp	r3, #90	; 0x5a
 8002fa8:	f200 8279 	bhi.w	800349e <motor+0x532>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <motor+0x48>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08003121 	.word	0x08003121
 8002fb8:	0800349f 	.word	0x0800349f
 8002fbc:	0800349f 	.word	0x0800349f
 8002fc0:	0800349f 	.word	0x0800349f
 8002fc4:	0800349f 	.word	0x0800349f
 8002fc8:	0800349f 	.word	0x0800349f
 8002fcc:	0800349f 	.word	0x0800349f
 8002fd0:	0800349f 	.word	0x0800349f
 8002fd4:	0800349f 	.word	0x0800349f
 8002fd8:	0800349f 	.word	0x0800349f
 8002fdc:	0800349f 	.word	0x0800349f
 8002fe0:	0800349f 	.word	0x0800349f
 8002fe4:	0800349f 	.word	0x0800349f
 8002fe8:	0800349f 	.word	0x0800349f
 8002fec:	0800349f 	.word	0x0800349f
 8002ff0:	0800349f 	.word	0x0800349f
 8002ff4:	0800349f 	.word	0x0800349f
 8002ff8:	0800349f 	.word	0x0800349f
 8002ffc:	0800349f 	.word	0x0800349f
 8003000:	0800349f 	.word	0x0800349f
 8003004:	0800349f 	.word	0x0800349f
 8003008:	0800349f 	.word	0x0800349f
 800300c:	0800349f 	.word	0x0800349f
 8003010:	0800349f 	.word	0x0800349f
 8003014:	0800349f 	.word	0x0800349f
 8003018:	0800349f 	.word	0x0800349f
 800301c:	0800349f 	.word	0x0800349f
 8003020:	0800349f 	.word	0x0800349f
 8003024:	0800349f 	.word	0x0800349f
 8003028:	0800349f 	.word	0x0800349f
 800302c:	0800349f 	.word	0x0800349f
 8003030:	0800349f 	.word	0x0800349f
 8003034:	0800349f 	.word	0x0800349f
 8003038:	080031c5 	.word	0x080031c5
 800303c:	080031cf 	.word	0x080031cf
 8003040:	080031d9 	.word	0x080031d9
 8003044:	080031e3 	.word	0x080031e3
 8003048:	080031ed 	.word	0x080031ed
 800304c:	080031f7 	.word	0x080031f7
 8003050:	08003201 	.word	0x08003201
 8003054:	0800320b 	.word	0x0800320b
 8003058:	08003215 	.word	0x08003215
 800305c:	0800321f 	.word	0x0800321f
 8003060:	0800349f 	.word	0x0800349f
 8003064:	0800349f 	.word	0x0800349f
 8003068:	0800349f 	.word	0x0800349f
 800306c:	0800349f 	.word	0x0800349f
 8003070:	0800349f 	.word	0x0800349f
 8003074:	0800316b 	.word	0x0800316b
 8003078:	08003175 	.word	0x08003175
 800307c:	0800317f 	.word	0x0800317f
 8003080:	08003189 	.word	0x08003189
 8003084:	08003193 	.word	0x08003193
 8003088:	0800319d 	.word	0x0800319d
 800308c:	080031a7 	.word	0x080031a7
 8003090:	080031b1 	.word	0x080031b1
 8003094:	080031bb 	.word	0x080031bb
 8003098:	08003161 	.word	0x08003161
 800309c:	0800349f 	.word	0x0800349f
 80030a0:	0800349f 	.word	0x0800349f
 80030a4:	0800349f 	.word	0x0800349f
 80030a8:	0800349f 	.word	0x0800349f
 80030ac:	0800349f 	.word	0x0800349f
 80030b0:	0800349f 	.word	0x0800349f
 80030b4:	0800349f 	.word	0x0800349f
 80030b8:	0800349f 	.word	0x0800349f
 80030bc:	0800349f 	.word	0x0800349f
 80030c0:	0800349f 	.word	0x0800349f
 80030c4:	0800349f 	.word	0x0800349f
 80030c8:	0800335d 	.word	0x0800335d
 80030cc:	0800349f 	.word	0x0800349f
 80030d0:	0800349f 	.word	0x0800349f
 80030d4:	0800312d 	.word	0x0800312d
 80030d8:	0800349f 	.word	0x0800349f
 80030dc:	0800349f 	.word	0x0800349f
 80030e0:	08003149 	.word	0x08003149
 80030e4:	08003229 	.word	0x08003229
 80030e8:	0800349f 	.word	0x0800349f
 80030ec:	0800349f 	.word	0x0800349f
 80030f0:	0800349f 	.word	0x0800349f
 80030f4:	0800349f 	.word	0x0800349f
 80030f8:	08003329 	.word	0x08003329
 80030fc:	0800326f 	.word	0x0800326f
 8003100:	0800349f 	.word	0x0800349f
 8003104:	0800349f 	.word	0x0800349f
 8003108:	08003391 	.word	0x08003391
 800310c:	08003465 	.word	0x08003465
 8003110:	0800346b 	.word	0x0800346b
 8003114:	08003475 	.word	0x08003475
 8003118:	08003483 	.word	0x08003483
 800311c:	08003499 	.word	0x08003499
			{
			case '\0': // initialize
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 8003120:	2201      	movs	r2, #1
 8003122:	496f      	ldr	r1, [pc, #444]	; (80032e0 <motor+0x374>)
 8003124:	4870      	ldr	r0, [pc, #448]	; (80032e8 <motor+0x37c>)
 8003126:	f004 fc6f 	bl	8007a08 <HAL_UART_Receive_IT>
				break;
 800312a:	e1be      	b.n	80034aa <motor+0x53e>
			case 'H':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)&toRpiTest,6);
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	2206      	movs	r2, #6
 8003132:	4619      	mov	r1, r3
 8003134:	486c      	ldr	r0, [pc, #432]	; (80032e8 <motor+0x37c>)
 8003136:	f004 fc22 	bl	800797e <HAL_UART_Transmit_IT>
				osDelay(50);
 800313a:	2032      	movs	r0, #50	; 0x32
 800313c:	f005 fc5c 	bl	80089f8 <osDelay>
				*aRxBuffer = 'Z';
 8003140:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <motor+0x374>)
 8003142:	225a      	movs	r2, #90	; 0x5a
 8003144:	701a      	strb	r2, [r3, #0]
				break;
 8003146:	e1b0      	b.n	80034aa <motor+0x53e>
			case 'K':
				HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK?\n",4);
 8003148:	2204      	movs	r2, #4
 800314a:	4968      	ldr	r1, [pc, #416]	; (80032ec <motor+0x380>)
 800314c:	4866      	ldr	r0, [pc, #408]	; (80032e8 <motor+0x37c>)
 800314e:	f004 fc16 	bl	800797e <HAL_UART_Transmit_IT>
				osDelay(50);
 8003152:	2032      	movs	r0, #50	; 0x32
 8003154:	f005 fc50 	bl	80089f8 <osDelay>
				*aRxBuffer = 'Z';
 8003158:	4b61      	ldr	r3, [pc, #388]	; (80032e0 <motor+0x374>)
 800315a:	225a      	movs	r2, #90	; 0x5a
 800315c:	701a      	strb	r2, [r3, #0]
				break;
 800315e:	e1a4      	b.n	80034aa <motor+0x53e>
			//========================Forward========================
			case '9':
				PIDmotor(100);break;
 8003160:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80032f0 <motor+0x384>
 8003164:	f7fe fcba 	bl	8001adc <PIDmotor>
 8003168:	e19f      	b.n	80034aa <motor+0x53e>
			case '0':
				PIDmotor(10);break;
 800316a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800316e:	f7fe fcb5 	bl	8001adc <PIDmotor>
 8003172:	e19a      	b.n	80034aa <motor+0x53e>
			case '1':
				PIDmotor(20);break;
 8003174:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003178:	f7fe fcb0 	bl	8001adc <PIDmotor>
 800317c:	e195      	b.n	80034aa <motor+0x53e>
			case '2':
				PIDmotor(30);break;
 800317e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003182:	f7fe fcab 	bl	8001adc <PIDmotor>
 8003186:	e190      	b.n	80034aa <motor+0x53e>
			case '3':
				PIDmotor(40);break;
 8003188:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80032f4 <motor+0x388>
 800318c:	f7fe fca6 	bl	8001adc <PIDmotor>
 8003190:	e18b      	b.n	80034aa <motor+0x53e>
			case '4':
				PIDmotor(50);break;
 8003192:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80032f8 <motor+0x38c>
 8003196:	f7fe fca1 	bl	8001adc <PIDmotor>
 800319a:	e186      	b.n	80034aa <motor+0x53e>
			case '5':
				PIDmotor(60);break;
 800319c:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80032fc <motor+0x390>
 80031a0:	f7fe fc9c 	bl	8001adc <PIDmotor>
 80031a4:	e181      	b.n	80034aa <motor+0x53e>
			case '6':
				PIDmotor(70);break;
 80031a6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8003300 <motor+0x394>
 80031aa:	f7fe fc97 	bl	8001adc <PIDmotor>
 80031ae:	e17c      	b.n	80034aa <motor+0x53e>
			case '7':
				PIDmotor(80);break;
 80031b0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8003304 <motor+0x398>
 80031b4:	f7fe fc92 	bl	8001adc <PIDmotor>
 80031b8:	e177      	b.n	80034aa <motor+0x53e>
			case '8':
				PIDmotor(90);break;
 80031ba:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8003308 <motor+0x39c>
 80031be:	f7fe fc8d 	bl	8001adc <PIDmotor>
 80031c2:	e172      	b.n	80034aa <motor+0x53e>
			//========================Reverse========================
			case 33:
				PIDmotor(-10);break;
 80031c4:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80031c8:	f7fe fc88 	bl	8001adc <PIDmotor>
 80031cc:	e16d      	b.n	80034aa <motor+0x53e>
			case 34:
				PIDmotor(-20);break;
 80031ce:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 80031d2:	f7fe fc83 	bl	8001adc <PIDmotor>
 80031d6:	e168      	b.n	80034aa <motor+0x53e>
			case 35:
				PIDmotor(-30);break;
 80031d8:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 80031dc:	f7fe fc7e 	bl	8001adc <PIDmotor>
 80031e0:	e163      	b.n	80034aa <motor+0x53e>
			case 36:
				PIDmotor(-40);break;
 80031e2:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800330c <motor+0x3a0>
 80031e6:	f7fe fc79 	bl	8001adc <PIDmotor>
 80031ea:	e15e      	b.n	80034aa <motor+0x53e>
			case 37:
				PIDmotor(-50);break;
 80031ec:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8003310 <motor+0x3a4>
 80031f0:	f7fe fc74 	bl	8001adc <PIDmotor>
 80031f4:	e159      	b.n	80034aa <motor+0x53e>
			case 38:
				PIDmotor(-60);break;
 80031f6:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8003314 <motor+0x3a8>
 80031fa:	f7fe fc6f 	bl	8001adc <PIDmotor>
 80031fe:	e154      	b.n	80034aa <motor+0x53e>
			case 39:
				PIDmotor(-70);break;
 8003200:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8003318 <motor+0x3ac>
 8003204:	f7fe fc6a 	bl	8001adc <PIDmotor>
 8003208:	e14f      	b.n	80034aa <motor+0x53e>
			case 40:
				PIDmotor(-80);break;
 800320a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800331c <motor+0x3b0>
 800320e:	f7fe fc65 	bl	8001adc <PIDmotor>
 8003212:	e14a      	b.n	80034aa <motor+0x53e>
			case 41:
				PIDmotor(-90);break;
 8003214:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003320 <motor+0x3b4>
 8003218:	f7fe fc60 	bl	8001adc <PIDmotor>
 800321c:	e145      	b.n	80034aa <motor+0x53e>
			case 42:
				PIDmotor(-100);break;
 800321e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003324 <motor+0x3b8>
 8003222:	f7fe fc5b 	bl	8001adc <PIDmotor>
 8003226:	e140      	b.n	80034aa <motor+0x53e>
			//========================Turn========================
			case 'L':
				htim1.Instance->CCR4 = CENTER;
 8003228:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <motor+0x370>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2295      	movs	r2, #149	; 0x95
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 8003230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003234:	f001 f85a 	bl	80042ec <HAL_Delay>
				htim1.Instance->CCR4 = LEFT;
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <motor+0x370>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	226c      	movs	r2, #108	; 0x6c
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 8003240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003244:	f001 f852 	bl	80042ec <HAL_Delay>
				PIDturn(30,1);
 8003248:	2001      	movs	r0, #1
 800324a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800324e:	f7fe fe0f 	bl	8001e70 <PIDturn>
				htim1.Instance->CCR4 = RIGHT;
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <motor+0x370>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	22e3      	movs	r2, #227	; 0xe3
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 800325a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800325e:	f001 f845 	bl	80042ec <HAL_Delay>
				PIDturn(-28,2);
 8003262:	2002      	movs	r0, #2
 8003264:	eebb 0a0c 	vmov.f32	s0, #188	; 0xc1e00000 -28.0
 8003268:	f7fe fe02 	bl	8001e70 <PIDturn>
//				htim1.Instance->CCR4 = LEFT;
//				HAL_Delay(500);
//				PIDturn(30,1);
//				PIDmotor(4.5); //Forward to fit into 10x10 grid
				break;
 800326c:	e11d      	b.n	80034aa <motor+0x53e>

			case 'R':
				htim1.Instance->CCR4 = CENTER;
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <motor+0x370>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2295      	movs	r2, #149	; 0x95
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 8003276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800327a:	f001 f837 	bl	80042ec <HAL_Delay>
				htim1.Instance->CCR4 = RIGHT;
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <motor+0x370>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	22e3      	movs	r2, #227	; 0xe3
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 8003286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800328a:	f001 f82f 	bl	80042ec <HAL_Delay>
				PIDturn(30,2);
 800328e:	2002      	movs	r0, #2
 8003290:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003294:	f7fe fdec 	bl	8001e70 <PIDturn>
				htim1.Instance->CCR4 = LEFT;
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <motor+0x370>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	226c      	movs	r2, #108	; 0x6c
 800329e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 80032a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032a4:	f001 f822 	bl	80042ec <HAL_Delay>
				PIDturn(-28,1);
 80032a8:	2001      	movs	r0, #1
 80032aa:	eebb 0a0c 	vmov.f32	s0, #188	; 0xc1e00000 -28.0
 80032ae:	f7fe fddf 	bl	8001e70 <PIDturn>
				htim1.Instance->CCR4 = RIGHT;
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <motor+0x370>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	22e3      	movs	r2, #227	; 0xe3
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 80032ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032be:	f001 f815 	bl	80042ec <HAL_Delay>
				PIDturn(28,2);
 80032c2:	2002      	movs	r0, #2
 80032c4:	eeb3 0a0c 	vmov.f32	s0, #60	; 0x41e00000  28.0
 80032c8:	f7fe fdd2 	bl	8001e70 <PIDturn>
				PIDmotor(4.5); //Forward to fit into 10x10 grid
 80032cc:	eeb1 0a02 	vmov.f32	s0, #18	; 0x40900000  4.5
 80032d0:	f7fe fc04 	bl	8001adc <PIDmotor>
				break;
 80032d4:	e0e9      	b.n	80034aa <motor+0x53e>
 80032d6:	bf00      	nop
 80032d8:	20004a04 	.word	0x20004a04
 80032dc:	20004c50 	.word	0x20004c50
 80032e0:	20004c9c 	.word	0x20004c9c
 80032e4:	0800d994 	.word	0x0800d994
 80032e8:	20004a94 	.word	0x20004a94
 80032ec:	0800d988 	.word	0x0800d988
 80032f0:	42c80000 	.word	0x42c80000
 80032f4:	42200000 	.word	0x42200000
 80032f8:	42480000 	.word	0x42480000
 80032fc:	42700000 	.word	0x42700000
 8003300:	428c0000 	.word	0x428c0000
 8003304:	42a00000 	.word	0x42a00000
 8003308:	42b40000 	.word	0x42b40000
 800330c:	c2200000 	.word	0xc2200000
 8003310:	c2480000 	.word	0xc2480000
 8003314:	c2700000 	.word	0xc2700000
 8003318:	c28c0000 	.word	0xc28c0000
 800331c:	c2a00000 	.word	0xc2a00000
 8003320:	c2b40000 	.word	0xc2b40000
 8003324:	c2c80000 	.word	0xc2c80000
			case 'Q':
				htim1.Instance->CCR4 = RIGHT;
 8003328:	4b64      	ldr	r3, [pc, #400]	; (80034bc <motor+0x550>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	22e3      	movs	r2, #227	; 0xe3
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 8003330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003334:	f000 ffda 	bl	80042ec <HAL_Delay>
				htim1.Instance->CCR4 = LEFT;
 8003338:	4b60      	ldr	r3, [pc, #384]	; (80034bc <motor+0x550>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	226c      	movs	r2, #108	; 0x6c
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 8003340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003344:	f000 ffd2 	bl	80042ec <HAL_Delay>
				PIDturn(90,1);
 8003348:	2001      	movs	r0, #1
 800334a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80034c0 <motor+0x554>
 800334e:	f7fe fd8f 	bl	8001e70 <PIDturn>
				PIDmotor(3);
 8003352:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003356:	f7fe fbc1 	bl	8001adc <PIDmotor>
				break;
 800335a:	e0a6      	b.n	80034aa <motor+0x53e>
			case 'E':
				htim1.Instance->CCR4 = LEFT;
 800335c:	4b57      	ldr	r3, [pc, #348]	; (80034bc <motor+0x550>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	226c      	movs	r2, #108	; 0x6c
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 8003364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003368:	f000 ffc0 	bl	80042ec <HAL_Delay>
				htim1.Instance->CCR4 = RIGHT;
 800336c:	4b53      	ldr	r3, [pc, #332]	; (80034bc <motor+0x550>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	22e3      	movs	r2, #227	; 0xe3
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 8003374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003378:	f000 ffb8 	bl	80042ec <HAL_Delay>
				PIDturn(90,2);
 800337c:	2002      	movs	r0, #2
 800337e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80034c0 <motor+0x554>
 8003382:	f7fe fd75 	bl	8001e70 <PIDturn>
				PIDmotor(3);
 8003386:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800338a:	f7fe fba7 	bl	8001adc <PIDmotor>
				break;
 800338e:	e08c      	b.n	80034aa <motor+0x53e>
			case 'U':
				ultraDistCheck();
 8003390:	f7fd ff62 	bl	8001258 <ultraDistCheck>
				HAL_Delay(200);
 8003394:	20c8      	movs	r0, #200	; 0xc8
 8003396:	f000 ffa9 	bl	80042ec <HAL_Delay>
				char reply[] = "000\n";
 800339a:	4a4a      	ldr	r2, [pc, #296]	; (80034c4 <motor+0x558>)
 800339c:	f107 0308 	add.w	r3, r7, #8
 80033a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033a4:	6018      	str	r0, [r3, #0]
 80033a6:	3304      	adds	r3, #4
 80033a8:	7019      	strb	r1, [r3, #0]
				reply[0] += uDistFinal / 100 % 10;
 80033aa:	7a38      	ldrb	r0, [r7, #8]
 80033ac:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <motor+0x55c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a46      	ldr	r2, [pc, #280]	; (80034cc <motor+0x560>)
 80033b2:	fb82 1203 	smull	r1, r2, r2, r3
 80033b6:	1152      	asrs	r2, r2, #5
 80033b8:	17db      	asrs	r3, r3, #31
 80033ba:	1ad2      	subs	r2, r2, r3
 80033bc:	4b44      	ldr	r3, [pc, #272]	; (80034d0 <motor+0x564>)
 80033be:	fb83 1302 	smull	r1, r3, r3, r2
 80033c2:	1099      	asrs	r1, r3, #2
 80033c4:	17d3      	asrs	r3, r2, #31
 80033c6:	1ac9      	subs	r1, r1, r3
 80033c8:	460b      	mov	r3, r1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	1ad1      	subs	r1, r2, r3
 80033d2:	b2cb      	uxtb	r3, r1
 80033d4:	4403      	add	r3, r0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	723b      	strb	r3, [r7, #8]
				reply[1] += uDistFinal / 10 % 10;
 80033da:	7a78      	ldrb	r0, [r7, #9]
 80033dc:	4b3a      	ldr	r3, [pc, #232]	; (80034c8 <motor+0x55c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <motor+0x564>)
 80033e2:	fb82 1203 	smull	r1, r2, r2, r3
 80033e6:	1092      	asrs	r2, r2, #2
 80033e8:	17db      	asrs	r3, r3, #31
 80033ea:	1ad2      	subs	r2, r2, r3
 80033ec:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <motor+0x564>)
 80033ee:	fb83 1302 	smull	r1, r3, r3, r2
 80033f2:	1099      	asrs	r1, r3, #2
 80033f4:	17d3      	asrs	r3, r2, #31
 80033f6:	1ac9      	subs	r1, r1, r3
 80033f8:	460b      	mov	r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	1ad1      	subs	r1, r2, r3
 8003402:	b2cb      	uxtb	r3, r1
 8003404:	4403      	add	r3, r0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	727b      	strb	r3, [r7, #9]
				reply[2] += uDistFinal % 10;
 800340a:	7ab8      	ldrb	r0, [r7, #10]
 800340c:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <motor+0x55c>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <motor+0x564>)
 8003412:	fb83 1302 	smull	r1, r3, r3, r2
 8003416:	1099      	asrs	r1, r3, #2
 8003418:	17d3      	asrs	r3, r2, #31
 800341a:	1ac9      	subs	r1, r1, r3
 800341c:	460b      	mov	r3, r1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	1ad1      	subs	r1, r2, r3
 8003426:	b2cb      	uxtb	r3, r1
 8003428:	4403      	add	r3, r0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	72bb      	strb	r3, [r7, #10]
				if (uDistFinal > 999)
 800342e:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <motor+0x55c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003436:	db01      	blt.n	800343c <motor+0x4d0>
					reply[0] = '9';
 8003438:	2339      	movs	r3, #57	; 0x39
 800343a:	723b      	strb	r3, [r7, #8]
				HAL_UART_Transmit_IT(&huart3, (uint8_t *)reply, strlen(reply));
 800343c:	f107 0308 	add.w	r3, r7, #8
 8003440:	4618      	mov	r0, r3
 8003442:	f7fc fec5 	bl	80001d0 <strlen>
 8003446:	4603      	mov	r3, r0
 8003448:	b29a      	uxth	r2, r3
 800344a:	f107 0308 	add.w	r3, r7, #8
 800344e:	4619      	mov	r1, r3
 8003450:	4820      	ldr	r0, [pc, #128]	; (80034d4 <motor+0x568>)
 8003452:	f004 fa94 	bl	800797e <HAL_UART_Transmit_IT>
				osDelay(50);
 8003456:	2032      	movs	r0, #50	; 0x32
 8003458:	f005 face 	bl	80089f8 <osDelay>
				*aRxBuffer = 'Z';
 800345c:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <motor+0x56c>)
 800345e:	225a      	movs	r2, #90	; 0x5a
 8003460:	701a      	strb	r2, [r3, #0]
				break;
 8003462:	e022      	b.n	80034aa <motor+0x53e>
//				osDelay(50);
//				*aRxBuffer = 'R';
//				break;
			/* Test Cases */
			case 'V':
				correction();
 8003464:	f7fe f8f4 	bl	8001650 <correction>
				break;
 8003468:	e01f      	b.n	80034aa <motor+0x53e>
			case 'W':
				PIDmotor(-100);
 800346a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80034dc <motor+0x570>
 800346e:	f7fe fb35 	bl	8001adc <PIDmotor>
				break;
 8003472:	e01a      	b.n	80034aa <motor+0x53e>
			case 'X':
				ultraDistCheck();
 8003474:	f7fd fef0 	bl	8001258 <ultraDistCheck>
				irLeft();
 8003478:	f7fd ff36 	bl	80012e8 <irLeft>
				irRight();
 800347c:	f7fd ffa8 	bl	80013d0 <irRight>
				break;
 8003480:	e013      	b.n	80034aa <motor+0x53e>
			case 'Y':
				HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8003482:	213c      	movs	r1, #60	; 0x3c
 8003484:	4816      	ldr	r0, [pc, #88]	; (80034e0 <motor+0x574>)
 8003486:	f003 f857 	bl	8006538 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 800348a:	213c      	movs	r1, #60	; 0x3c
 800348c:	4815      	ldr	r0, [pc, #84]	; (80034e4 <motor+0x578>)
 800348e:	f003 f853 	bl	8006538 <HAL_TIM_Encoder_Start>
				while(1){
				readEncoder();}
 8003492:	f7fe fa89 	bl	80019a8 <readEncoder>
 8003496:	e7fc      	b.n	8003492 <motor+0x526>
				break;
			case 'Z':
				waitCmd();
 8003498:	f7fe f812 	bl	80014c0 <waitCmd>
				break;
 800349c:	e005      	b.n	80034aa <motor+0x53e>
			default:
//				*aRxBuffer = 'R';
				HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 800349e:	2201      	movs	r2, #1
 80034a0:	490d      	ldr	r1, [pc, #52]	; (80034d8 <motor+0x56c>)
 80034a2:	480c      	ldr	r0, [pc, #48]	; (80034d4 <motor+0x568>)
 80034a4:	f004 fab0 	bl	8007a08 <HAL_UART_Receive_IT>
				break;
 80034a8:	bf00      	nop
			}
			HAL_Delay(100);
 80034aa:	2064      	movs	r0, #100	; 0x64
 80034ac:	f000 ff1e 	bl	80042ec <HAL_Delay>
			HAL_UART_Transmit_IT(&huart3,(uint8_t *)"OK",2);
 80034b0:	2202      	movs	r2, #2
 80034b2:	490d      	ldr	r1, [pc, #52]	; (80034e8 <motor+0x57c>)
 80034b4:	4807      	ldr	r0, [pc, #28]	; (80034d4 <motor+0x568>)
 80034b6:	f004 fa62 	bl	800797e <HAL_UART_Transmit_IT>
			switch (*aRxBuffer)
 80034ba:	e572      	b.n	8002fa2 <motor+0x36>
 80034bc:	20004c50 	.word	0x20004c50
 80034c0:	42b40000 	.word	0x42b40000
 80034c4:	0800d99c 	.word	0x0800d99c
 80034c8:	200000b8 	.word	0x200000b8
 80034cc:	51eb851f 	.word	0x51eb851f
 80034d0:	66666667 	.word	0x66666667
 80034d4:	20004a94 	.word	0x20004a94
 80034d8:	20004c9c 	.word	0x20004c9c
 80034dc:	c2c80000 	.word	0xc2c80000
 80034e0:	20004ca4 	.word	0x20004ca4
 80034e4:	20004b94 	.word	0x20004b94
 80034e8:	0800d990 	.word	0x0800d990

080034ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f0:	b672      	cpsid	i
}
 80034f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <Error_Handler+0x8>

080034f6 <Profile_Init>:
 */

#include "profile.h"
#include "stdbool.h"

void Profile_Init(Profile *profile){
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]


	profile->accTime=0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
	profile->constTime=0;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	60da      	str	r2, [r3, #12]
	profile->decTime=0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	611a      	str	r2, [r3, #16]

	profile->disp=0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	615a      	str	r2, [r3, #20]
	profile->vel=0;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
	profile->acc=0;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	61da      	str	r2, [r3, #28]

	profile->currDisp=0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	621a      	str	r2, [r3, #32]
	profile->currVel=0;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	625a      	str	r2, [r3, #36]	; 0x24
	profile->currAcc=0;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	629a      	str	r2, [r3, #40]	; 0x28

	profile->accDisp=0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c
	profile->constDisp=0;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
	profile->decDisp=0;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	0000      	movs	r0, r0
 800356c:	0000      	movs	r0, r0
	...

08003570 <trapezoidal>:

/* Calculates the timing and displacement for each 3 stages of the motion profile */
float trapezoidal(Profile *profile, float totalDisp, float aMax, float vMax){
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	ed87 0a02 	vstr	s0, [r7, #8]
 800357c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003580:	ed87 1a00 	vstr	s2, [r7]

	profile->aMax = aMax;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	605a      	str	r2, [r3, #4]
	profile->vMax = vMax;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	601a      	str	r2, [r3, #0]

	bool negInput = (totalDisp<0)?true:false;
 8003590:	edd7 7a02 	vldr	s15, [r7, #8]
 8003594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359c:	bf4c      	ite	mi
 800359e:	2301      	movmi	r3, #1
 80035a0:	2300      	movpl	r3, #0
 80035a2:	75fb      	strb	r3, [r7, #23]
	totalDisp = fabs(totalDisp);
 80035a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a8:	eef0 7ae7 	vabs.f32	s15, s15
 80035ac:	edc7 7a02 	vstr	s15, [r7, #8]
	float halfDisp = totalDisp/2.0f;
 80035b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80035b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80035b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035bc:	edc7 7a04 	vstr	s15, [r7, #16]

	profile->acc = profile->aMax;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	61da      	str	r2, [r3, #28]

	/* Compute acceleration period */
	profile->accTime = profile->vMax/profile->aMax;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	edd3 6a00 	vldr	s13, [r3]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80035d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	edc3 7a02 	vstr	s15, [r3, #8]
	profile->accDisp = calculateDisp(profile->aMax,0,profile->accTime);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80035ea:	eeb0 1a47 	vmov.f32	s2, s14
 80035ee:	eddf 0a6e 	vldr	s1, [pc, #440]	; 80037a8 <trapezoidal+0x238>
 80035f2:	eeb0 0a67 	vmov.f32	s0, s15
 80035f6:	f000 f967 	bl	80038c8 <calculateDisp>
 80035fa:	eef0 7a40 	vmov.f32	s15, s0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	if(profile->accDisp>halfDisp){
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800360a:	ed97 7a04 	vldr	s14, [r7, #16]
 800360e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	d515      	bpl.n	8003644 <trapezoidal+0xd4>
		profile->accDisp = halfDisp;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	62da      	str	r2, [r3, #44]	; 0x2c
		profile->accTime = invCalculateDisp(profile->aMax, 0.0, profile->accDisp);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	edd3 7a01 	vldr	s15, [r3, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800362a:	eeb0 1a47 	vmov.f32	s2, s14
 800362e:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80037a8 <trapezoidal+0x238>
 8003632:	eeb0 0a67 	vmov.f32	s0, s15
 8003636:	f000 f993 	bl	8003960 <invCalculateDisp>
 800363a:	eef0 7a40 	vmov.f32	s15, s0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Final Acceleration */


	/* Final velocity */
	profile->vel = profile->accTime * profile->acc;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	ed93 7a02 	vldr	s14, [r3, #8]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Compute constant-velocity period */
	profile->constDisp = fmax(totalDisp - (2.0 * profile->accDisp), 0.0);
 800365a:	68b8      	ldr	r0, [r7, #8]
 800365c:	f7fc ff74 	bl	8000548 <__aeabi_f2d>
 8003660:	4604      	mov	r4, r0
 8003662:	460d      	mov	r5, r1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4618      	mov	r0, r3
 800366a:	f7fc ff6d 	bl	8000548 <__aeabi_f2d>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	f7fc fe0b 	bl	800028c <__adddf3>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4620      	mov	r0, r4
 800367c:	4629      	mov	r1, r5
 800367e:	f7fc fe03 	bl	8000288 <__aeabi_dsub>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	ec43 2b17 	vmov	d7, r2, r3
 800368a:	ed9f 1b45 	vldr	d1, [pc, #276]	; 80037a0 <trapezoidal+0x230>
 800368e:	eeb0 0a47 	vmov.f32	s0, s14
 8003692:	eef0 0a67 	vmov.f32	s1, s15
 8003696:	f008 fcb3 	bl	800c000 <fmax>
 800369a:	ec53 2b10 	vmov	r2, r3, d0
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa79 	bl	8000b98 <__aeabi_d2f>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
	profile->constTime = profile->accTime + (profile->constDisp>0?(profile->constDisp/profile->vel):0.0); //no constant velocity if profile is only acceleration then decceleration
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc ff49 	bl	8000548 <__aeabi_f2d>
 80036b6:	4604      	mov	r4, r0
 80036b8:	460d      	mov	r5, r1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80036c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c8:	dd0c      	ble.n	80036e4 <trapezoidal+0x174>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80036d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036da:	ee16 0a90 	vmov	r0, s13
 80036de:	f7fc ff33 	bl	8000548 <__aeabi_f2d>
 80036e2:	e003      	b.n	80036ec <trapezoidal+0x17c>
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	4622      	mov	r2, r4
 80036ee:	462b      	mov	r3, r5
 80036f0:	f7fc fdcc 	bl	800028c <__adddf3>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7fd fa4c 	bl	8000b98 <__aeabi_d2f>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	60da      	str	r2, [r3, #12]
	profile->constDisp = profile->constDisp + profile->accDisp;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	/*Compute decceleration period */
	profile->decDisp = totalDisp;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	635a      	str	r2, [r3, #52]	; 0x34
	profile->decTime = profile->accTime + profile->constTime;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	ed93 7a02 	vldr	s14, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	edd3 7a03 	vldr	s15, [r3, #12]
 800372e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	edc3 7a04 	vstr	s15, [r3, #16]

	if(negInput){
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d027      	beq.n	800378e <trapezoidal+0x21e>
		profile->vel	   = -(profile->vel);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	edd3 7a06 	vldr	s15, [r3, #24]
 8003744:	eef1 7a67 	vneg.f32	s15, s15
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	edc3 7a06 	vstr	s15, [r3, #24]
		profile->acc 	   = -(profile->aMax);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	edd3 7a01 	vldr	s15, [r3, #4]
 8003754:	eef1 7a67 	vneg.f32	s15, s15
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	edc3 7a07 	vstr	s15, [r3, #28]
		profile->accDisp   = -(profile->accDisp);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003764:	eef1 7a67 	vneg.f32	s15, s15
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		profile->constDisp = -(profile->constDisp);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003774:	eef1 7a67 	vneg.f32	s15, s15
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		profile->decDisp   = -(profile->decDisp);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003784:	eef1 7a67 	vneg.f32	s15, s15
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	}

	return profile->decTime;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	ee07 3a90 	vmov	s15, r3
}
 8003796:	eeb0 0a67 	vmov.f32	s0, s15
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bdb0      	pop	{r4, r5, r7, pc}
	...

080037ac <currProfile>:

/* Set the displacement and time according to the current stage */
void currProfile(Profile *profile, float currTime){
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	ed87 0a00 	vstr	s0, [r7]

	float currVel;
	float stageTime;
	float off;

	if(currTime>=profile->decTime){
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80037be:	ed97 7a00 	vldr	s14, [r7]
 80037c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	db0b      	blt.n	80037e4 <currProfile+0x38>
		profile->decDisp = profile->decDisp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	635a      	str	r2, [r3, #52]	; 0x34
		profile->currVel = 0;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	625a      	str	r2, [r3, #36]	; 0x24
		profile->currAcc = 0;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	if(currTime>=profile->constTime){
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80037ea:	ed97 7a00 	vldr	s14, [r7]
 80037ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	db17      	blt.n	8003828 <currProfile+0x7c>
		currVel = profile->vel;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	617b      	str	r3, [r7, #20]
		profile->currAcc = -(profile->acc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	edd3 7a07 	vldr	s15, [r3, #28]
 8003804:	eef1 7a67 	vneg.f32	s15, s15
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		stageTime = currTime - profile->constTime;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	edd3 7a03 	vldr	s15, [r3, #12]
 8003814:	ed97 7a00 	vldr	s14, [r7]
 8003818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381c:	edc7 7a04 	vstr	s15, [r7, #16]
		off = profile->constDisp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e029      	b.n	800387c <currProfile+0xd0>
	}
	else if(currTime>=profile->accTime){
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	edd3 7a02 	vldr	s15, [r3, #8]
 800382e:	ed97 7a00 	vldr	s14, [r7]
 8003832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383a:	db13      	blt.n	8003864 <currProfile+0xb8>
		currVel = profile->vel;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	617b      	str	r3, [r7, #20]
		profile->currAcc = 0;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
		stageTime = currTime - profile->accTime;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003850:	ed97 7a00 	vldr	s14, [r7]
 8003854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003858:	edc7 7a04 	vstr	s15, [r7, #16]
		off = profile->accDisp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e00b      	b.n	800387c <currProfile+0xd0>
	}
	else{
		currVel = 0;
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
		profile->currAcc = profile->acc;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
		stageTime = currTime;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	613b      	str	r3, [r7, #16]
		off = 0;
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
	}

	/* Output displacement and time */
	profile->currDisp = calculateDisp(profile->currAcc, currVel, stageTime) + off;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003882:	ed97 1a04 	vldr	s2, [r7, #16]
 8003886:	edd7 0a05 	vldr	s1, [r7, #20]
 800388a:	eeb0 0a67 	vmov.f32	s0, s15
 800388e:	f000 f81b 	bl	80038c8 <calculateDisp>
 8003892:	eeb0 7a40 	vmov.f32	s14, s0
 8003896:	edd7 7a03 	vldr	s15, [r7, #12]
 800389a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	edc3 7a08 	vstr	s15, [r3, #32]
	profile->currVel = profile->currAcc * stageTime + currVel;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80038aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80038ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80038c0:	bf00      	nop
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <calculateDisp>:


/*Calculates the displacement of object given constant acceleration and initial velocity for a given time */
float calculateDisp(float acc, float vel, float time){
 80038c8:	b5b0      	push	{r4, r5, r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80038d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80038d6:	ed87 1a01 	vstr	s2, [r7, #4]
	return (0.5 * acc * powf(time,2) + (vel * time));
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7fc fe34 	bl	8000548 <__aeabi_f2d>
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <calculateDisp+0x90>)
 80038e6:	f7fc fe87 	bl	80005f8 <__aeabi_dmul>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4614      	mov	r4, r2
 80038f0:	461d      	mov	r5, r3
 80038f2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80038f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80038fa:	f008 fcb5 	bl	800c268 <powf>
 80038fe:	ee10 3a10 	vmov	r3, s0
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fe20 	bl	8000548 <__aeabi_f2d>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	f7fc fe72 	bl	80005f8 <__aeabi_dmul>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003920:	edd7 7a01 	vldr	s15, [r7, #4]
 8003924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003928:	ee17 0a90 	vmov	r0, s15
 800392c:	f7fc fe0c 	bl	8000548 <__aeabi_f2d>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4620      	mov	r0, r4
 8003936:	4629      	mov	r1, r5
 8003938:	f7fc fca8 	bl	800028c <__adddf3>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f7fd f928 	bl	8000b98 <__aeabi_d2f>
 8003948:	4603      	mov	r3, r0
 800394a:	ee07 3a90 	vmov	s15, r3
}
 800394e:	eeb0 0a67 	vmov.f32	s0, s15
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bdb0      	pop	{r4, r5, r7, pc}
 8003958:	3fe00000 	.word	0x3fe00000
 800395c:	00000000 	.word	0x00000000

08003960 <invCalculateDisp>:

/*Calculates the time needed given constant acceleration, initial velocity and displacement*/
float invCalculateDisp(float acc, float vel, float disp){
 8003960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003964:	b08a      	sub	sp, #40	; 0x28
 8003966:	af00      	add	r7, sp, #0
 8003968:	ed87 0a03 	vstr	s0, [r7, #12]
 800396c:	edc7 0a02 	vstr	s1, [r7, #8]
 8003970:	ed87 1a01 	vstr	s2, [r7, #4]
	float a = 0.5 * acc;
 8003974:	edd7 7a03 	vldr	s15, [r7, #12]
 8003978:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800397c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003980:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float b = vel;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	623b      	str	r3, [r7, #32]
	float c = -disp;
 8003988:	edd7 7a01 	vldr	s15, [r7, #4]
 800398c:	eef1 7a67 	vneg.f32	s15, s15
 8003990:	edc7 7a07 	vstr	s15, [r7, #28]

	float s1 = (- b + sqrt(pow(b,2) - 4 * a * c))/(2 * a);
 8003994:	edd7 7a08 	vldr	s15, [r7, #32]
 8003998:	eef1 7a67 	vneg.f32	s15, s15
 800399c:	ee17 3a90 	vmov	r3, s15
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fdd1 	bl	8000548 <__aeabi_f2d>
 80039a6:	4604      	mov	r4, r0
 80039a8:	460d      	mov	r5, r1
 80039aa:	6a38      	ldr	r0, [r7, #32]
 80039ac:	f7fc fdcc 	bl	8000548 <__aeabi_f2d>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8003b30 <invCalculateDisp+0x1d0>
 80039b8:	ec43 2b10 	vmov	d0, r2, r3
 80039bc:	f008 fb72 	bl	800c0a4 <pow>
 80039c0:	ec59 8b10 	vmov	r8, r9, d0
 80039c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039c8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80039cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80039d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d8:	ee17 0a90 	vmov	r0, s15
 80039dc:	f7fc fdb4 	bl	8000548 <__aeabi_f2d>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4640      	mov	r0, r8
 80039e6:	4649      	mov	r1, r9
 80039e8:	f7fc fc4e 	bl	8000288 <__aeabi_dsub>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	ec43 2b17 	vmov	d7, r2, r3
 80039f4:	eeb0 0a47 	vmov.f32	s0, s14
 80039f8:	eef0 0a67 	vmov.f32	s1, s15
 80039fc:	f008 fc00 	bl	800c200 <sqrt>
 8003a00:	ec53 2b10 	vmov	r2, r3, d0
 8003a04:	4620      	mov	r0, r4
 8003a06:	4629      	mov	r1, r5
 8003a08:	f7fc fc40 	bl	800028c <__adddf3>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a1c:	ee17 0a90 	vmov	r0, s15
 8003a20:	f7fc fd92 	bl	8000548 <__aeabi_f2d>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4620      	mov	r0, r4
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f7fc ff0e 	bl	800084c <__aeabi_ddiv>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7fd f8ae 	bl	8000b98 <__aeabi_d2f>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	61bb      	str	r3, [r7, #24]
	float s2 = (- b - sqrt(pow(b,2) - 4 * a * c))/(2 * a);
 8003a40:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a44:	eef1 7a67 	vneg.f32	s15, s15
 8003a48:	ee17 3a90 	vmov	r3, s15
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fd7b 	bl	8000548 <__aeabi_f2d>
 8003a52:	4604      	mov	r4, r0
 8003a54:	460d      	mov	r5, r1
 8003a56:	6a38      	ldr	r0, [r7, #32]
 8003a58:	f7fc fd76 	bl	8000548 <__aeabi_f2d>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8003b30 <invCalculateDisp+0x1d0>
 8003a64:	ec43 2b10 	vmov	d0, r2, r3
 8003a68:	f008 fb1c 	bl	800c0a4 <pow>
 8003a6c:	ec59 8b10 	vmov	r8, r9, d0
 8003a70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a74:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003a78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a84:	ee17 0a90 	vmov	r0, s15
 8003a88:	f7fc fd5e 	bl	8000548 <__aeabi_f2d>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4640      	mov	r0, r8
 8003a92:	4649      	mov	r1, r9
 8003a94:	f7fc fbf8 	bl	8000288 <__aeabi_dsub>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	ec43 2b17 	vmov	d7, r2, r3
 8003aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8003aa4:	eef0 0a67 	vmov.f32	s1, s15
 8003aa8:	f008 fbaa 	bl	800c200 <sqrt>
 8003aac:	ec53 2b10 	vmov	r2, r3, d0
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	f7fc fbe8 	bl	8000288 <__aeabi_dsub>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4614      	mov	r4, r2
 8003abe:	461d      	mov	r5, r3
 8003ac0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ac4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ac8:	ee17 0a90 	vmov	r0, s15
 8003acc:	f7fc fd3c 	bl	8000548 <__aeabi_f2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc feb8 	bl	800084c <__aeabi_ddiv>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7fd f858 	bl	8000b98 <__aeabi_d2f>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	617b      	str	r3, [r7, #20]

	return fmax(s1,s2);
 8003aec:	69b8      	ldr	r0, [r7, #24]
 8003aee:	f7fc fd2b 	bl	8000548 <__aeabi_f2d>
 8003af2:	4604      	mov	r4, r0
 8003af4:	460d      	mov	r5, r1
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f7fc fd26 	bl	8000548 <__aeabi_f2d>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	ec43 2b11 	vmov	d1, r2, r3
 8003b04:	ec45 4b10 	vmov	d0, r4, r5
 8003b08:	f008 fa7a 	bl	800c000 <fmax>
 8003b0c:	ec53 2b10 	vmov	r2, r3, d0
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	f7fd f840 	bl	8000b98 <__aeabi_d2f>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	ee07 3a90 	vmov	s15, r3
}
 8003b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b22:	3728      	adds	r7, #40	; 0x28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b2a:	bf00      	nop
 8003b2c:	f3af 8000 	nop.w
 8003b30:	00000000 	.word	0x00000000
 8003b34:	40000000 	.word	0x40000000

08003b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_MspInit+0x54>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <HAL_MspInit+0x54>)
 8003b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <HAL_MspInit+0x54>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_MspInit+0x54>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <HAL_MspInit+0x54>)
 8003b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b68:	6413      	str	r3, [r2, #64]	; 0x40
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_MspInit+0x54>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b76:	2200      	movs	r2, #0
 8003b78:	210f      	movs	r1, #15
 8003b7a:	f06f 0001 	mvn.w	r0, #1
 8003b7e:	f000 fff6 	bl	8004b6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800

08003b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	; 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	f107 031c 	add.w	r3, r7, #28
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2e      	ldr	r2, [pc, #184]	; (8003c68 <HAL_ADC_MspInit+0xd8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d128      	bne.n	8003c04 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4a25      	ldr	r2, [pc, #148]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8003bea:	2312      	movs	r3, #18
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf6:	f107 031c 	add.w	r3, r7, #28
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	481c      	ldr	r0, [pc, #112]	; (8003c70 <HAL_ADC_MspInit+0xe0>)
 8003bfe:	f001 f87f 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003c02:	e02c      	b.n	8003c5e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <HAL_ADC_MspInit+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d127      	bne.n	8003c5e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_ADC_MspInit+0xdc>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c46:	2304      	movs	r3, #4
 8003c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c52:	f107 031c 	add.w	r3, r7, #28
 8003c56:	4619      	mov	r1, r3
 8003c58:	4805      	ldr	r0, [pc, #20]	; (8003c70 <HAL_ADC_MspInit+0xe0>)
 8003c5a:	f001 f851 	bl	8004d00 <HAL_GPIO_Init>
}
 8003c5e:	bf00      	nop
 8003c60:	3730      	adds	r7, #48	; 0x30
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40012000 	.word	0x40012000
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020800 	.word	0x40020800
 8003c74:	40012100 	.word	0x40012100

08003c78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c80:	f107 0308 	add.w	r3, r7, #8
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <HAL_RTC_MspInit+0x4c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d111      	bne.n	8003cbc <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ca2:	f107 0308 	add.w	r3, r7, #8
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 fe50 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003cb2:	f7ff fc1b 	bl	80034ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <HAL_RTC_MspInit+0x50>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003cbc:	bf00      	nop
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40002800 	.word	0x40002800
 8003cc8:	42470e3c 	.word	0x42470e3c

08003ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <HAL_TIM_Base_MspInit+0x64>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10e      	bne.n	8003cfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_TIM_Base_MspInit+0x68>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <HAL_TIM_Base_MspInit+0x68>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6453      	str	r3, [r2, #68]	; 0x44
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_TIM_Base_MspInit+0x68>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003cfa:	e012      	b.n	8003d22 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <HAL_TIM_Base_MspInit+0x6c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10d      	bne.n	8003d22 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_TIM_Base_MspInit+0x68>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <HAL_TIM_Base_MspInit+0x68>)
 8003d10:	f043 0308 	orr.w	r3, r3, #8
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <HAL_TIM_Base_MspInit+0x68>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40000c00 	.word	0x40000c00

08003d3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 031c 	add.w	r3, r7, #28
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d14b      	bne.n	8003df6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a3e      	ldr	r2, [pc, #248]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a37      	ldr	r2, [pc, #220]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a30      	ldr	r2, [pc, #192]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc8:	f107 031c 	add.w	r3, r7, #28
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4825      	ldr	r0, [pc, #148]	; (8003e64 <HAL_TIM_Encoder_MspInit+0x128>)
 8003dd0:	f000 ff96 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	2300      	movs	r3, #0
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003de4:	2301      	movs	r3, #1
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de8:	f107 031c 	add.w	r3, r7, #28
 8003dec:	4619      	mov	r1, r3
 8003dee:	481e      	ldr	r0, [pc, #120]	; (8003e68 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003df0:	f000 ff86 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003df4:	e030      	b.n	8003e58 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <HAL_TIM_Encoder_MspInit+0x130>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d12b      	bne.n	8003e58 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e0a:	f043 0302 	orr.w	r3, r3, #2
 8003e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e10:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e38:	23c0      	movs	r3, #192	; 0xc0
 8003e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4c:	f107 031c 	add.w	r3, r7, #28
 8003e50:	4619      	mov	r1, r3
 8003e52:	4804      	ldr	r0, [pc, #16]	; (8003e64 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e54:	f000 ff54 	bl	8004d00 <HAL_GPIO_Init>
}
 8003e58:	bf00      	nop
 8003e5a:	3730      	adds	r7, #48	; 0x30
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40020000 	.word	0x40020000
 8003e68:	40020400 	.word	0x40020400
 8003e6c:	40000400 	.word	0x40000400

08003e70 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_TIM_IC_MspInit+0x94>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d134      	bne.n	8003efc <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_TIM_IC_MspInit+0x98>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_TIM_IC_MspInit+0x98>)
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_TIM_IC_MspInit+0x98>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <HAL_TIM_IC_MspInit+0x98>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <HAL_TIM_IC_MspInit+0x98>)
 8003eb8:	f043 0308 	orr.w	r3, r3, #8
 8003ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_TIM_IC_MspInit+0x98>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003edc:	2302      	movs	r3, #2
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4809      	ldr	r0, [pc, #36]	; (8003f0c <HAL_TIM_IC_MspInit+0x9c>)
 8003ee8:	f000 ff0a 	bl	8004d00 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003eec:	2200      	movs	r2, #0
 8003eee:	2105      	movs	r1, #5
 8003ef0:	201e      	movs	r0, #30
 8003ef2:	f000 fe3c 	bl	8004b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ef6:	201e      	movs	r0, #30
 8003ef8:	f000 fe55 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003efc:	bf00      	nop
 8003efe:	3728      	adds	r7, #40	; 0x28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40020c00 	.word	0x40020c00

08003f10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_TIM_PWM_MspInit+0x84>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d12b      	bne.n	8003f8a <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_TIM_PWM_MspInit+0x88>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_TIM_PWM_MspInit+0x88>)
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	6453      	str	r3, [r2, #68]	; 0x44
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <HAL_TIM_PWM_MspInit+0x88>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_TIM_PWM_MspInit+0x88>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <HAL_TIM_PWM_MspInit+0x88>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5e:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_TIM_PWM_MspInit+0x88>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003f6a:	23c0      	movs	r3, #192	; 0xc0
 8003f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f76:	2300      	movs	r3, #0
 8003f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	4619      	mov	r1, r3
 8003f84:	4805      	ldr	r0, [pc, #20]	; (8003f9c <HAL_TIM_PWM_MspInit+0x8c>)
 8003f86:	f000 febb 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f8a:	bf00      	nop
 8003f8c:	3728      	adds	r7, #40	; 0x28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40010400 	.word	0x40010400
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40020800 	.word	0x40020800

08003fa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 030c 	add.w	r3, r7, #12
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a12      	ldr	r2, [pc, #72]	; (8004008 <HAL_TIM_MspPostInit+0x68>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d11e      	bne.n	8004000 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_TIM_MspPostInit+0x6c>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	4a10      	ldr	r2, [pc, #64]	; (800400c <HAL_TIM_MspPostInit+0x6c>)
 8003fcc:	f043 0310 	orr.w	r3, r3, #16
 8003fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	; (800400c <HAL_TIM_MspPostInit+0x6c>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fe2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ff4:	f107 030c 	add.w	r3, r7, #12
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4805      	ldr	r0, [pc, #20]	; (8004010 <HAL_TIM_MspPostInit+0x70>)
 8003ffc:	f000 fe80 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004000:	bf00      	nop
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40010000 	.word	0x40010000
 800400c:	40023800 	.word	0x40023800
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <HAL_UART_MspInit+0x94>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d134      	bne.n	80040a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	4b1c      	ldr	r3, [pc, #112]	; (80040ac <HAL_UART_MspInit+0x98>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_UART_MspInit+0x98>)
 8004040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_UART_MspInit+0x98>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_UART_MspInit+0x98>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	4a14      	ldr	r2, [pc, #80]	; (80040ac <HAL_UART_MspInit+0x98>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6313      	str	r3, [r2, #48]	; 0x30
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_UART_MspInit+0x98>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800406e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004074:	2302      	movs	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407c:	2303      	movs	r3, #3
 800407e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004080:	2307      	movs	r3, #7
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4619      	mov	r1, r3
 800408a:	4809      	ldr	r0, [pc, #36]	; (80040b0 <HAL_UART_MspInit+0x9c>)
 800408c:	f000 fe38 	bl	8004d00 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004090:	2200      	movs	r2, #0
 8004092:	2105      	movs	r1, #5
 8004094:	2027      	movs	r0, #39	; 0x27
 8004096:	f000 fd6a 	bl	8004b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800409a:	2027      	movs	r0, #39	; 0x27
 800409c:	f000 fd83 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80040a0:	bf00      	nop
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40004800 	.word	0x40004800
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40020800 	.word	0x40020800

080040b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040b8:	e7fe      	b.n	80040b8 <NMI_Handler+0x4>

080040ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ba:	b480      	push	{r7}
 80040bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040be:	e7fe      	b.n	80040be <HardFault_Handler+0x4>

080040c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c4:	e7fe      	b.n	80040c4 <MemManage_Handler+0x4>

080040c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ca:	e7fe      	b.n	80040ca <BusFault_Handler+0x4>

080040cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040d0:	e7fe      	b.n	80040d0 <UsageFault_Handler+0x4>

080040d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e4:	f000 f8e2 	bl	80042ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80040e8:	f006 f894 	bl	800a214 <xTaskGetSchedulerState>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d001      	beq.n	80040f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80040f2:	f006 fe79 	bl	800ade8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004100:	4802      	ldr	r0, [pc, #8]	; (800410c <TIM4_IRQHandler+0x10>)
 8004102:	f002 faa7 	bl	8006654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20004a4c 	.word	0x20004a4c

08004110 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004114:	4802      	ldr	r0, [pc, #8]	; (8004120 <USART3_IRQHandler+0x10>)
 8004116:	f003 fca7 	bl	8007a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20004a94 	.word	0x20004a94

08004124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800412c:	4a14      	ldr	r2, [pc, #80]	; (8004180 <_sbrk+0x5c>)
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <_sbrk+0x60>)
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <_sbrk+0x64>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d102      	bne.n	8004146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <_sbrk+0x64>)
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <_sbrk+0x68>)
 8004144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <_sbrk+0x64>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d207      	bcs.n	8004164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004154:	f007 faf4 	bl	800b740 <__errno>
 8004158:	4603      	mov	r3, r0
 800415a:	220c      	movs	r2, #12
 800415c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004162:	e009      	b.n	8004178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <_sbrk+0x64>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <_sbrk+0x64>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <_sbrk+0x64>)
 8004174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20020000 	.word	0x20020000
 8004184:	00000400 	.word	0x00000400
 8004188:	200000dc 	.word	0x200000dc
 800418c:	20005160 	.word	0x20005160

08004190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <SystemInit+0x20>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <SystemInit+0x20>)
 800419c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041b8:	480d      	ldr	r0, [pc, #52]	; (80041f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041ba:	490e      	ldr	r1, [pc, #56]	; (80041f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041bc:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041c0:	e002      	b.n	80041c8 <LoopCopyDataInit>

080041c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041c6:	3304      	adds	r3, #4

080041c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041cc:	d3f9      	bcc.n	80041c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ce:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041d0:	4c0b      	ldr	r4, [pc, #44]	; (8004200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041d4:	e001      	b.n	80041da <LoopFillZerobss>

080041d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041d8:	3204      	adds	r2, #4

080041da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041dc:	d3fb      	bcc.n	80041d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041de:	f7ff ffd7 	bl	8004190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041e2:	f007 fab3 	bl	800b74c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041e6:	f7fe f971 	bl	80024cc <main>
  bx  lr    
 80041ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80041f8:	0800e528 	.word	0x0800e528
  ldr r2, =_sbss
 80041fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004200:	20005160 	.word	0x20005160

08004204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004204:	e7fe      	b.n	8004204 <ADC_IRQHandler>
	...

08004208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_Init+0x40>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <HAL_Init+0x40>)
 8004212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_Init+0x40>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <HAL_Init+0x40>)
 800421e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_Init+0x40>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_Init+0x40>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004230:	2003      	movs	r0, #3
 8004232:	f000 fc91 	bl	8004b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004236:	200f      	movs	r0, #15
 8004238:	f000 f808 	bl	800424c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800423c:	f7ff fc7c 	bl	8003b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023c00 	.word	0x40023c00

0800424c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_InitTick+0x54>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_InitTick+0x58>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004262:	fbb3 f3f1 	udiv	r3, r3, r1
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fca9 	bl	8004bc2 <HAL_SYSTICK_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e00e      	b.n	8004298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d80a      	bhi.n	8004296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004280:	2200      	movs	r2, #0
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004288:	f000 fc71 	bl	8004b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800428c:	4a06      	ldr	r2, [pc, #24]	; (80042a8 <HAL_InitTick+0x5c>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000000 	.word	0x20000000
 80042a4:	20000008 	.word	0x20000008
 80042a8:	20000004 	.word	0x20000004

080042ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_IncTick+0x20>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_IncTick+0x24>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_IncTick+0x24>)
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000008 	.word	0x20000008
 80042d0:	20004d0c 	.word	0x20004d0c

080042d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return uwTick;
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_GetTick+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20004d0c 	.word	0x20004d0c

080042ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7ff ffee 	bl	80042d4 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004304:	d005      	beq.n	8004312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_Delay+0x44>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004312:	bf00      	nop
 8004314:	f7ff ffde 	bl	80042d4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d8f7      	bhi.n	8004314 <HAL_Delay+0x28>
  {
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000008 	.word	0x20000008

08004334 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e033      	b.n	80043b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fc1c 	bl	8003b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d118      	bne.n	80043a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800437a:	f023 0302 	bic.w	r3, r3, #2
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa1a 	bl	80047c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	f043 0201 	orr.w	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
 80043a2:	e001      	b.n	80043a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_ADC_Start+0x1a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0b2      	b.n	800453c <HAL_ADC_Start+0x180>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d018      	beq.n	800441e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043fc:	4b52      	ldr	r3, [pc, #328]	; (8004548 <HAL_ADC_Start+0x18c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a52      	ldr	r2, [pc, #328]	; (800454c <HAL_ADC_Start+0x190>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0c9a      	lsrs	r2, r3, #18
 8004408:	4613      	mov	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4413      	add	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004410:	e002      	b.n	8004418 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	3b01      	subs	r3, #1
 8004416:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f9      	bne.n	8004412 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d17a      	bne.n	8004522 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d106      	bne.n	800447a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	f023 0206 	bic.w	r2, r3, #6
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
 8004478:	e002      	b.n	8004480 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004488:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_ADC_Start+0x194>)
 800448a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004494:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d12a      	bne.n	80044f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <HAL_ADC_Start+0x198>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d015      	beq.n	80044d8 <HAL_ADC_Start+0x11c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a29      	ldr	r2, [pc, #164]	; (8004558 <HAL_ADC_Start+0x19c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d105      	bne.n	80044c2 <HAL_ADC_Start+0x106>
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <HAL_ADC_Start+0x194>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a25      	ldr	r2, [pc, #148]	; (800455c <HAL_ADC_Start+0x1a0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d136      	bne.n	800453a <HAL_ADC_Start+0x17e>
 80044cc:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_ADC_Start+0x194>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d130      	bne.n	800453a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d129      	bne.n	800453a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	e020      	b.n	800453a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_ADC_Start+0x198>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d11b      	bne.n	800453a <HAL_ADC_Start+0x17e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d114      	bne.n	800453a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	e00b      	b.n	800453a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000000 	.word	0x20000000
 800454c:	431bde83 	.word	0x431bde83
 8004550:	40012300 	.word	0x40012300
 8004554:	40012000 	.word	0x40012000
 8004558:	40012100 	.word	0x40012100
 800455c:	40012200 	.word	0x40012200

08004560 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x1c>
 8004594:	2302      	movs	r3, #2
 8004596:	e105      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x228>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d925      	bls.n	80045f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	3b1e      	subs	r3, #30
 80045be:	2207      	movs	r2, #7
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43da      	mvns	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	400a      	ands	r2, r1
 80045cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68d9      	ldr	r1, [r3, #12]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4618      	mov	r0, r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	4403      	add	r3, r0
 80045e6:	3b1e      	subs	r3, #30
 80045e8:	409a      	lsls	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	e022      	b.n	800463a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6919      	ldr	r1, [r3, #16]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	2207      	movs	r2, #7
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43da      	mvns	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	400a      	ands	r2, r1
 8004616:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6919      	ldr	r1, [r3, #16]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	4618      	mov	r0, r3
 800462a:	4603      	mov	r3, r0
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4403      	add	r3, r0
 8004630:	409a      	lsls	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b06      	cmp	r3, #6
 8004640:	d824      	bhi.n	800468c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	3b05      	subs	r3, #5
 8004654:	221f      	movs	r2, #31
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43da      	mvns	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	400a      	ands	r2, r1
 8004662:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	4618      	mov	r0, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	3b05      	subs	r3, #5
 800467e:	fa00 f203 	lsl.w	r2, r0, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	635a      	str	r2, [r3, #52]	; 0x34
 800468a:	e04c      	b.n	8004726 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d824      	bhi.n	80046de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	3b23      	subs	r3, #35	; 0x23
 80046a6:	221f      	movs	r2, #31
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43da      	mvns	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	400a      	ands	r2, r1
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	4618      	mov	r0, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	3b23      	subs	r3, #35	; 0x23
 80046d0:	fa00 f203 	lsl.w	r2, r0, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
 80046dc:	e023      	b.n	8004726 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	3b41      	subs	r3, #65	; 0x41
 80046f0:	221f      	movs	r2, #31
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43da      	mvns	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	400a      	ands	r2, r1
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	4618      	mov	r0, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	3b41      	subs	r3, #65	; 0x41
 800471a:	fa00 f203 	lsl.w	r2, r0, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <HAL_ADC_ConfigChannel+0x234>)
 8004728:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <HAL_ADC_ConfigChannel+0x238>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d109      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x1cc>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b12      	cmp	r3, #18
 800473a:	d105      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_ADC_ConfigChannel+0x238>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d123      	bne.n	800479a <HAL_ADC_ConfigChannel+0x21e>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b10      	cmp	r3, #16
 8004758:	d003      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x1e6>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b11      	cmp	r3, #17
 8004760:	d11b      	bne.n	800479a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b10      	cmp	r3, #16
 8004774:	d111      	bne.n	800479a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_ADC_ConfigChannel+0x23c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a10      	ldr	r2, [pc, #64]	; (80047bc <HAL_ADC_ConfigChannel+0x240>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	0c9a      	lsrs	r2, r3, #18
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800478c:	e002      	b.n	8004794 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3b01      	subs	r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f9      	bne.n	800478e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40012300 	.word	0x40012300
 80047b4:	40012000 	.word	0x40012000
 80047b8:	20000000 	.word	0x20000000
 80047bc:	431bde83 	.word	0x431bde83

080047c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047c8:	4b79      	ldr	r3, [pc, #484]	; (80049b0 <ADC_Init+0x1f0>)
 80047ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	021a      	lsls	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004818:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	4a58      	ldr	r2, [pc, #352]	; (80049b4 <ADC_Init+0x1f4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d022      	beq.n	800489e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004866:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6899      	ldr	r1, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6899      	ldr	r1, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	e00f      	b.n	80048be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0202 	bic.w	r2, r2, #2
 80048cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	7e1b      	ldrb	r3, [r3, #24]
 80048d8:	005a      	lsls	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01b      	beq.n	8004924 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800490a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6859      	ldr	r1, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	3b01      	subs	r3, #1
 8004918:	035a      	lsls	r2, r3, #13
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	e007      	b.n	8004934 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004932:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004942:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	3b01      	subs	r3, #1
 8004950:	051a      	lsls	r2, r3, #20
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6899      	ldr	r1, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004976:	025a      	lsls	r2, r3, #9
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6899      	ldr	r1, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	029a      	lsls	r2, r3, #10
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40012300 	.word	0x40012300
 80049b4:	0f000001 	.word	0x0f000001

080049b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <__NVIC_SetPriorityGrouping+0x44>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049d4:	4013      	ands	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <__NVIC_SetPriorityGrouping+0x44>)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	60d3      	str	r3, [r2, #12]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <__NVIC_GetPriorityGrouping+0x18>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	f003 0307 	and.w	r3, r3, #7
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	db0b      	blt.n	8004a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	f003 021f 	and.w	r2, r3, #31
 8004a34:	4907      	ldr	r1, [pc, #28]	; (8004a54 <__NVIC_EnableIRQ+0x38>)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	e000e100 	.word	0xe000e100

08004a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	6039      	str	r1, [r7, #0]
 8004a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	db0a      	blt.n	8004a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	490c      	ldr	r1, [pc, #48]	; (8004aa4 <__NVIC_SetPriority+0x4c>)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	0112      	lsls	r2, r2, #4
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a80:	e00a      	b.n	8004a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	4908      	ldr	r1, [pc, #32]	; (8004aa8 <__NVIC_SetPriority+0x50>)
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	3b04      	subs	r3, #4
 8004a90:	0112      	lsls	r2, r2, #4
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	440b      	add	r3, r1
 8004a96:	761a      	strb	r2, [r3, #24]
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000e100 	.word	0xe000e100
 8004aa8:	e000ed00 	.word	0xe000ed00

08004aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f1c3 0307 	rsb	r3, r3, #7
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	bf28      	it	cs
 8004aca:	2304      	movcs	r3, #4
 8004acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	2b06      	cmp	r3, #6
 8004ad4:	d902      	bls.n	8004adc <NVIC_EncodePriority+0x30>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	3b03      	subs	r3, #3
 8004ada:	e000      	b.n	8004ade <NVIC_EncodePriority+0x32>
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43da      	mvns	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	401a      	ands	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	43d9      	mvns	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b04:	4313      	orrs	r3, r2
         );
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3724      	adds	r7, #36	; 0x24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b24:	d301      	bcc.n	8004b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b26:	2301      	movs	r3, #1
 8004b28:	e00f      	b.n	8004b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <SysTick_Config+0x40>)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b32:	210f      	movs	r1, #15
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b38:	f7ff ff8e 	bl	8004a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <SysTick_Config+0x40>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b42:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <SysTick_Config+0x40>)
 8004b44:	2207      	movs	r2, #7
 8004b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	e000e010 	.word	0xe000e010

08004b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ff29 	bl	80049b8 <__NVIC_SetPriorityGrouping>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b80:	f7ff ff3e 	bl	8004a00 <__NVIC_GetPriorityGrouping>
 8004b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	6978      	ldr	r0, [r7, #20]
 8004b8c:	f7ff ff8e 	bl	8004aac <NVIC_EncodePriority>
 8004b90:	4602      	mov	r2, r0
 8004b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff5d 	bl	8004a58 <__NVIC_SetPriority>
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff31 	bl	8004a1c <__NVIC_EnableIRQ>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ffa2 	bl	8004b14 <SysTick_Config>
 8004bd0:	4603      	mov	r3, r0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004be8:	f7ff fb74 	bl	80042d4 <HAL_GetTick>
 8004bec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d008      	beq.n	8004c0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2280      	movs	r2, #128	; 0x80
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e052      	b.n	8004cb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0216 	bic.w	r2, r2, #22
 8004c1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <HAL_DMA_Abort+0x62>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0208 	bic.w	r2, r2, #8
 8004c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c5c:	e013      	b.n	8004c86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c5e:	f7ff fb39 	bl	80042d4 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b05      	cmp	r3, #5
 8004c6a:	d90c      	bls.n	8004c86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2203      	movs	r2, #3
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e015      	b.n	8004cb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e4      	bne.n	8004c5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	223f      	movs	r2, #63	; 0x3f
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e00c      	b.n	8004cf2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2205      	movs	r2, #5
 8004cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	; 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e16b      	b.n	8004ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	f040 815a 	bne.w	8004fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d005      	beq.n	8004d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d130      	bne.n	8004db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d88:	2201      	movs	r2, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 0201 	and.w	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d017      	beq.n	8004df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d123      	bne.n	8004e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	08da      	lsrs	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3208      	adds	r2, #8
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	220f      	movs	r2, #15
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	08da      	lsrs	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3208      	adds	r2, #8
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2203      	movs	r2, #3
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0203 	and.w	r2, r3, #3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80b4 	beq.w	8004fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	4b60      	ldr	r3, [pc, #384]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	4a5f      	ldr	r2, [pc, #380]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e94:	6453      	str	r3, [r2, #68]	; 0x44
 8004e96:	4b5d      	ldr	r3, [pc, #372]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea2:	4a5b      	ldr	r2, [pc, #364]	; (8005010 <HAL_GPIO_Init+0x310>)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	220f      	movs	r2, #15
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a52      	ldr	r2, [pc, #328]	; (8005014 <HAL_GPIO_Init+0x314>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d02b      	beq.n	8004f26 <HAL_GPIO_Init+0x226>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a51      	ldr	r2, [pc, #324]	; (8005018 <HAL_GPIO_Init+0x318>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d025      	beq.n	8004f22 <HAL_GPIO_Init+0x222>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a50      	ldr	r2, [pc, #320]	; (800501c <HAL_GPIO_Init+0x31c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01f      	beq.n	8004f1e <HAL_GPIO_Init+0x21e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a4f      	ldr	r2, [pc, #316]	; (8005020 <HAL_GPIO_Init+0x320>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d019      	beq.n	8004f1a <HAL_GPIO_Init+0x21a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a4e      	ldr	r2, [pc, #312]	; (8005024 <HAL_GPIO_Init+0x324>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_GPIO_Init+0x216>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a4d      	ldr	r2, [pc, #308]	; (8005028 <HAL_GPIO_Init+0x328>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00d      	beq.n	8004f12 <HAL_GPIO_Init+0x212>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a4c      	ldr	r2, [pc, #304]	; (800502c <HAL_GPIO_Init+0x32c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <HAL_GPIO_Init+0x20e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4b      	ldr	r2, [pc, #300]	; (8005030 <HAL_GPIO_Init+0x330>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <HAL_GPIO_Init+0x20a>
 8004f06:	2307      	movs	r3, #7
 8004f08:	e00e      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	e00c      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f0e:	2306      	movs	r3, #6
 8004f10:	e00a      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f12:	2305      	movs	r3, #5
 8004f14:	e008      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e006      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e004      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e002      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f26:	2300      	movs	r3, #0
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	f002 0203 	and.w	r2, r2, #3
 8004f2e:	0092      	lsls	r2, r2, #2
 8004f30:	4093      	lsls	r3, r2
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f38:	4935      	ldr	r1, [pc, #212]	; (8005010 <HAL_GPIO_Init+0x310>)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	3302      	adds	r3, #2
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f46:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f6a:	4a32      	ldr	r2, [pc, #200]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f70:	4b30      	ldr	r3, [pc, #192]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f9a:	4b26      	ldr	r3, [pc, #152]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fe8:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	f67f ae90 	bls.w	8004d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3724      	adds	r7, #36	; 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
 8005010:	40013800 	.word	0x40013800
 8005014:	40020000 	.word	0x40020000
 8005018:	40020400 	.word	0x40020400
 800501c:	40020800 	.word	0x40020800
 8005020:	40020c00 	.word	0x40020c00
 8005024:	40021000 	.word	0x40021000
 8005028:	40021400 	.word	0x40021400
 800502c:	40021800 	.word	0x40021800
 8005030:	40021c00 	.word	0x40021c00
 8005034:	40013c00 	.word	0x40013c00

08005038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
 8005044:	4613      	mov	r3, r2
 8005046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005048:	787b      	ldrb	r3, [r7, #1]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005054:	e003      	b.n	800505e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	041a      	lsls	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_PWR_EnableBkUpAccess+0x20>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_PWR_EnableBkUpAccess+0x24>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800507e:	687b      	ldr	r3, [r7, #4]
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	420e0020 	.word	0x420e0020
 8005090:	40007000 	.word	0x40007000

08005094 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_PWR_DisableBkUpAccess+0x20>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80050a6:	687b      	ldr	r3, [r7, #4]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	420e0020 	.word	0x420e0020
 80050b8:	40007000 	.word	0x40007000

080050bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e264      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d075      	beq.n	80051c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050da:	4ba3      	ldr	r3, [pc, #652]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d00c      	beq.n	8005100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e6:	4ba0      	ldr	r3, [pc, #640]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d112      	bne.n	8005118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f2:	4b9d      	ldr	r3, [pc, #628]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fe:	d10b      	bne.n	8005118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005100:	4b99      	ldr	r3, [pc, #612]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d05b      	beq.n	80051c4 <HAL_RCC_OscConfig+0x108>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d157      	bne.n	80051c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e23f      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005120:	d106      	bne.n	8005130 <HAL_RCC_OscConfig+0x74>
 8005122:	4b91      	ldr	r3, [pc, #580]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a90      	ldr	r2, [pc, #576]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e01d      	b.n	800516c <HAL_RCC_OscConfig+0xb0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x98>
 800513a:	4b8b      	ldr	r3, [pc, #556]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a8a      	ldr	r2, [pc, #552]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	4b88      	ldr	r3, [pc, #544]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a87      	ldr	r2, [pc, #540]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0xb0>
 8005154:	4b84      	ldr	r3, [pc, #528]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a83      	ldr	r2, [pc, #524]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 800515a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	4b81      	ldr	r3, [pc, #516]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a80      	ldr	r2, [pc, #512]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7ff f8ae 	bl	80042d4 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800517c:	f7ff f8aa 	bl	80042d4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e204      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518e:	4b76      	ldr	r3, [pc, #472]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0xc0>
 800519a:	e014      	b.n	80051c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519c:	f7ff f89a 	bl	80042d4 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a4:	f7ff f896 	bl	80042d4 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e1f0      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b6:	4b6c      	ldr	r3, [pc, #432]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0xe8>
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d063      	beq.n	800529a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051d2:	4b65      	ldr	r3, [pc, #404]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051de:	4b62      	ldr	r3, [pc, #392]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d11c      	bne.n	8005224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ea:	4b5f      	ldr	r3, [pc, #380]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d116      	bne.n	8005224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f6:	4b5c      	ldr	r3, [pc, #368]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_RCC_OscConfig+0x152>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d001      	beq.n	800520e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e1c4      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520e:	4b56      	ldr	r3, [pc, #344]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4952      	ldr	r1, [pc, #328]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005222:	e03a      	b.n	800529a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d020      	beq.n	800526e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800522c:	4b4f      	ldr	r3, [pc, #316]	; (800536c <HAL_RCC_OscConfig+0x2b0>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7ff f84f 	bl	80042d4 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800523a:	f7ff f84b 	bl	80042d4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e1a5      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524c:	4b46      	ldr	r3, [pc, #280]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005258:	4b43      	ldr	r3, [pc, #268]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4940      	ldr	r1, [pc, #256]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]
 800526c:	e015      	b.n	800529a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526e:	4b3f      	ldr	r3, [pc, #252]	; (800536c <HAL_RCC_OscConfig+0x2b0>)
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7ff f82e 	bl	80042d4 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800527c:	f7ff f82a 	bl	80042d4 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e184      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528e:	4b36      	ldr	r3, [pc, #216]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d030      	beq.n	8005308 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ae:	4b30      	ldr	r3, [pc, #192]	; (8005370 <HAL_RCC_OscConfig+0x2b4>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b4:	f7ff f80e 	bl	80042d4 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052bc:	f7ff f80a 	bl	80042d4 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e164      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x200>
 80052da:	e015      	b.n	8005308 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052dc:	4b24      	ldr	r3, [pc, #144]	; (8005370 <HAL_RCC_OscConfig+0x2b4>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e2:	f7fe fff7 	bl	80042d4 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ea:	f7fe fff3 	bl	80042d4 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e14d      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 80052fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80a0 	beq.w	8005456 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531a:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	4a0e      	ldr	r2, [pc, #56]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <HAL_RCC_OscConfig+0x2ac>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_RCC_OscConfig+0x2b8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d121      	bne.n	8005396 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005352:	4b08      	ldr	r3, [pc, #32]	; (8005374 <HAL_RCC_OscConfig+0x2b8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a07      	ldr	r2, [pc, #28]	; (8005374 <HAL_RCC_OscConfig+0x2b8>)
 8005358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535e:	f7fe ffb9 	bl	80042d4 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005364:	e011      	b.n	800538a <HAL_RCC_OscConfig+0x2ce>
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
 800536c:	42470000 	.word	0x42470000
 8005370:	42470e80 	.word	0x42470e80
 8005374:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005378:	f7fe ffac 	bl	80042d4 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e106      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538a:	4b85      	ldr	r3, [pc, #532]	; (80055a0 <HAL_RCC_OscConfig+0x4e4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d106      	bne.n	80053ac <HAL_RCC_OscConfig+0x2f0>
 800539e:	4b81      	ldr	r3, [pc, #516]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a80      	ldr	r2, [pc, #512]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
 80053aa:	e01c      	b.n	80053e6 <HAL_RCC_OscConfig+0x32a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d10c      	bne.n	80053ce <HAL_RCC_OscConfig+0x312>
 80053b4:	4b7b      	ldr	r3, [pc, #492]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	4a7a      	ldr	r2, [pc, #488]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053ba:	f043 0304 	orr.w	r3, r3, #4
 80053be:	6713      	str	r3, [r2, #112]	; 0x70
 80053c0:	4b78      	ldr	r3, [pc, #480]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	4a77      	ldr	r2, [pc, #476]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6713      	str	r3, [r2, #112]	; 0x70
 80053cc:	e00b      	b.n	80053e6 <HAL_RCC_OscConfig+0x32a>
 80053ce:	4b75      	ldr	r3, [pc, #468]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	4a74      	ldr	r2, [pc, #464]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6713      	str	r3, [r2, #112]	; 0x70
 80053da:	4b72      	ldr	r3, [pc, #456]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	4a71      	ldr	r2, [pc, #452]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d015      	beq.n	800541a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fe ff71 	bl	80042d4 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f4:	e00a      	b.n	800540c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053f6:	f7fe ff6d 	bl	80042d4 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	f241 3288 	movw	r2, #5000	; 0x1388
 8005404:	4293      	cmp	r3, r2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0c5      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540c:	4b65      	ldr	r3, [pc, #404]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0ee      	beq.n	80053f6 <HAL_RCC_OscConfig+0x33a>
 8005418:	e014      	b.n	8005444 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541a:	f7fe ff5b 	bl	80042d4 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005420:	e00a      	b.n	8005438 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7fe ff57 	bl	80042d4 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e0af      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005438:	4b5a      	ldr	r3, [pc, #360]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ee      	bne.n	8005422 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d105      	bne.n	8005456 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544a:	4b56      	ldr	r3, [pc, #344]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	4a55      	ldr	r2, [pc, #340]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 809b 	beq.w	8005596 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005460:	4b50      	ldr	r3, [pc, #320]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	2b08      	cmp	r3, #8
 800546a:	d05c      	beq.n	8005526 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d141      	bne.n	80054f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005474:	4b4c      	ldr	r3, [pc, #304]	; (80055a8 <HAL_RCC_OscConfig+0x4ec>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547a:	f7fe ff2b 	bl	80042d4 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005482:	f7fe ff27 	bl	80042d4 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e081      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005494:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f0      	bne.n	8005482 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	019b      	lsls	r3, r3, #6
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	3b01      	subs	r3, #1
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	4937      	ldr	r1, [pc, #220]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ca:	4b37      	ldr	r3, [pc, #220]	; (80055a8 <HAL_RCC_OscConfig+0x4ec>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fe ff00 	bl	80042d4 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d8:	f7fe fefc 	bl	80042d4 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e056      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ea:	4b2e      	ldr	r3, [pc, #184]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x41c>
 80054f6:	e04e      	b.n	8005596 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f8:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <HAL_RCC_OscConfig+0x4ec>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fe:	f7fe fee9 	bl	80042d4 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005506:	f7fe fee5 	bl	80042d4 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e03f      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005518:	4b22      	ldr	r3, [pc, #136]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f0      	bne.n	8005506 <HAL_RCC_OscConfig+0x44a>
 8005524:	e037      	b.n	8005596 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e032      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005532:	4b1c      	ldr	r3, [pc, #112]	; (80055a4 <HAL_RCC_OscConfig+0x4e8>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d028      	beq.n	8005592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554a:	429a      	cmp	r2, r3
 800554c:	d121      	bne.n	8005592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d11a      	bne.n	8005592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005562:	4013      	ands	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005568:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800556a:	4293      	cmp	r3, r2
 800556c:	d111      	bne.n	8005592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	3b01      	subs	r3, #1
 800557c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d107      	bne.n	8005592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d001      	beq.n	8005596 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40007000 	.word	0x40007000
 80055a4:	40023800 	.word	0x40023800
 80055a8:	42470060 	.word	0x42470060

080055ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0cc      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055c0:	4b68      	ldr	r3, [pc, #416]	; (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d90c      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ce:	4b65      	ldr	r3, [pc, #404]	; (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b63      	ldr	r3, [pc, #396]	; (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0b8      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d020      	beq.n	8005636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4a58      	ldr	r2, [pc, #352]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800560a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005618:	4b53      	ldr	r3, [pc, #332]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a52      	ldr	r2, [pc, #328]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005624:	4b50      	ldr	r3, [pc, #320]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	494d      	ldr	r1, [pc, #308]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d044      	beq.n	80056cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d107      	bne.n	800565a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564a:	4b47      	ldr	r3, [pc, #284]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d119      	bne.n	800568a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e07f      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d003      	beq.n	800566a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005666:	2b03      	cmp	r3, #3
 8005668:	d107      	bne.n	800567a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800566a:	4b3f      	ldr	r3, [pc, #252]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e06f      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800567a:	4b3b      	ldr	r3, [pc, #236]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e067      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800568a:	4b37      	ldr	r3, [pc, #220]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f023 0203 	bic.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	4934      	ldr	r1, [pc, #208]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	4313      	orrs	r3, r2
 800569a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800569c:	f7fe fe1a 	bl	80042d4 <HAL_GetTick>
 80056a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a4:	f7fe fe16 	bl	80042d4 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e04f      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ba:	4b2b      	ldr	r3, [pc, #172]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 020c 	and.w	r2, r3, #12
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d1eb      	bne.n	80056a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056cc:	4b25      	ldr	r3, [pc, #148]	; (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d20c      	bcs.n	80056f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056da:	4b22      	ldr	r3, [pc, #136]	; (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_RCC_ClockConfig+0x1b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e032      	b.n	800575a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4916      	ldr	r1, [pc, #88]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	490e      	ldr	r1, [pc, #56]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005732:	f000 f821 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 8005736:	4602      	mov	r2, r0
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	490a      	ldr	r1, [pc, #40]	; (800576c <HAL_RCC_ClockConfig+0x1c0>)
 8005744:	5ccb      	ldrb	r3, [r1, r3]
 8005746:	fa22 f303 	lsr.w	r3, r2, r3
 800574a:	4a09      	ldr	r2, [pc, #36]	; (8005770 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_ClockConfig+0x1c8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fd7a 	bl	800424c <HAL_InitTick>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40023c00 	.word	0x40023c00
 8005768:	40023800 	.word	0x40023800
 800576c:	0800da04 	.word	0x0800da04
 8005770:	20000000 	.word	0x20000000
 8005774:	20000004 	.word	0x20000004

08005778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005778:	b5b0      	push	{r4, r5, r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800577e:	2100      	movs	r1, #0
 8005780:	6079      	str	r1, [r7, #4]
 8005782:	2100      	movs	r1, #0
 8005784:	60f9      	str	r1, [r7, #12]
 8005786:	2100      	movs	r1, #0
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800578a:	2100      	movs	r1, #0
 800578c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800578e:	4952      	ldr	r1, [pc, #328]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005790:	6889      	ldr	r1, [r1, #8]
 8005792:	f001 010c 	and.w	r1, r1, #12
 8005796:	2908      	cmp	r1, #8
 8005798:	d00d      	beq.n	80057b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800579a:	2908      	cmp	r1, #8
 800579c:	f200 8094 	bhi.w	80058c8 <HAL_RCC_GetSysClockFreq+0x150>
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d002      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0x32>
 80057a4:	2904      	cmp	r1, #4
 80057a6:	d003      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0x38>
 80057a8:	e08e      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057aa:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <HAL_RCC_GetSysClockFreq+0x164>)
 80057ac:	60bb      	str	r3, [r7, #8]
       break;
 80057ae:	e08e      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057b0:	4b4b      	ldr	r3, [pc, #300]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80057b2:	60bb      	str	r3, [r7, #8]
      break;
 80057b4:	e08b      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057b6:	4948      	ldr	r1, [pc, #288]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80057b8:	6849      	ldr	r1, [r1, #4]
 80057ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80057be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057c0:	4945      	ldr	r1, [pc, #276]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80057c2:	6849      	ldr	r1, [r1, #4]
 80057c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80057c8:	2900      	cmp	r1, #0
 80057ca:	d024      	beq.n	8005816 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057cc:	4942      	ldr	r1, [pc, #264]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80057ce:	6849      	ldr	r1, [r1, #4]
 80057d0:	0989      	lsrs	r1, r1, #6
 80057d2:	4608      	mov	r0, r1
 80057d4:	f04f 0100 	mov.w	r1, #0
 80057d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80057dc:	f04f 0500 	mov.w	r5, #0
 80057e0:	ea00 0204 	and.w	r2, r0, r4
 80057e4:	ea01 0305 	and.w	r3, r1, r5
 80057e8:	493d      	ldr	r1, [pc, #244]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80057ea:	fb01 f003 	mul.w	r0, r1, r3
 80057ee:	2100      	movs	r1, #0
 80057f0:	fb01 f102 	mul.w	r1, r1, r2
 80057f4:	1844      	adds	r4, r0, r1
 80057f6:	493a      	ldr	r1, [pc, #232]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80057f8:	fba2 0101 	umull	r0, r1, r2, r1
 80057fc:	1863      	adds	r3, r4, r1
 80057fe:	4619      	mov	r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	461a      	mov	r2, r3
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	f7fb fa16 	bl	8000c38 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4613      	mov	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e04a      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005816:	4b30      	ldr	r3, [pc, #192]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	099b      	lsrs	r3, r3, #6
 800581c:	461a      	mov	r2, r3
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	ea02 0400 	and.w	r4, r2, r0
 800582e:	ea03 0501 	and.w	r5, r3, r1
 8005832:	4620      	mov	r0, r4
 8005834:	4629      	mov	r1, r5
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	014b      	lsls	r3, r1, #5
 8005840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005844:	0142      	lsls	r2, r0, #5
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	1b00      	subs	r0, r0, r4
 800584c:	eb61 0105 	sbc.w	r1, r1, r5
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	018b      	lsls	r3, r1, #6
 800585a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800585e:	0182      	lsls	r2, r0, #6
 8005860:	1a12      	subs	r2, r2, r0
 8005862:	eb63 0301 	sbc.w	r3, r3, r1
 8005866:	f04f 0000 	mov.w	r0, #0
 800586a:	f04f 0100 	mov.w	r1, #0
 800586e:	00d9      	lsls	r1, r3, #3
 8005870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005874:	00d0      	lsls	r0, r2, #3
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	1912      	adds	r2, r2, r4
 800587c:	eb45 0303 	adc.w	r3, r5, r3
 8005880:	f04f 0000 	mov.w	r0, #0
 8005884:	f04f 0100 	mov.w	r1, #0
 8005888:	0299      	lsls	r1, r3, #10
 800588a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800588e:	0290      	lsls	r0, r2, #10
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	461a      	mov	r2, r3
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	f7fb f9ca 	bl	8000c38 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4613      	mov	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	3301      	adds	r3, #1
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	60bb      	str	r3, [r7, #8]
      break;
 80058c6:	e002      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <HAL_RCC_GetSysClockFreq+0x164>)
 80058ca:	60bb      	str	r3, [r7, #8]
      break;
 80058cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ce:	68bb      	ldr	r3, [r7, #8]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bdb0      	pop	{r4, r5, r7, pc}
 80058d8:	40023800 	.word	0x40023800
 80058dc:	00f42400 	.word	0x00f42400
 80058e0:	017d7840 	.word	0x017d7840

080058e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000000 	.word	0x20000000

080058fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005900:	f7ff fff0 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8005904:	4602      	mov	r2, r0
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	0a9b      	lsrs	r3, r3, #10
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	4903      	ldr	r1, [pc, #12]	; (8005920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005912:	5ccb      	ldrb	r3, [r1, r3]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40023800 	.word	0x40023800
 8005920:	0800da14 	.word	0x0800da14

08005924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005928:	f7ff ffdc 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0b5b      	lsrs	r3, r3, #13
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4903      	ldr	r1, [pc, #12]	; (8005948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	0800da14 	.word	0x0800da14

0800594c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005970:	2b00      	cmp	r3, #0
 8005972:	d035      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005974:	4b62      	ldr	r3, [pc, #392]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800597a:	f7fe fcab 	bl	80042d4 <HAL_GetTick>
 800597e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005980:	e008      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005982:	f7fe fca7 	bl	80042d4 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e0b0      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005994:	4b5b      	ldr	r3, [pc, #364]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f0      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	019a      	lsls	r2, r3, #6
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	071b      	lsls	r3, r3, #28
 80059ac:	4955      	ldr	r1, [pc, #340]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059b4:	4b52      	ldr	r3, [pc, #328]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ba:	f7fe fc8b 	bl	80042d4 <HAL_GetTick>
 80059be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059c0:	e008      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059c2:	f7fe fc87 	bl	80042d4 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e090      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d4:	4b4b      	ldr	r3, [pc, #300]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0f0      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8083 	beq.w	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	4b44      	ldr	r3, [pc, #272]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4a43      	ldr	r2, [pc, #268]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40
 80059fe:	4b41      	ldr	r3, [pc, #260]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a0a:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a3e      	ldr	r2, [pc, #248]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a16:	f7fe fc5d 	bl	80042d4 <HAL_GetTick>
 8005a1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a1e:	f7fe fc59 	bl	80042d4 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e062      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a3c:	4b31      	ldr	r3, [pc, #196]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d02f      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d028      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a5a:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a64:	4b29      	ldr	r3, [pc, #164]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a6a:	4b28      	ldr	r3, [pc, #160]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a70:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a76:	4b23      	ldr	r3, [pc, #140]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d114      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fe fc27 	bl	80042d4 <HAL_GetTick>
 8005a86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a88:	e00a      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a8a:	f7fe fc23 	bl	80042d4 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e02a      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa0:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0ee      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab8:	d10d      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005aba:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ace:	490d      	ldr	r1, [pc, #52]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	608b      	str	r3, [r1, #8]
 8005ad4:	e005      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005adc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ae0:	6093      	str	r3, [r2, #8]
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ae4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aee:	4905      	ldr	r1, [pc, #20]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	42470068 	.word	0x42470068
 8005b04:	40023800 	.word	0x40023800
 8005b08:	40007000 	.word	0x40007000
 8005b0c:	42470e40 	.word	0x42470e40

08005b10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e083      	b.n	8005c2a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	7f5b      	ldrb	r3, [r3, #29]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fe f8a0 	bl	8003c78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	22ca      	movs	r2, #202	; 0xca
 8005b44:	625a      	str	r2, [r3, #36]	; 0x24
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2253      	movs	r2, #83	; 0x53
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f897 	bl	8005c82 <RTC_EnterInitMode>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	22ff      	movs	r2, #255	; 0xff
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2204      	movs	r2, #4
 8005b66:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e05e      	b.n	8005c2a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6899      	ldr	r1, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68d2      	ldr	r2, [r2, #12]
 8005ba6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6919      	ldr	r1, [r3, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	041a      	lsls	r2, r3, #16
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f829 	bl	8005c32 <HAL_RTC_WaitForSynchro>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	22ff      	movs	r2, #255	; 0xff
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e018      	b.n	8005c2a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c06:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	22ff      	movs	r2, #255	; 0xff
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005c28:	2300      	movs	r3, #0
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c4e:	f7fe fb41 	bl	80042d4 <HAL_GetTick>
 8005c52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c54:	e009      	b.n	8005c6a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c56:	f7fe fb3d 	bl	80042d4 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c64:	d901      	bls.n	8005c6a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e007      	b.n	8005c7a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ee      	beq.n	8005c56 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d119      	bne.n	8005cd0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca6:	f7fe fb15 	bl	80042d4 <HAL_GetTick>
 8005caa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005cac:	e009      	b.n	8005cc2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cae:	f7fe fb11 	bl	80042d4 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cbc:	d901      	bls.n	8005cc2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e007      	b.n	8005cd2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0ee      	beq.n	8005cae <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7f1b      	ldrb	r3, [r3, #28]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e030      	b.n	8005d52 <HAL_RTCEx_SetCalibrationOutPut+0x78>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	22ca      	movs	r2, #202	; 0xca
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2253      	movs	r2, #83	; 0x53
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005d1a:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6899      	ldr	r1, [r3, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005d3a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	22ff      	movs	r2, #255	; 0xff
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e041      	b.n	8005df4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fd ffa1 	bl	8003ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f000 fff3 	bl	8006d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d001      	beq.n	8005e14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e046      	b.n	8005ea2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a23      	ldr	r2, [pc, #140]	; (8005eb0 <HAL_TIM_Base_Start+0xb4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_TIM_Base_Start+0x70>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2e:	d01d      	beq.n	8005e6c <HAL_TIM_Base_Start+0x70>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1f      	ldr	r2, [pc, #124]	; (8005eb4 <HAL_TIM_Base_Start+0xb8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d018      	beq.n	8005e6c <HAL_TIM_Base_Start+0x70>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1e      	ldr	r2, [pc, #120]	; (8005eb8 <HAL_TIM_Base_Start+0xbc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <HAL_TIM_Base_Start+0x70>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <HAL_TIM_Base_Start+0xc0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00e      	beq.n	8005e6c <HAL_TIM_Base_Start+0x70>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1b      	ldr	r2, [pc, #108]	; (8005ec0 <HAL_TIM_Base_Start+0xc4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_TIM_Base_Start+0x70>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <HAL_TIM_Base_Start+0xc8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIM_Base_Start+0x70>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <HAL_TIM_Base_Start+0xcc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d111      	bne.n	8005e90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b06      	cmp	r3, #6
 8005e7c:	d010      	beq.n	8005ea0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8e:	e007      	b.n	8005ea0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00
 8005ec0:	40010400 	.word	0x40010400
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40001800 	.word	0x40001800

08005ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e041      	b.n	8005f62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fe f80c 	bl	8003f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f000 ff3c 	bl	8006d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <HAL_TIM_PWM_Start+0x24>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	e022      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d109      	bne.n	8005faa <HAL_TIM_PWM_Start+0x3e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	bf14      	ite	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	e015      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x58>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e008      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e07c      	b.n	80060d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_PWM_Start+0x82>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fec:	e013      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d104      	bne.n	8005ffe <HAL_TIM_PWM_Start+0x92>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ffc:	e00b      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d104      	bne.n	800600e <HAL_TIM_PWM_Start+0xa2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600c:	e003      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2201      	movs	r2, #1
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fac6 	bl	80075b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2d      	ldr	r2, [pc, #180]	; (80060e0 <HAL_TIM_PWM_Start+0x174>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIM_PWM_Start+0xcc>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2c      	ldr	r2, [pc, #176]	; (80060e4 <HAL_TIM_PWM_Start+0x178>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <HAL_TIM_PWM_Start+0xd0>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <HAL_TIM_PWM_Start+0xd2>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <HAL_TIM_PWM_Start+0x174>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d022      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d01d      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <HAL_TIM_PWM_Start+0x17c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d018      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <HAL_TIM_PWM_Start+0x180>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <HAL_TIM_PWM_Start+0x184>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00e      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <HAL_TIM_PWM_Start+0x178>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_TIM_PWM_Start+0x188>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <HAL_TIM_PWM_Start+0x18c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d111      	bne.n	80060c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	d010      	beq.n	80060d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c4:	e007      	b.n	80060d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40001800 	.word	0x40001800

080060fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e041      	b.n	8006192 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fd fea4 	bl	8003e70 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f000 fe24 	bl	8006d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_IC_Start_IT+0x1e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	e013      	b.n	80061e2 <HAL_TIM_IC_Start_IT+0x46>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d104      	bne.n	80061ca <HAL_TIM_IC_Start_IT+0x2e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	e00b      	b.n	80061e2 <HAL_TIM_IC_Start_IT+0x46>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d104      	bne.n	80061da <HAL_TIM_IC_Start_IT+0x3e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	e003      	b.n	80061e2 <HAL_TIM_IC_Start_IT+0x46>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <HAL_TIM_IC_Start_IT+0x58>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e013      	b.n	800621c <HAL_TIM_IC_Start_IT+0x80>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d104      	bne.n	8006204 <HAL_TIM_IC_Start_IT+0x68>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e00b      	b.n	800621c <HAL_TIM_IC_Start_IT+0x80>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b08      	cmp	r3, #8
 8006208:	d104      	bne.n	8006214 <HAL_TIM_IC_Start_IT+0x78>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e003      	b.n	800621c <HAL_TIM_IC_Start_IT+0x80>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800621a:	b2db      	uxtb	r3, r3
 800621c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d102      	bne.n	800622a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006224:	7b7b      	ldrb	r3, [r7, #13]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d001      	beq.n	800622e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e0cc      	b.n	80063c8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_TIM_IC_Start_IT+0xa2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800623c:	e013      	b.n	8006266 <HAL_TIM_IC_Start_IT+0xca>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d104      	bne.n	800624e <HAL_TIM_IC_Start_IT+0xb2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624c:	e00b      	b.n	8006266 <HAL_TIM_IC_Start_IT+0xca>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d104      	bne.n	800625e <HAL_TIM_IC_Start_IT+0xc2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800625c:	e003      	b.n	8006266 <HAL_TIM_IC_Start_IT+0xca>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <HAL_TIM_IC_Start_IT+0xda>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006274:	e013      	b.n	800629e <HAL_TIM_IC_Start_IT+0x102>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b04      	cmp	r3, #4
 800627a:	d104      	bne.n	8006286 <HAL_TIM_IC_Start_IT+0xea>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006284:	e00b      	b.n	800629e <HAL_TIM_IC_Start_IT+0x102>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d104      	bne.n	8006296 <HAL_TIM_IC_Start_IT+0xfa>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006294:	e003      	b.n	800629e <HAL_TIM_IC_Start_IT+0x102>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b0c      	cmp	r3, #12
 80062a2:	d841      	bhi.n	8006328 <HAL_TIM_IC_Start_IT+0x18c>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <HAL_TIM_IC_Start_IT+0x110>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062e1 	.word	0x080062e1
 80062b0:	08006329 	.word	0x08006329
 80062b4:	08006329 	.word	0x08006329
 80062b8:	08006329 	.word	0x08006329
 80062bc:	080062f3 	.word	0x080062f3
 80062c0:	08006329 	.word	0x08006329
 80062c4:	08006329 	.word	0x08006329
 80062c8:	08006329 	.word	0x08006329
 80062cc:	08006305 	.word	0x08006305
 80062d0:	08006329 	.word	0x08006329
 80062d4:	08006329 	.word	0x08006329
 80062d8:	08006329 	.word	0x08006329
 80062dc:	08006317 	.word	0x08006317
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0202 	orr.w	r2, r2, #2
 80062ee:	60da      	str	r2, [r3, #12]
      break;
 80062f0:	e01d      	b.n	800632e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0204 	orr.w	r2, r2, #4
 8006300:	60da      	str	r2, [r3, #12]
      break;
 8006302:	e014      	b.n	800632e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0208 	orr.w	r2, r2, #8
 8006312:	60da      	str	r2, [r3, #12]
      break;
 8006314:	e00b      	b.n	800632e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0210 	orr.w	r2, r2, #16
 8006324:	60da      	str	r2, [r3, #12]
      break;
 8006326:	e002      	b.n	800632e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      break;
 800632c:	bf00      	nop
  }

  if (status == HAL_OK)
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d148      	bne.n	80063c6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2201      	movs	r2, #1
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	4618      	mov	r0, r3
 800633e:	f001 f937 	bl	80075b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <HAL_TIM_IC_Start_IT+0x234>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d022      	beq.n	8006392 <HAL_TIM_IC_Start_IT+0x1f6>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006354:	d01d      	beq.n	8006392 <HAL_TIM_IC_Start_IT+0x1f6>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <HAL_TIM_IC_Start_IT+0x238>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d018      	beq.n	8006392 <HAL_TIM_IC_Start_IT+0x1f6>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <HAL_TIM_IC_Start_IT+0x23c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <HAL_TIM_IC_Start_IT+0x1f6>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <HAL_TIM_IC_Start_IT+0x240>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00e      	beq.n	8006392 <HAL_TIM_IC_Start_IT+0x1f6>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <HAL_TIM_IC_Start_IT+0x244>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d009      	beq.n	8006392 <HAL_TIM_IC_Start_IT+0x1f6>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_TIM_IC_Start_IT+0x248>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_TIM_IC_Start_IT+0x1f6>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <HAL_TIM_IC_Start_IT+0x24c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d111      	bne.n	80063b6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	d010      	beq.n	80063c6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b4:	e007      	b.n	80063c6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40000400 	.word	0x40000400
 80063d8:	40000800 	.word	0x40000800
 80063dc:	40000c00 	.word	0x40000c00
 80063e0:	40010400 	.word	0x40010400
 80063e4:	40014000 	.word	0x40014000
 80063e8:	40001800 	.word	0x40001800

080063ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e097      	b.n	8006530 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d106      	bne.n	800641a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7fd fc91 	bl	8003d3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006430:	f023 0307 	bic.w	r3, r3, #7
 8006434:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f000 fca1 	bl	8006d88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	4313      	orrs	r3, r2
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800648c:	f023 030c 	bic.w	r3, r3, #12
 8006490:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006498:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800649c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	021b      	lsls	r3, r3, #8
 80064a8:	4313      	orrs	r3, r2
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	031b      	lsls	r3, r3, #12
 80064bc:	4313      	orrs	r3, r2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	4313      	orrs	r3, r2
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006548:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006550:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006558:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006560:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d110      	bne.n	800658a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d102      	bne.n	8006574 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800656e:	7b7b      	ldrb	r3, [r7, #13]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d001      	beq.n	8006578 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e069      	b.n	800664c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006588:	e031      	b.n	80065ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b04      	cmp	r3, #4
 800658e:	d110      	bne.n	80065b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d102      	bne.n	800659c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006596:	7b3b      	ldrb	r3, [r7, #12]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d001      	beq.n	80065a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e055      	b.n	800664c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065b0:	e01d      	b.n	80065ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d108      	bne.n	80065ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d105      	bne.n	80065ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065be:	7b7b      	ldrb	r3, [r7, #13]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d102      	bne.n	80065ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065c4:	7b3b      	ldrb	r3, [r7, #12]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d001      	beq.n	80065ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e03e      	b.n	800664c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_TIM_Encoder_Start+0xc4>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d008      	beq.n	800660c <HAL_TIM_Encoder_Start+0xd4>
 80065fa:	e00f      	b.n	800661c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2201      	movs	r2, #1
 8006602:	2100      	movs	r1, #0
 8006604:	4618      	mov	r0, r3
 8006606:	f000 ffd3 	bl	80075b0 <TIM_CCxChannelCmd>
      break;
 800660a:	e016      	b.n	800663a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2201      	movs	r2, #1
 8006612:	2104      	movs	r1, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f000 ffcb 	bl	80075b0 <TIM_CCxChannelCmd>
      break;
 800661a:	e00e      	b.n	800663a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2201      	movs	r2, #1
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f000 ffc3 	bl	80075b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2201      	movs	r2, #1
 8006630:	2104      	movs	r1, #4
 8006632:	4618      	mov	r0, r3
 8006634:	f000 ffbc 	bl	80075b0 <TIM_CCxChannelCmd>
      break;
 8006638:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0201 	orr.w	r2, r2, #1
 8006648:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b02      	cmp	r3, #2
 8006668:	d122      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b02      	cmp	r3, #2
 8006676:	d11b      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0202 	mvn.w	r2, #2
 8006680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fa fd1a 	bl	80010d0 <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fb54 	bl	8006d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fb5b 	bl	8006d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d122      	bne.n	8006704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d11b      	bne.n	8006704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0204 	mvn.w	r2, #4
 80066d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fa fcf0 	bl	80010d0 <HAL_TIM_IC_CaptureCallback>
 80066f0:	e005      	b.n	80066fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fb2a 	bl	8006d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fb31 	bl	8006d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b08      	cmp	r3, #8
 8006710:	d122      	bne.n	8006758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b08      	cmp	r3, #8
 800671e:	d11b      	bne.n	8006758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0208 	mvn.w	r2, #8
 8006728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2204      	movs	r2, #4
 800672e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fa fcc6 	bl	80010d0 <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fb00 	bl	8006d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fb07 	bl	8006d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b10      	cmp	r3, #16
 8006764:	d122      	bne.n	80067ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b10      	cmp	r3, #16
 8006772:	d11b      	bne.n	80067ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0210 	mvn.w	r2, #16
 800677c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2208      	movs	r2, #8
 8006782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fa fc9c 	bl	80010d0 <HAL_TIM_IC_CaptureCallback>
 8006798:	e005      	b.n	80067a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fad6 	bl	8006d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fadd 	bl	8006d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d10e      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d107      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0201 	mvn.w	r2, #1
 80067d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fab0 	bl	8006d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d10e      	bne.n	8006804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	2b80      	cmp	r3, #128	; 0x80
 80067f2:	d107      	bne.n	8006804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 ffd4 	bl	80077ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d10e      	bne.n	8006830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d107      	bne.n	8006830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 faa2 	bl	8006d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b20      	cmp	r3, #32
 800683c:	d10e      	bne.n	800685c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b20      	cmp	r3, #32
 800684a:	d107      	bne.n	800685c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0220 	mvn.w	r2, #32
 8006854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 ff9e 	bl	8007798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_TIM_IC_ConfigChannel+0x1e>
 800687e:	2302      	movs	r3, #2
 8006880:	e088      	b.n	8006994 <HAL_TIM_IC_ConfigChannel+0x130>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d11b      	bne.n	80068c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6819      	ldr	r1, [r3, #0]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f000 fcc2 	bl	8007228 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 020c 	bic.w	r2, r2, #12
 80068b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6999      	ldr	r1, [r3, #24]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	619a      	str	r2, [r3, #24]
 80068c6:	e060      	b.n	800698a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d11c      	bne.n	8006908 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6819      	ldr	r1, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f000 fd46 	bl	800736e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6999      	ldr	r1, [r3, #24]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	021a      	lsls	r2, r3, #8
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	619a      	str	r2, [r3, #24]
 8006906:	e040      	b.n	800698a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b08      	cmp	r3, #8
 800690c:	d11b      	bne.n	8006946 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f000 fd93 	bl	8007448 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 020c 	bic.w	r2, r2, #12
 8006930:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69d9      	ldr	r1, [r3, #28]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	61da      	str	r2, [r3, #28]
 8006944:	e021      	b.n	800698a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b0c      	cmp	r3, #12
 800694a:	d11c      	bne.n	8006986 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6819      	ldr	r1, [r3, #0]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f000 fdb0 	bl	80074c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800696e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69d9      	ldr	r1, [r3, #28]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	021a      	lsls	r2, r3, #8
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	61da      	str	r2, [r3, #28]
 8006984:	e001      	b.n	800698a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e0ae      	b.n	8006b18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b0c      	cmp	r3, #12
 80069c6:	f200 809f 	bhi.w	8006b08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	08006a05 	.word	0x08006a05
 80069d4:	08006b09 	.word	0x08006b09
 80069d8:	08006b09 	.word	0x08006b09
 80069dc:	08006b09 	.word	0x08006b09
 80069e0:	08006a45 	.word	0x08006a45
 80069e4:	08006b09 	.word	0x08006b09
 80069e8:	08006b09 	.word	0x08006b09
 80069ec:	08006b09 	.word	0x08006b09
 80069f0:	08006a87 	.word	0x08006a87
 80069f4:	08006b09 	.word	0x08006b09
 80069f8:	08006b09 	.word	0x08006b09
 80069fc:	08006b09 	.word	0x08006b09
 8006a00:	08006ac7 	.word	0x08006ac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fa5c 	bl	8006ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0208 	orr.w	r2, r2, #8
 8006a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0204 	bic.w	r2, r2, #4
 8006a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6999      	ldr	r1, [r3, #24]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	619a      	str	r2, [r3, #24]
      break;
 8006a42:	e064      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 faac 	bl	8006fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6999      	ldr	r1, [r3, #24]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	021a      	lsls	r2, r3, #8
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	619a      	str	r2, [r3, #24]
      break;
 8006a84:	e043      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fb01 	bl	8007094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0208 	orr.w	r2, r2, #8
 8006aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0204 	bic.w	r2, r2, #4
 8006ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69d9      	ldr	r1, [r3, #28]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	61da      	str	r2, [r3, #28]
      break;
 8006ac4:	e023      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fb55 	bl	800717c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69d9      	ldr	r1, [r3, #28]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	021a      	lsls	r2, r3, #8
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	61da      	str	r2, [r3, #28]
      break;
 8006b06:	e002      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_TIM_ConfigClockSource+0x1c>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e0b4      	b.n	8006ca6 <HAL_TIM_ConfigClockSource+0x186>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b74:	d03e      	beq.n	8006bf4 <HAL_TIM_ConfigClockSource+0xd4>
 8006b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7a:	f200 8087 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b82:	f000 8086 	beq.w	8006c92 <HAL_TIM_ConfigClockSource+0x172>
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	d87f      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006b8c:	2b70      	cmp	r3, #112	; 0x70
 8006b8e:	d01a      	beq.n	8006bc6 <HAL_TIM_ConfigClockSource+0xa6>
 8006b90:	2b70      	cmp	r3, #112	; 0x70
 8006b92:	d87b      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b60      	cmp	r3, #96	; 0x60
 8006b96:	d050      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x11a>
 8006b98:	2b60      	cmp	r3, #96	; 0x60
 8006b9a:	d877      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006b9c:	2b50      	cmp	r3, #80	; 0x50
 8006b9e:	d03c      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0xfa>
 8006ba0:	2b50      	cmp	r3, #80	; 0x50
 8006ba2:	d873      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006ba4:	2b40      	cmp	r3, #64	; 0x40
 8006ba6:	d058      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x13a>
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d86f      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006bac:	2b30      	cmp	r3, #48	; 0x30
 8006bae:	d064      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x15a>
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d86b      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d060      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x15a>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d867      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d05c      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x15a>
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d05a      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x15a>
 8006bc4:	e062      	b.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f000 fccb 	bl	8007570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	609a      	str	r2, [r3, #8]
      break;
 8006bf2:	e04f      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6899      	ldr	r1, [r3, #8]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f000 fcb4 	bl	8007570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c16:	609a      	str	r2, [r3, #8]
      break;
 8006c18:	e03c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6859      	ldr	r1, [r3, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f000 fb72 	bl	8007310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2150      	movs	r1, #80	; 0x50
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fc81 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8006c38:	e02c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f000 fbce 	bl	80073e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2160      	movs	r1, #96	; 0x60
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fc71 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8006c58:	e01c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6859      	ldr	r1, [r3, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	461a      	mov	r2, r3
 8006c68:	f000 fb52 	bl	8007310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2140      	movs	r1, #64	; 0x40
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fc61 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8006c78:	e00c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f000 fc58 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8006c8a:	e003      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c90:	e000      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	d831      	bhi.n	8006d28 <HAL_TIM_ReadCapturedValue+0x78>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <HAL_TIM_ReadCapturedValue+0x1c>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006d01 	.word	0x08006d01
 8006cd0:	08006d29 	.word	0x08006d29
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006d29 	.word	0x08006d29
 8006cdc:	08006d0b 	.word	0x08006d0b
 8006ce0:	08006d29 	.word	0x08006d29
 8006ce4:	08006d29 	.word	0x08006d29
 8006ce8:	08006d29 	.word	0x08006d29
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d29 	.word	0x08006d29
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	08006d29 	.word	0x08006d29
 8006cfc:	08006d1f 	.word	0x08006d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d06:	60fb      	str	r3, [r7, #12]

      break;
 8006d08:	e00f      	b.n	8006d2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	60fb      	str	r3, [r7, #12]

      break;
 8006d12:	e00a      	b.n	8006d2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	60fb      	str	r3, [r7, #12]

      break;
 8006d1c:	e005      	b.n	8006d2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	60fb      	str	r3, [r7, #12]

      break;
 8006d26:	e000      	b.n	8006d2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006d28:	bf00      	nop
  }

  return tmpreg;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a40      	ldr	r2, [pc, #256]	; (8006e9c <TIM_Base_SetConfig+0x114>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d013      	beq.n	8006dc8 <TIM_Base_SetConfig+0x40>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da6:	d00f      	beq.n	8006dc8 <TIM_Base_SetConfig+0x40>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a3d      	ldr	r2, [pc, #244]	; (8006ea0 <TIM_Base_SetConfig+0x118>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00b      	beq.n	8006dc8 <TIM_Base_SetConfig+0x40>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a3c      	ldr	r2, [pc, #240]	; (8006ea4 <TIM_Base_SetConfig+0x11c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d007      	beq.n	8006dc8 <TIM_Base_SetConfig+0x40>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a3b      	ldr	r2, [pc, #236]	; (8006ea8 <TIM_Base_SetConfig+0x120>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_Base_SetConfig+0x40>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a3a      	ldr	r2, [pc, #232]	; (8006eac <TIM_Base_SetConfig+0x124>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d108      	bne.n	8006dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2f      	ldr	r2, [pc, #188]	; (8006e9c <TIM_Base_SetConfig+0x114>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d02b      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de8:	d027      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a2c      	ldr	r2, [pc, #176]	; (8006ea0 <TIM_Base_SetConfig+0x118>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d023      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <TIM_Base_SetConfig+0x11c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01f      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a2a      	ldr	r2, [pc, #168]	; (8006ea8 <TIM_Base_SetConfig+0x120>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d01b      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a29      	ldr	r2, [pc, #164]	; (8006eac <TIM_Base_SetConfig+0x124>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d017      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a28      	ldr	r2, [pc, #160]	; (8006eb0 <TIM_Base_SetConfig+0x128>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d013      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a27      	ldr	r2, [pc, #156]	; (8006eb4 <TIM_Base_SetConfig+0x12c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00f      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <TIM_Base_SetConfig+0x130>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00b      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a25      	ldr	r2, [pc, #148]	; (8006ebc <TIM_Base_SetConfig+0x134>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d007      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a24      	ldr	r2, [pc, #144]	; (8006ec0 <TIM_Base_SetConfig+0x138>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d003      	beq.n	8006e3a <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a23      	ldr	r2, [pc, #140]	; (8006ec4 <TIM_Base_SetConfig+0x13c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d108      	bne.n	8006e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <TIM_Base_SetConfig+0x114>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_Base_SetConfig+0xf8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a0c      	ldr	r2, [pc, #48]	; (8006eac <TIM_Base_SetConfig+0x124>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d103      	bne.n	8006e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	615a      	str	r2, [r3, #20]
}
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40000c00 	.word	0x40000c00
 8006eac:	40010400 	.word	0x40010400
 8006eb0:	40014000 	.word	0x40014000
 8006eb4:	40014400 	.word	0x40014400
 8006eb8:	40014800 	.word	0x40014800
 8006ebc:	40001800 	.word	0x40001800
 8006ec0:	40001c00 	.word	0x40001c00
 8006ec4:	40002000 	.word	0x40002000

08006ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0302 	bic.w	r3, r3, #2
 8006f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a20      	ldr	r2, [pc, #128]	; (8006fa0 <TIM_OC1_SetConfig+0xd8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_OC1_SetConfig+0x64>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a1f      	ldr	r2, [pc, #124]	; (8006fa4 <TIM_OC1_SetConfig+0xdc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d10c      	bne.n	8006f46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f023 0308 	bic.w	r3, r3, #8
 8006f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f023 0304 	bic.w	r3, r3, #4
 8006f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <TIM_OC1_SetConfig+0xd8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d003      	beq.n	8006f56 <TIM_OC1_SetConfig+0x8e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a14      	ldr	r2, [pc, #80]	; (8006fa4 <TIM_OC1_SetConfig+0xdc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d111      	bne.n	8006f7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	621a      	str	r2, [r3, #32]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40010400 	.word	0x40010400

08006fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f023 0210 	bic.w	r2, r3, #16
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f023 0320 	bic.w	r3, r3, #32
 8006ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a22      	ldr	r2, [pc, #136]	; (800708c <TIM_OC2_SetConfig+0xe4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC2_SetConfig+0x68>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a21      	ldr	r2, [pc, #132]	; (8007090 <TIM_OC2_SetConfig+0xe8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10d      	bne.n	800702c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800702a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a17      	ldr	r2, [pc, #92]	; (800708c <TIM_OC2_SetConfig+0xe4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC2_SetConfig+0x94>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a16      	ldr	r2, [pc, #88]	; (8007090 <TIM_OC2_SetConfig+0xe8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d113      	bne.n	8007064 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40010000 	.word	0x40010000
 8007090:	40010400 	.word	0x40010400

08007094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a21      	ldr	r2, [pc, #132]	; (8007174 <TIM_OC3_SetConfig+0xe0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d003      	beq.n	80070fa <TIM_OC3_SetConfig+0x66>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a20      	ldr	r2, [pc, #128]	; (8007178 <TIM_OC3_SetConfig+0xe4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d10d      	bne.n	8007116 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a16      	ldr	r2, [pc, #88]	; (8007174 <TIM_OC3_SetConfig+0xe0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d003      	beq.n	8007126 <TIM_OC3_SetConfig+0x92>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a15      	ldr	r2, [pc, #84]	; (8007178 <TIM_OC3_SetConfig+0xe4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d113      	bne.n	800714e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800712c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	40010000 	.word	0x40010000
 8007178:	40010400 	.word	0x40010400

0800717c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	031b      	lsls	r3, r3, #12
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a12      	ldr	r2, [pc, #72]	; (8007220 <TIM_OC4_SetConfig+0xa4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_OC4_SetConfig+0x68>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a11      	ldr	r2, [pc, #68]	; (8007224 <TIM_OC4_SetConfig+0xa8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d109      	bne.n	80071f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	019b      	lsls	r3, r3, #6
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40010000 	.word	0x40010000
 8007224:	40010400 	.word	0x40010400

08007228 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f023 0201 	bic.w	r2, r3, #1
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4a28      	ldr	r2, [pc, #160]	; (80072f4 <TIM_TI1_SetConfig+0xcc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01b      	beq.n	800728e <TIM_TI1_SetConfig+0x66>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725c:	d017      	beq.n	800728e <TIM_TI1_SetConfig+0x66>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a25      	ldr	r2, [pc, #148]	; (80072f8 <TIM_TI1_SetConfig+0xd0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <TIM_TI1_SetConfig+0x66>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a24      	ldr	r2, [pc, #144]	; (80072fc <TIM_TI1_SetConfig+0xd4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00f      	beq.n	800728e <TIM_TI1_SetConfig+0x66>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a23      	ldr	r2, [pc, #140]	; (8007300 <TIM_TI1_SetConfig+0xd8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00b      	beq.n	800728e <TIM_TI1_SetConfig+0x66>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4a22      	ldr	r2, [pc, #136]	; (8007304 <TIM_TI1_SetConfig+0xdc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d007      	beq.n	800728e <TIM_TI1_SetConfig+0x66>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4a21      	ldr	r2, [pc, #132]	; (8007308 <TIM_TI1_SetConfig+0xe0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d003      	beq.n	800728e <TIM_TI1_SetConfig+0x66>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4a20      	ldr	r2, [pc, #128]	; (800730c <TIM_TI1_SetConfig+0xe4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d101      	bne.n	8007292 <TIM_TI1_SetConfig+0x6a>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <TIM_TI1_SetConfig+0x6c>
 8007292:	2300      	movs	r3, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d008      	beq.n	80072aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	e003      	b.n	80072b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f043 0301 	orr.w	r3, r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f023 030a 	bic.w	r3, r3, #10
 80072cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f003 030a 	and.w	r3, r3, #10
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40000800 	.word	0x40000800
 8007300:	40000c00 	.word	0x40000c00
 8007304:	40010400 	.word	0x40010400
 8007308:	40014000 	.word	0x40014000
 800730c:	40001800 	.word	0x40001800

08007310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f023 0201 	bic.w	r2, r3, #1
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800733a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f023 030a 	bic.w	r3, r3, #10
 800734c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800736e:	b480      	push	{r7}
 8007370:	b087      	sub	sp, #28
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	f023 0210 	bic.w	r2, r3, #16
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	031b      	lsls	r3, r3, #12
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	621a      	str	r2, [r3, #32]
}
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f023 0210 	bic.w	r2, r3, #16
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007412:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	031b      	lsls	r3, r3, #12
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007424:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	621a      	str	r2, [r3, #32]
}
 800743c:	bf00      	nop
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f023 0303 	bic.w	r3, r3, #3
 8007474:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4313      	orrs	r3, r2
 800747c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007484:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	b2db      	uxtb	r3, r3
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007498:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	621a      	str	r2, [r3, #32]
}
 80074b4:	bf00      	nop
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	031b      	lsls	r3, r3, #12
 8007504:	b29b      	uxth	r3, r3
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007512:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	031b      	lsls	r3, r3, #12
 8007518:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	f043 0307 	orr.w	r3, r3, #7
 800755c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	609a      	str	r2, [r3, #8]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800758a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	021a      	lsls	r2, r3, #8
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	431a      	orrs	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4313      	orrs	r3, r2
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	609a      	str	r2, [r3, #8]
}
 80075a4:	bf00      	nop
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2201      	movs	r2, #1
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1a      	ldr	r2, [r3, #32]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	401a      	ands	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1a      	ldr	r2, [r3, #32]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	fa01 f303 	lsl.w	r3, r1, r3
 80075e8:	431a      	orrs	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	621a      	str	r2, [r3, #32]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007610:	2302      	movs	r3, #2
 8007612:	e05a      	b.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a21      	ldr	r2, [pc, #132]	; (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d022      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007660:	d01d      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d018      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1b      	ldr	r2, [pc, #108]	; (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d013      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00e      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a18      	ldr	r2, [pc, #96]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d009      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a17      	ldr	r2, [pc, #92]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d004      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d10c      	bne.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40010000 	.word	0x40010000
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40010400 	.word	0x40010400
 80076ec:	40014000 	.word	0x40014000
 80076f0:	40001800 	.word	0x40001800

080076f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800770c:	2302      	movs	r3, #2
 800770e:	e03d      	b.n	800778c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e03f      	b.n	8007852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fc fc14 	bl	8004014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2224      	movs	r2, #36	; 0x24
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fe1f 	bl	8008448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695a      	ldr	r2, [r3, #20]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b08a      	sub	sp, #40	; 0x28
 800785e:	af02      	add	r7, sp, #8
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b20      	cmp	r3, #32
 8007878:	d17c      	bne.n	8007974 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_UART_Transmit+0x2c>
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e075      	b.n	8007976 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_UART_Transmit+0x3e>
 8007894:	2302      	movs	r3, #2
 8007896:	e06e      	b.n	8007976 <HAL_UART_Transmit+0x11c>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2221      	movs	r2, #33	; 0x21
 80078aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ae:	f7fc fd11 	bl	80042d4 <HAL_GetTick>
 80078b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	88fa      	ldrh	r2, [r7, #6]
 80078b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c8:	d108      	bne.n	80078dc <HAL_UART_Transmit+0x82>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	e003      	b.n	80078e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80078ec:	e02a      	b.n	8007944 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2180      	movs	r1, #128	; 0x80
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fb63 	bl	8007fc4 <UART_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e036      	b.n	8007976 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10b      	bne.n	8007926 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800791c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	3302      	adds	r3, #2
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	e007      	b.n	8007936 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	781a      	ldrb	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	3301      	adds	r3, #1
 8007934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007948:	b29b      	uxth	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1cf      	bne.n	80078ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2200      	movs	r2, #0
 8007956:	2140      	movs	r1, #64	; 0x40
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fb33 	bl	8007fc4 <UART_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e006      	b.n	8007976 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	e000      	b.n	8007976 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007974:	2302      	movs	r3, #2
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	4613      	mov	r3, r2
 800798a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b20      	cmp	r3, #32
 8007996:	d130      	bne.n	80079fa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_UART_Transmit_IT+0x26>
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e029      	b.n	80079fc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_UART_Transmit_IT+0x38>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e022      	b.n	80079fc <HAL_UART_Transmit_IT+0x7e>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2221      	movs	r2, #33	; 0x21
 80079da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e000      	b.n	80079fc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80079fa:	2302      	movs	r3, #2
  }
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	d11d      	bne.n	8007a5e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_UART_Receive_IT+0x26>
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e016      	b.n	8007a60 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_UART_Receive_IT+0x38>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e00f      	b.n	8007a60 <HAL_UART_Receive_IT+0x58>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	461a      	mov	r2, r3
 8007a52:	68b9      	ldr	r1, [r7, #8]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fb23 	bl	80080a0 <UART_Start_Receive_IT>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	e000      	b.n	8007a60 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
  }
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b0ba      	sub	sp, #232	; 0xe8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10f      	bne.n	8007ace <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_UART_IRQHandler+0x66>
 8007aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fc03 	bl	80082d2 <UART_Receive_IT>
      return;
 8007acc:	e256      	b.n	8007f7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 80de 	beq.w	8007c94 <HAL_UART_IRQHandler+0x22c>
 8007ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d106      	bne.n	8007af2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80d1 	beq.w	8007c94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <HAL_UART_IRQHandler+0xae>
 8007afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	f043 0201 	orr.w	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <HAL_UART_IRQHandler+0xd2>
 8007b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	f043 0202 	orr.w	r2, r3, #2
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00b      	beq.n	8007b5e <HAL_UART_IRQHandler+0xf6>
 8007b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f043 0204 	orr.w	r2, r3, #4
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d011      	beq.n	8007b8e <HAL_UART_IRQHandler+0x126>
 8007b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f043 0208 	orr.w	r2, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 81ed 	beq.w	8007f72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x14e>
 8007ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fb8e 	bl	80082d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <HAL_UART_IRQHandler+0x17a>
 8007bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d04f      	beq.n	8007c82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa96 	bl	8008114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d141      	bne.n	8007c7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3314      	adds	r3, #20
 8007bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3314      	adds	r3, #20
 8007c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1d9      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d013      	beq.n	8007c72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	4a7d      	ldr	r2, [pc, #500]	; (8007e44 <HAL_UART_IRQHandler+0x3dc>)
 8007c50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd f82f 	bl	8004cba <HAL_DMA_Abort_IT>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d016      	beq.n	8007c90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c70:	e00e      	b.n	8007c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f990 	bl	8007f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c78:	e00a      	b.n	8007c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f98c 	bl	8007f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c80:	e006      	b.n	8007c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f988 	bl	8007f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c8e:	e170      	b.n	8007f72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	bf00      	nop
    return;
 8007c92:	e16e      	b.n	8007f72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	f040 814a 	bne.w	8007f32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 8143 	beq.w	8007f32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 813c 	beq.w	8007f32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60bb      	str	r3, [r7, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	60bb      	str	r3, [r7, #8]
 8007cce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	f040 80b4 	bne.w	8007e48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8140 	beq.w	8007f76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	f080 8139 	bcs.w	8007f76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d16:	f000 8088 	beq.w	8007e2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	330c      	adds	r3, #12
 8007d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	330c      	adds	r3, #12
 8007d42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1d9      	bne.n	8007d1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3314      	adds	r3, #20
 8007d6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d78:	f023 0301 	bic.w	r3, r3, #1
 8007d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3314      	adds	r3, #20
 8007d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e1      	bne.n	8007d66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3314      	adds	r3, #20
 8007da8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3314      	adds	r3, #20
 8007dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007dc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e3      	bne.n	8007da2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	330c      	adds	r3, #12
 8007dee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df2:	e853 3f00 	ldrex	r3, [r3]
 8007df6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dfa:	f023 0310 	bic.w	r3, r3, #16
 8007dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e3      	bne.n	8007de8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fc fed8 	bl	8004bda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f8b6 	bl	8007fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e40:	e099      	b.n	8007f76 <HAL_UART_IRQHandler+0x50e>
 8007e42:	bf00      	nop
 8007e44:	080081db 	.word	0x080081db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 808b 	beq.w	8007f7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 8086 	beq.w	8007f7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	330c      	adds	r3, #12
 8007e74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	330c      	adds	r3, #12
 8007e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e92:	647a      	str	r2, [r7, #68]	; 0x44
 8007e94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e3      	bne.n	8007e6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3314      	adds	r3, #20
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	f023 0301 	bic.w	r3, r3, #1
 8007ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3314      	adds	r3, #20
 8007ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007eca:	633a      	str	r2, [r7, #48]	; 0x30
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e3      	bne.n	8007ea6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	330c      	adds	r3, #12
 8007ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0310 	bic.w	r3, r3, #16
 8007f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f10:	61fa      	str	r2, [r7, #28]
 8007f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	69b9      	ldr	r1, [r7, #24]
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	e841 2300 	strex	r3, r2, [r1]
 8007f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e3      	bne.n	8007eec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f83e 	bl	8007fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f30:	e023      	b.n	8007f7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d009      	beq.n	8007f52 <HAL_UART_IRQHandler+0x4ea>
 8007f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f959 	bl	8008202 <UART_Transmit_IT>
    return;
 8007f50:	e014      	b.n	8007f7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <HAL_UART_IRQHandler+0x514>
 8007f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f999 	bl	80082a2 <UART_EndTransmit_IT>
    return;
 8007f70:	e004      	b.n	8007f7c <HAL_UART_IRQHandler+0x514>
    return;
 8007f72:	bf00      	nop
 8007f74:	e002      	b.n	8007f7c <HAL_UART_IRQHandler+0x514>
      return;
 8007f76:	bf00      	nop
 8007f78:	e000      	b.n	8007f7c <HAL_UART_IRQHandler+0x514>
      return;
 8007f7a:	bf00      	nop
  }
}
 8007f7c:	37e8      	adds	r7, #232	; 0xe8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop

08007f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b090      	sub	sp, #64	; 0x40
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd4:	e050      	b.n	8008078 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fdc:	d04c      	beq.n	8008078 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fe4:	f7fc f976 	bl	80042d4 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d241      	bcs.n	8008078 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008014:	637a      	str	r2, [r7, #52]	; 0x34
 8008016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800801a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3314      	adds	r3, #20
 800802e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f023 0301 	bic.w	r3, r3, #1
 800803e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3314      	adds	r3, #20
 8008046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008048:	623a      	str	r2, [r7, #32]
 800804a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	69f9      	ldr	r1, [r7, #28]
 800804e:	6a3a      	ldr	r2, [r7, #32]
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	61bb      	str	r3, [r7, #24]
   return(result);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e5      	bne.n	8008028 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2220      	movs	r2, #32
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e00f      	b.n	8008098 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	4013      	ands	r3, r2
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	429a      	cmp	r2, r3
 8008086:	bf0c      	ite	eq
 8008088:	2301      	moveq	r3, #1
 800808a:	2300      	movne	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	429a      	cmp	r2, r3
 8008094:	d09f      	beq.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3740      	adds	r7, #64	; 0x40
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	88fa      	ldrh	r2, [r7, #6]
 80080b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	88fa      	ldrh	r2, [r7, #6]
 80080be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2222      	movs	r2, #34	; 0x22
 80080ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	695a      	ldr	r2, [r3, #20]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f042 0201 	orr.w	r2, r2, #1
 80080f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f042 0220 	orr.w	r2, r2, #32
 8008104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b095      	sub	sp, #84	; 0x54
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	330c      	adds	r3, #12
 8008122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800813c:	643a      	str	r2, [r7, #64]	; 0x40
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e5      	bne.n	800811c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3314      	adds	r3, #20
 8008156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f023 0301 	bic.w	r3, r3, #1
 8008166:	64bb      	str	r3, [r7, #72]	; 0x48
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3314      	adds	r3, #20
 800816e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008170:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e5      	bne.n	8008150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008188:	2b01      	cmp	r3, #1
 800818a:	d119      	bne.n	80081c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	330c      	adds	r3, #12
 8008192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	e853 3f00 	ldrex	r3, [r3]
 800819a:	60bb      	str	r3, [r7, #8]
   return(result);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f023 0310 	bic.w	r3, r3, #16
 80081a2:	647b      	str	r3, [r7, #68]	; 0x44
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	330c      	adds	r3, #12
 80081aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ac:	61ba      	str	r2, [r7, #24]
 80081ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	6979      	ldr	r1, [r7, #20]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	613b      	str	r3, [r7, #16]
   return(result);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e5      	bne.n	800818c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081ce:	bf00      	nop
 80081d0:	3754      	adds	r7, #84	; 0x54
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff fecf 	bl	8007f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008202:	b480      	push	{r7}
 8008204:	b085      	sub	sp, #20
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b21      	cmp	r3, #33	; 0x21
 8008214:	d13e      	bne.n	8008294 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821e:	d114      	bne.n	800824a <UART_Transmit_IT+0x48>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d110      	bne.n	800824a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800823c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	1c9a      	adds	r2, r3, #2
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	621a      	str	r2, [r3, #32]
 8008248:	e008      	b.n	800825c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	1c59      	adds	r1, r3, #1
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6211      	str	r1, [r2, #32]
 8008254:	781a      	ldrb	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29b      	uxth	r3, r3
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	4619      	mov	r1, r3
 800826a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10f      	bne.n	8008290 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800827e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800828e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	e000      	b.n	8008296 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008294:	2302      	movs	r3, #2
  }
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fe5e 	bl	8007f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b08c      	sub	sp, #48	; 0x30
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b22      	cmp	r3, #34	; 0x22
 80082e4:	f040 80ab 	bne.w	800843e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f0:	d117      	bne.n	8008322 <UART_Receive_IT+0x50>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d113      	bne.n	8008322 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008310:	b29a      	uxth	r2, r3
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	1c9a      	adds	r2, r3, #2
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	629a      	str	r2, [r3, #40]	; 0x28
 8008320:	e026      	b.n	8008370 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008334:	d007      	beq.n	8008346 <UART_Receive_IT+0x74>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10a      	bne.n	8008354 <UART_Receive_IT+0x82>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d106      	bne.n	8008354 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	b2da      	uxtb	r2, r3
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	e008      	b.n	8008366 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008360:	b2da      	uxtb	r2, r3
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29b      	uxth	r3, r3
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	4619      	mov	r1, r3
 800837e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008380:	2b00      	cmp	r3, #0
 8008382:	d15a      	bne.n	800843a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0220 	bic.w	r2, r2, #32
 8008392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0201 	bic.w	r2, r2, #1
 80083b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d135      	bne.n	8008430 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	330c      	adds	r3, #12
 80083d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	613b      	str	r3, [r7, #16]
   return(result);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f023 0310 	bic.w	r3, r3, #16
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	330c      	adds	r3, #12
 80083e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ea:	623a      	str	r2, [r7, #32]
 80083ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	69f9      	ldr	r1, [r7, #28]
 80083f0:	6a3a      	ldr	r2, [r7, #32]
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e5      	bne.n	80083ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0310 	and.w	r3, r3, #16
 8008408:	2b10      	cmp	r3, #16
 800840a:	d10a      	bne.n	8008422 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff fdbf 	bl	8007fac <HAL_UARTEx_RxEventCallback>
 800842e:	e002      	b.n	8008436 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fa fd13 	bl	8002e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	e002      	b.n	8008440 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	e000      	b.n	8008440 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800843e:	2302      	movs	r3, #2
  }
}
 8008440:	4618      	mov	r0, r3
 8008442:	3730      	adds	r7, #48	; 0x30
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	b09f      	sub	sp, #124	; 0x7c
 800844e:	af00      	add	r7, sp, #0
 8008450:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800845c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845e:	68d9      	ldr	r1, [r3, #12]
 8008460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	ea40 0301 	orr.w	r3, r0, r1
 8008468:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800846a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800846c:	689a      	ldr	r2, [r3, #8]
 800846e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	431a      	orrs	r2, r3
 8008474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	431a      	orrs	r2, r3
 800847a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	4313      	orrs	r3, r2
 8008480:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800848c:	f021 010c 	bic.w	r1, r1, #12
 8008490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008496:	430b      	orrs	r3, r1
 8008498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800849a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a6:	6999      	ldr	r1, [r3, #24]
 80084a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	ea40 0301 	orr.w	r3, r0, r1
 80084b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	4bc5      	ldr	r3, [pc, #788]	; (80087cc <UART_SetConfig+0x384>)
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d004      	beq.n	80084c6 <UART_SetConfig+0x7e>
 80084bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	4bc3      	ldr	r3, [pc, #780]	; (80087d0 <UART_SetConfig+0x388>)
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d103      	bne.n	80084ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084c6:	f7fd fa2d 	bl	8005924 <HAL_RCC_GetPCLK2Freq>
 80084ca:	6778      	str	r0, [r7, #116]	; 0x74
 80084cc:	e002      	b.n	80084d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084ce:	f7fd fa15 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 80084d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084dc:	f040 80b6 	bne.w	800864c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e2:	461c      	mov	r4, r3
 80084e4:	f04f 0500 	mov.w	r5, #0
 80084e8:	4622      	mov	r2, r4
 80084ea:	462b      	mov	r3, r5
 80084ec:	1891      	adds	r1, r2, r2
 80084ee:	6439      	str	r1, [r7, #64]	; 0x40
 80084f0:	415b      	adcs	r3, r3
 80084f2:	647b      	str	r3, [r7, #68]	; 0x44
 80084f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084f8:	1912      	adds	r2, r2, r4
 80084fa:	eb45 0303 	adc.w	r3, r5, r3
 80084fe:	f04f 0000 	mov.w	r0, #0
 8008502:	f04f 0100 	mov.w	r1, #0
 8008506:	00d9      	lsls	r1, r3, #3
 8008508:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800850c:	00d0      	lsls	r0, r2, #3
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	1911      	adds	r1, r2, r4
 8008514:	6639      	str	r1, [r7, #96]	; 0x60
 8008516:	416b      	adcs	r3, r5
 8008518:	667b      	str	r3, [r7, #100]	; 0x64
 800851a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	461a      	mov	r2, r3
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	1891      	adds	r1, r2, r2
 8008526:	63b9      	str	r1, [r7, #56]	; 0x38
 8008528:	415b      	adcs	r3, r3
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008530:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008534:	f7f8 fb80 	bl	8000c38 <__aeabi_uldivmod>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4ba5      	ldr	r3, [pc, #660]	; (80087d4 <UART_SetConfig+0x38c>)
 800853e:	fba3 2302 	umull	r2, r3, r3, r2
 8008542:	095b      	lsrs	r3, r3, #5
 8008544:	011e      	lsls	r6, r3, #4
 8008546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008548:	461c      	mov	r4, r3
 800854a:	f04f 0500 	mov.w	r5, #0
 800854e:	4622      	mov	r2, r4
 8008550:	462b      	mov	r3, r5
 8008552:	1891      	adds	r1, r2, r2
 8008554:	6339      	str	r1, [r7, #48]	; 0x30
 8008556:	415b      	adcs	r3, r3
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
 800855a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800855e:	1912      	adds	r2, r2, r4
 8008560:	eb45 0303 	adc.w	r3, r5, r3
 8008564:	f04f 0000 	mov.w	r0, #0
 8008568:	f04f 0100 	mov.w	r1, #0
 800856c:	00d9      	lsls	r1, r3, #3
 800856e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008572:	00d0      	lsls	r0, r2, #3
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	1911      	adds	r1, r2, r4
 800857a:	65b9      	str	r1, [r7, #88]	; 0x58
 800857c:	416b      	adcs	r3, r5
 800857e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	461a      	mov	r2, r3
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	1891      	adds	r1, r2, r2
 800858c:	62b9      	str	r1, [r7, #40]	; 0x28
 800858e:	415b      	adcs	r3, r3
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008596:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800859a:	f7f8 fb4d 	bl	8000c38 <__aeabi_uldivmod>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4b8c      	ldr	r3, [pc, #560]	; (80087d4 <UART_SetConfig+0x38c>)
 80085a4:	fba3 1302 	umull	r1, r3, r3, r2
 80085a8:	095b      	lsrs	r3, r3, #5
 80085aa:	2164      	movs	r1, #100	; 0x64
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	3332      	adds	r3, #50	; 0x32
 80085b6:	4a87      	ldr	r2, [pc, #540]	; (80087d4 <UART_SetConfig+0x38c>)
 80085b8:	fba2 2303 	umull	r2, r3, r2, r3
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085c4:	441e      	add	r6, r3
 80085c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c8:	4618      	mov	r0, r3
 80085ca:	f04f 0100 	mov.w	r1, #0
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	1894      	adds	r4, r2, r2
 80085d4:	623c      	str	r4, [r7, #32]
 80085d6:	415b      	adcs	r3, r3
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
 80085da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085de:	1812      	adds	r2, r2, r0
 80085e0:	eb41 0303 	adc.w	r3, r1, r3
 80085e4:	f04f 0400 	mov.w	r4, #0
 80085e8:	f04f 0500 	mov.w	r5, #0
 80085ec:	00dd      	lsls	r5, r3, #3
 80085ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085f2:	00d4      	lsls	r4, r2, #3
 80085f4:	4622      	mov	r2, r4
 80085f6:	462b      	mov	r3, r5
 80085f8:	1814      	adds	r4, r2, r0
 80085fa:	653c      	str	r4, [r7, #80]	; 0x50
 80085fc:	414b      	adcs	r3, r1
 80085fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	461a      	mov	r2, r3
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	1891      	adds	r1, r2, r2
 800860c:	61b9      	str	r1, [r7, #24]
 800860e:	415b      	adcs	r3, r3
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008616:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800861a:	f7f8 fb0d 	bl	8000c38 <__aeabi_uldivmod>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4b6c      	ldr	r3, [pc, #432]	; (80087d4 <UART_SetConfig+0x38c>)
 8008624:	fba3 1302 	umull	r1, r3, r3, r2
 8008628:	095b      	lsrs	r3, r3, #5
 800862a:	2164      	movs	r1, #100	; 0x64
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	3332      	adds	r3, #50	; 0x32
 8008636:	4a67      	ldr	r2, [pc, #412]	; (80087d4 <UART_SetConfig+0x38c>)
 8008638:	fba2 2303 	umull	r2, r3, r2, r3
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	f003 0207 	and.w	r2, r3, #7
 8008642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4432      	add	r2, r6
 8008648:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800864a:	e0b9      	b.n	80087c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800864c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800864e:	461c      	mov	r4, r3
 8008650:	f04f 0500 	mov.w	r5, #0
 8008654:	4622      	mov	r2, r4
 8008656:	462b      	mov	r3, r5
 8008658:	1891      	adds	r1, r2, r2
 800865a:	6139      	str	r1, [r7, #16]
 800865c:	415b      	adcs	r3, r3
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008664:	1912      	adds	r2, r2, r4
 8008666:	eb45 0303 	adc.w	r3, r5, r3
 800866a:	f04f 0000 	mov.w	r0, #0
 800866e:	f04f 0100 	mov.w	r1, #0
 8008672:	00d9      	lsls	r1, r3, #3
 8008674:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008678:	00d0      	lsls	r0, r2, #3
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	eb12 0804 	adds.w	r8, r2, r4
 8008682:	eb43 0905 	adc.w	r9, r3, r5
 8008686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	4618      	mov	r0, r3
 800868c:	f04f 0100 	mov.w	r1, #0
 8008690:	f04f 0200 	mov.w	r2, #0
 8008694:	f04f 0300 	mov.w	r3, #0
 8008698:	008b      	lsls	r3, r1, #2
 800869a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800869e:	0082      	lsls	r2, r0, #2
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	f7f8 fac8 	bl	8000c38 <__aeabi_uldivmod>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4b49      	ldr	r3, [pc, #292]	; (80087d4 <UART_SetConfig+0x38c>)
 80086ae:	fba3 2302 	umull	r2, r3, r3, r2
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	011e      	lsls	r6, r3, #4
 80086b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086b8:	4618      	mov	r0, r3
 80086ba:	f04f 0100 	mov.w	r1, #0
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	1894      	adds	r4, r2, r2
 80086c4:	60bc      	str	r4, [r7, #8]
 80086c6:	415b      	adcs	r3, r3
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086ce:	1812      	adds	r2, r2, r0
 80086d0:	eb41 0303 	adc.w	r3, r1, r3
 80086d4:	f04f 0400 	mov.w	r4, #0
 80086d8:	f04f 0500 	mov.w	r5, #0
 80086dc:	00dd      	lsls	r5, r3, #3
 80086de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086e2:	00d4      	lsls	r4, r2, #3
 80086e4:	4622      	mov	r2, r4
 80086e6:	462b      	mov	r3, r5
 80086e8:	1814      	adds	r4, r2, r0
 80086ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80086ec:	414b      	adcs	r3, r1
 80086ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f04f 0100 	mov.w	r1, #0
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	f04f 0300 	mov.w	r3, #0
 8008702:	008b      	lsls	r3, r1, #2
 8008704:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008708:	0082      	lsls	r2, r0, #2
 800870a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800870e:	f7f8 fa93 	bl	8000c38 <__aeabi_uldivmod>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <UART_SetConfig+0x38c>)
 8008718:	fba3 1302 	umull	r1, r3, r3, r2
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	2164      	movs	r1, #100	; 0x64
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	011b      	lsls	r3, r3, #4
 8008728:	3332      	adds	r3, #50	; 0x32
 800872a:	4a2a      	ldr	r2, [pc, #168]	; (80087d4 <UART_SetConfig+0x38c>)
 800872c:	fba2 2303 	umull	r2, r3, r2, r3
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008736:	441e      	add	r6, r3
 8008738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800873a:	4618      	mov	r0, r3
 800873c:	f04f 0100 	mov.w	r1, #0
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	1894      	adds	r4, r2, r2
 8008746:	603c      	str	r4, [r7, #0]
 8008748:	415b      	adcs	r3, r3
 800874a:	607b      	str	r3, [r7, #4]
 800874c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008750:	1812      	adds	r2, r2, r0
 8008752:	eb41 0303 	adc.w	r3, r1, r3
 8008756:	f04f 0400 	mov.w	r4, #0
 800875a:	f04f 0500 	mov.w	r5, #0
 800875e:	00dd      	lsls	r5, r3, #3
 8008760:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008764:	00d4      	lsls	r4, r2, #3
 8008766:	4622      	mov	r2, r4
 8008768:	462b      	mov	r3, r5
 800876a:	eb12 0a00 	adds.w	sl, r2, r0
 800876e:	eb43 0b01 	adc.w	fp, r3, r1
 8008772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	4618      	mov	r0, r3
 8008778:	f04f 0100 	mov.w	r1, #0
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	f04f 0300 	mov.w	r3, #0
 8008784:	008b      	lsls	r3, r1, #2
 8008786:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800878a:	0082      	lsls	r2, r0, #2
 800878c:	4650      	mov	r0, sl
 800878e:	4659      	mov	r1, fp
 8008790:	f7f8 fa52 	bl	8000c38 <__aeabi_uldivmod>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <UART_SetConfig+0x38c>)
 800879a:	fba3 1302 	umull	r1, r3, r3, r2
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	2164      	movs	r1, #100	; 0x64
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	3332      	adds	r3, #50	; 0x32
 80087ac:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <UART_SetConfig+0x38c>)
 80087ae:	fba2 2303 	umull	r2, r3, r2, r3
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4432      	add	r2, r6
 80087be:	609a      	str	r2, [r3, #8]
}
 80087c0:	bf00      	nop
 80087c2:	377c      	adds	r7, #124	; 0x7c
 80087c4:	46bd      	mov	sp, r7
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	bf00      	nop
 80087cc:	40011000 	.word	0x40011000
 80087d0:	40011400 	.word	0x40011400
 80087d4:	51eb851f 	.word	0x51eb851f

080087d8 <__NVIC_SetPriority>:
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db0a      	blt.n	8008802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	490c      	ldr	r1, [pc, #48]	; (8008824 <__NVIC_SetPriority+0x4c>)
 80087f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087f6:	0112      	lsls	r2, r2, #4
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	440b      	add	r3, r1
 80087fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008800:	e00a      	b.n	8008818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	b2da      	uxtb	r2, r3
 8008806:	4908      	ldr	r1, [pc, #32]	; (8008828 <__NVIC_SetPriority+0x50>)
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	f003 030f 	and.w	r3, r3, #15
 800880e:	3b04      	subs	r3, #4
 8008810:	0112      	lsls	r2, r2, #4
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	440b      	add	r3, r1
 8008816:	761a      	strb	r2, [r3, #24]
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	e000e100 	.word	0xe000e100
 8008828:	e000ed00 	.word	0xe000ed00

0800882c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008830:	2100      	movs	r1, #0
 8008832:	f06f 0004 	mvn.w	r0, #4
 8008836:	f7ff ffcf 	bl	80087d8 <__NVIC_SetPriority>
#endif
}
 800883a:	bf00      	nop
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008846:	f3ef 8305 	mrs	r3, IPSR
 800884a:	603b      	str	r3, [r7, #0]
  return(result);
 800884c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008852:	f06f 0305 	mvn.w	r3, #5
 8008856:	607b      	str	r3, [r7, #4]
 8008858:	e00c      	b.n	8008874 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <osKernelInitialize+0x44>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <osKernelInitialize+0x44>)
 8008864:	2201      	movs	r2, #1
 8008866:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008868:	2300      	movs	r3, #0
 800886a:	607b      	str	r3, [r7, #4]
 800886c:	e002      	b.n	8008874 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800886e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008874:	687b      	ldr	r3, [r7, #4]
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	200000e0 	.word	0x200000e0

08008888 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800888e:	f3ef 8305 	mrs	r3, IPSR
 8008892:	603b      	str	r3, [r7, #0]
  return(result);
 8008894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800889a:	f06f 0305 	mvn.w	r3, #5
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	e010      	b.n	80088c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088a2:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <osKernelStart+0x48>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d109      	bne.n	80088be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088aa:	f7ff ffbf 	bl	800882c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80088ae:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <osKernelStart+0x48>)
 80088b0:	2202      	movs	r2, #2
 80088b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80088b4:	f001 f866 	bl	8009984 <vTaskStartScheduler>
      stat = osOK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	607b      	str	r3, [r7, #4]
 80088bc:	e002      	b.n	80088c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80088be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088c4:	687b      	ldr	r3, [r7, #4]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	200000e0 	.word	0x200000e0

080088d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08e      	sub	sp, #56	; 0x38
 80088d8:	af04      	add	r7, sp, #16
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e4:	f3ef 8305 	mrs	r3, IPSR
 80088e8:	617b      	str	r3, [r7, #20]
  return(result);
 80088ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d17e      	bne.n	80089ee <osThreadNew+0x11a>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d07b      	beq.n	80089ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80088f6:	2380      	movs	r3, #128	; 0x80
 80088f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80088fa:	2318      	movs	r3, #24
 80088fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008906:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d045      	beq.n	800899a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <osThreadNew+0x48>
        name = attr->name;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <osThreadNew+0x6e>
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b38      	cmp	r3, #56	; 0x38
 8008934:	d805      	bhi.n	8008942 <osThreadNew+0x6e>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <osThreadNew+0x72>
        return (NULL);
 8008942:	2300      	movs	r3, #0
 8008944:	e054      	b.n	80089f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	089b      	lsrs	r3, r3, #2
 8008954:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00e      	beq.n	800897c <osThreadNew+0xa8>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	2b5b      	cmp	r3, #91	; 0x5b
 8008964:	d90a      	bls.n	800897c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800896a:	2b00      	cmp	r3, #0
 800896c:	d006      	beq.n	800897c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <osThreadNew+0xa8>
        mem = 1;
 8008976:	2301      	movs	r3, #1
 8008978:	61bb      	str	r3, [r7, #24]
 800897a:	e010      	b.n	800899e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10c      	bne.n	800899e <osThreadNew+0xca>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <osThreadNew+0xca>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d104      	bne.n	800899e <osThreadNew+0xca>
          mem = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	e001      	b.n	800899e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d110      	bne.n	80089c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089ac:	9202      	str	r2, [sp, #8]
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	6a3a      	ldr	r2, [r7, #32]
 80089b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fe0c 	bl	80095d8 <xTaskCreateStatic>
 80089c0:	4603      	mov	r3, r0
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	e013      	b.n	80089ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d110      	bne.n	80089ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f107 0310 	add.w	r3, r7, #16
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fe57 	bl	8009692 <xTaskCreate>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d001      	beq.n	80089ee <osThreadNew+0x11a>
            hTask = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80089ee:	693b      	ldr	r3, [r7, #16]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3728      	adds	r7, #40	; 0x28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a00:	f3ef 8305 	mrs	r3, IPSR
 8008a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <osDelay+0x1c>
    stat = osErrorISR;
 8008a0c:	f06f 0305 	mvn.w	r3, #5
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	e007      	b.n	8008a24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 ff7c 	bl	800991c <vTaskDelay>
    }
  }

  return (stat);
 8008a24:	68fb      	ldr	r3, [r7, #12]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4a07      	ldr	r2, [pc, #28]	; (8008a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8008a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <vApplicationGetIdleTaskMemory+0x30>)
 8008a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2280      	movs	r2, #128	; 0x80
 8008a4c:	601a      	str	r2, [r3, #0]
}
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	200000e4 	.word	0x200000e4
 8008a60:	20000140 	.word	0x20000140

08008a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4a07      	ldr	r2, [pc, #28]	; (8008a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	4a06      	ldr	r2, [pc, #24]	; (8008a94 <vApplicationGetTimerTaskMemory+0x30>)
 8008a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a82:	601a      	str	r2, [r3, #0]
}
 8008a84:	bf00      	nop
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	20000340 	.word	0x20000340
 8008a94:	2000039c 	.word	0x2000039c

08008a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f103 0208 	add.w	r2, r3, #8
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f103 0208 	add.w	r2, r3, #8
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f103 0208 	add.w	r2, r3, #8
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	601a      	str	r2, [r3, #0]
}
 8008b2e:	bf00      	nop
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b50:	d103      	bne.n	8008b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	e00c      	b.n	8008b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	60fb      	str	r3, [r7, #12]
 8008b60:	e002      	b.n	8008b68 <vListInsert+0x2e>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d2f6      	bcs.n	8008b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	601a      	str	r2, [r3, #0]
}
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6892      	ldr	r2, [r2, #8]
 8008bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6852      	ldr	r2, [r2, #4]
 8008bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d103      	bne.n	8008be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	1e5a      	subs	r2, r3, #1
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c2a:	f002 f84b 	bl	800acc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	68f9      	ldr	r1, [r7, #12]
 8008c38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	441a      	add	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	68f9      	ldr	r1, [r7, #12]
 8008c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c60:	fb01 f303 	mul.w	r3, r1, r3
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	22ff      	movs	r2, #255	; 0xff
 8008c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	22ff      	movs	r2, #255	; 0xff
 8008c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d114      	bne.n	8008caa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d01a      	beq.n	8008cbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3310      	adds	r3, #16
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 f903 	bl	8009e98 <xTaskRemoveFromEventList>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d012      	beq.n	8008cbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <xQueueGenericReset+0xcc>)
 8008c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	e009      	b.n	8008cbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3310      	adds	r3, #16
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff fef2 	bl	8008a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3324      	adds	r3, #36	; 0x24
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7ff feed 	bl	8008a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008cbe:	f002 f831 	bl	800ad24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008cc2:	2301      	movs	r3, #1
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08e      	sub	sp, #56	; 0x38
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <xQueueGenericCreateStatic+0x52>
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <xQueueGenericCreateStatic+0x56>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e000      	b.n	8008d28 <xQueueGenericCreateStatic+0x58>
 8008d26:	2300      	movs	r3, #0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	623b      	str	r3, [r7, #32]
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d102      	bne.n	8008d4e <xQueueGenericCreateStatic+0x7e>
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <xQueueGenericCreateStatic+0x82>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <xQueueGenericCreateStatic+0x84>
 8008d52:	2300      	movs	r3, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	61fb      	str	r3, [r7, #28]
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d6e:	2350      	movs	r3, #80	; 0x50
 8008d70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b50      	cmp	r3, #80	; 0x50
 8008d76:	d00a      	beq.n	8008d8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	61bb      	str	r3, [r7, #24]
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00d      	beq.n	8008db6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008da2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	4613      	mov	r3, r2
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	68b9      	ldr	r1, [r7, #8]
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 f805 	bl	8008dc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3730      	adds	r7, #48	; 0x30
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d103      	bne.n	8008ddc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	e002      	b.n	8008de2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008dee:	2101      	movs	r1, #1
 8008df0:	69b8      	ldr	r0, [r7, #24]
 8008df2:	f7ff ff05 	bl	8008c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	78fa      	ldrb	r2, [r7, #3]
 8008dfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008dfe:	bf00      	nop
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e16:	2300      	movs	r3, #0
 8008e18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <xQueueGenericSend+0x32>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d103      	bne.n	8008e48 <xQueueGenericSend+0x40>
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <xQueueGenericSend+0x44>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e000      	b.n	8008e4e <xQueueGenericSend+0x46>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <xQueueGenericSend+0x60>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d103      	bne.n	8008e76 <xQueueGenericSend+0x6e>
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <xQueueGenericSend+0x72>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e000      	b.n	8008e7c <xQueueGenericSend+0x74>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <xQueueGenericSend+0x8e>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	623b      	str	r3, [r7, #32]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e96:	f001 f9bd 	bl	800a214 <xTaskGetSchedulerState>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <xQueueGenericSend+0x9e>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <xQueueGenericSend+0xa2>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <xQueueGenericSend+0xa4>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	61fb      	str	r3, [r7, #28]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ec6:	f001 fefd 	bl	800acc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d302      	bcc.n	8008edc <xQueueGenericSend+0xd4>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d129      	bne.n	8008f30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ee2:	f000 fa0b 	bl	80092fc <prvCopyDataToQueue>
 8008ee6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d010      	beq.n	8008f12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	3324      	adds	r3, #36	; 0x24
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 ffcf 	bl	8009e98 <xTaskRemoveFromEventList>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d013      	beq.n	8008f28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f00:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <xQueueGenericSend+0x1f8>)
 8008f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	e00a      	b.n	8008f28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d007      	beq.n	8008f28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f18:	4b39      	ldr	r3, [pc, #228]	; (8009000 <xQueueGenericSend+0x1f8>)
 8008f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f28:	f001 fefc 	bl	800ad24 <vPortExitCritical>
				return pdPASS;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e063      	b.n	8008ff8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d103      	bne.n	8008f3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f36:	f001 fef5 	bl	800ad24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e05c      	b.n	8008ff8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d106      	bne.n	8008f52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f44:	f107 0314 	add.w	r3, r7, #20
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f001 f809 	bl	8009f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f52:	f001 fee7 	bl	800ad24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f56:	f000 fd7b 	bl	8009a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f5a:	f001 feb3 	bl	800acc4 <vPortEnterCritical>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f64:	b25b      	sxtb	r3, r3
 8008f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f6a:	d103      	bne.n	8008f74 <xQueueGenericSend+0x16c>
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f7a:	b25b      	sxtb	r3, r3
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f80:	d103      	bne.n	8008f8a <xQueueGenericSend+0x182>
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f8a:	f001 fecb 	bl	800ad24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f8e:	1d3a      	adds	r2, r7, #4
 8008f90:	f107 0314 	add.w	r3, r7, #20
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fff8 	bl	8009f8c <xTaskCheckForTimeOut>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d124      	bne.n	8008fec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fa4:	f000 faa2 	bl	80094ec <prvIsQueueFull>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d018      	beq.n	8008fe0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	3310      	adds	r3, #16
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 ff1e 	bl	8009df8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fbe:	f000 fa2d 	bl	800941c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008fc2:	f000 fd53 	bl	8009a6c <xTaskResumeAll>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f47f af7c 	bne.w	8008ec6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008fce:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <xQueueGenericSend+0x1f8>)
 8008fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	e772      	b.n	8008ec6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fe2:	f000 fa1b 	bl	800941c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fe6:	f000 fd41 	bl	8009a6c <xTaskResumeAll>
 8008fea:	e76c      	b.n	8008ec6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fee:	f000 fa15 	bl	800941c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ff2:	f000 fd3b 	bl	8009a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ff6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3738      	adds	r7, #56	; 0x38
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	e000ed04 	.word	0xe000ed04

08009004 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b090      	sub	sp, #64	; 0x40
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <xQueueGenericSendFromISR+0x3c>
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <xQueueGenericSendFromISR+0x40>
 8009040:	2301      	movs	r3, #1
 8009042:	e000      	b.n	8009046 <xQueueGenericSendFromISR+0x42>
 8009044:	2300      	movs	r3, #0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10a      	bne.n	8009060 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b02      	cmp	r3, #2
 8009064:	d103      	bne.n	800906e <xQueueGenericSendFromISR+0x6a>
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <xQueueGenericSendFromISR+0x6e>
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <xQueueGenericSendFromISR+0x70>
 8009072:	2300      	movs	r3, #0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	623b      	str	r3, [r7, #32]
}
 800908a:	bf00      	nop
 800908c:	e7fe      	b.n	800908c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800908e:	f001 fefb 	bl	800ae88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009092:	f3ef 8211 	mrs	r2, BASEPRI
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	61fa      	str	r2, [r7, #28]
 80090a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d302      	bcc.n	80090c0 <xQueueGenericSendFromISR+0xbc>
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d12f      	bne.n	8009120 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090d6:	f000 f911 	bl	80092fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80090de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090e2:	d112      	bne.n	800910a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d016      	beq.n	800911a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ee:	3324      	adds	r3, #36	; 0x24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fed1 	bl	8009e98 <xTaskRemoveFromEventList>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00e      	beq.n	800911a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	e007      	b.n	800911a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800910a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800910e:	3301      	adds	r3, #1
 8009110:	b2db      	uxtb	r3, r3
 8009112:	b25a      	sxtb	r2, r3
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800911a:	2301      	movs	r3, #1
 800911c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800911e:	e001      	b.n	8009124 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009120:	2300      	movs	r3, #0
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009126:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800912e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009132:	4618      	mov	r0, r3
 8009134:	3740      	adds	r7, #64	; 0x40
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08c      	sub	sp, #48	; 0x30
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009148:	2300      	movs	r3, #0
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10a      	bne.n	800916c <xQueueReceive+0x30>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	623b      	str	r3, [r7, #32]
}
 8009168:	bf00      	nop
 800916a:	e7fe      	b.n	800916a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d103      	bne.n	800917a <xQueueReceive+0x3e>
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <xQueueReceive+0x42>
 800917a:	2301      	movs	r3, #1
 800917c:	e000      	b.n	8009180 <xQueueReceive+0x44>
 800917e:	2300      	movs	r3, #0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <xQueueReceive+0x5e>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	61fb      	str	r3, [r7, #28]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800919a:	f001 f83b 	bl	800a214 <xTaskGetSchedulerState>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <xQueueReceive+0x6e>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <xQueueReceive+0x72>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e000      	b.n	80091b0 <xQueueReceive+0x74>
 80091ae:	2300      	movs	r3, #0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <xQueueReceive+0x8e>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	61bb      	str	r3, [r7, #24]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091ca:	f001 fd7b 	bl	800acc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01f      	beq.n	800921a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091de:	f000 f8f7 	bl	80093d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	1e5a      	subs	r2, r3, #1
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00f      	beq.n	8009212 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	3310      	adds	r3, #16
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fe4e 	bl	8009e98 <xTaskRemoveFromEventList>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d007      	beq.n	8009212 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009202:	4b3d      	ldr	r3, [pc, #244]	; (80092f8 <xQueueReceive+0x1bc>)
 8009204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009212:	f001 fd87 	bl	800ad24 <vPortExitCritical>
				return pdPASS;
 8009216:	2301      	movs	r3, #1
 8009218:	e069      	b.n	80092ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009220:	f001 fd80 	bl	800ad24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009224:	2300      	movs	r3, #0
 8009226:	e062      	b.n	80092ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800922e:	f107 0310 	add.w	r3, r7, #16
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fe94 	bl	8009f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009238:	2301      	movs	r3, #1
 800923a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800923c:	f001 fd72 	bl	800ad24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009240:	f000 fc06 	bl	8009a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009244:	f001 fd3e 	bl	800acc4 <vPortEnterCritical>
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800924e:	b25b      	sxtb	r3, r3
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009254:	d103      	bne.n	800925e <xQueueReceive+0x122>
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009264:	b25b      	sxtb	r3, r3
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800926a:	d103      	bne.n	8009274 <xQueueReceive+0x138>
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009274:	f001 fd56 	bl	800ad24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009278:	1d3a      	adds	r2, r7, #4
 800927a:	f107 0310 	add.w	r3, r7, #16
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fe83 	bl	8009f8c <xTaskCheckForTimeOut>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d123      	bne.n	80092d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800928c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800928e:	f000 f917 	bl	80094c0 <prvIsQueueEmpty>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d017      	beq.n	80092c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	3324      	adds	r3, #36	; 0x24
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	4611      	mov	r1, r2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fda9 	bl	8009df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a8:	f000 f8b8 	bl	800941c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092ac:	f000 fbde 	bl	8009a6c <xTaskResumeAll>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d189      	bne.n	80091ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80092b6:	4b10      	ldr	r3, [pc, #64]	; (80092f8 <xQueueReceive+0x1bc>)
 80092b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	e780      	b.n	80091ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80092c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ca:	f000 f8a7 	bl	800941c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092ce:	f000 fbcd 	bl	8009a6c <xTaskResumeAll>
 80092d2:	e77a      	b.n	80091ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80092d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d6:	f000 f8a1 	bl	800941c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092da:	f000 fbc7 	bl	8009a6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e0:	f000 f8ee 	bl	80094c0 <prvIsQueueEmpty>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f43f af6f 	beq.w	80091ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3730      	adds	r7, #48	; 0x30
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10d      	bne.n	8009336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d14d      	bne.n	80093be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	4618      	mov	r0, r3
 8009328:	f000 ff92 	bl	800a250 <xTaskPriorityDisinherit>
 800932c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	609a      	str	r2, [r3, #8]
 8009334:	e043      	b.n	80093be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d119      	bne.n	8009370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6858      	ldr	r0, [r3, #4]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009344:	461a      	mov	r2, r3
 8009346:	68b9      	ldr	r1, [r7, #8]
 8009348:	f002 fa24 	bl	800b794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	429a      	cmp	r2, r3
 8009364:	d32b      	bcc.n	80093be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	605a      	str	r2, [r3, #4]
 800936e:	e026      	b.n	80093be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	68d8      	ldr	r0, [r3, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	461a      	mov	r2, r3
 800937a:	68b9      	ldr	r1, [r7, #8]
 800937c:	f002 fa0a 	bl	800b794 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009388:	425b      	negs	r3, r3
 800938a:	441a      	add	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d207      	bcs.n	80093ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	425b      	negs	r3, r3
 80093a6:	441a      	add	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d105      	bne.n	80093be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	3b01      	subs	r3, #1
 80093bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80093c6:	697b      	ldr	r3, [r7, #20]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d018      	beq.n	8009414 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	441a      	add	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d303      	bcc.n	8009404 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68d9      	ldr	r1, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940c:	461a      	mov	r2, r3
 800940e:	6838      	ldr	r0, [r7, #0]
 8009410:	f002 f9c0 	bl	800b794 <memcpy>
	}
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009424:	f001 fc4e 	bl	800acc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800942e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009430:	e011      	b.n	8009456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	d012      	beq.n	8009460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3324      	adds	r3, #36	; 0x24
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fd2a 	bl	8009e98 <xTaskRemoveFromEventList>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800944a:	f000 fe01 	bl	800a050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	3b01      	subs	r3, #1
 8009452:	b2db      	uxtb	r3, r3
 8009454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800945a:	2b00      	cmp	r3, #0
 800945c:	dce9      	bgt.n	8009432 <prvUnlockQueue+0x16>
 800945e:	e000      	b.n	8009462 <prvUnlockQueue+0x46>
					break;
 8009460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	22ff      	movs	r2, #255	; 0xff
 8009466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800946a:	f001 fc5b 	bl	800ad24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800946e:	f001 fc29 	bl	800acc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800947a:	e011      	b.n	80094a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d012      	beq.n	80094aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3310      	adds	r3, #16
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fd05 	bl	8009e98 <xTaskRemoveFromEventList>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009494:	f000 fddc 	bl	800a050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	3b01      	subs	r3, #1
 800949c:	b2db      	uxtb	r3, r3
 800949e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dce9      	bgt.n	800947c <prvUnlockQueue+0x60>
 80094a8:	e000      	b.n	80094ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	22ff      	movs	r2, #255	; 0xff
 80094b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80094b4:	f001 fc36 	bl	800ad24 <vPortExitCritical>
}
 80094b8:	bf00      	nop
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094c8:	f001 fbfc 	bl	800acc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094d4:	2301      	movs	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	e001      	b.n	80094de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094de:	f001 fc21 	bl	800ad24 <vPortExitCritical>

	return xReturn;
 80094e2:	68fb      	ldr	r3, [r7, #12]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094f4:	f001 fbe6 	bl	800acc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009500:	429a      	cmp	r2, r3
 8009502:	d102      	bne.n	800950a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009504:	2301      	movs	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	e001      	b.n	800950e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800950e:	f001 fc09 	bl	800ad24 <vPortExitCritical>

	return xReturn;
 8009512:	68fb      	ldr	r3, [r7, #12]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	e014      	b.n	8009556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800952c:	4a0f      	ldr	r2, [pc, #60]	; (800956c <vQueueAddToRegistry+0x50>)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10b      	bne.n	8009550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009538:	490c      	ldr	r1, [pc, #48]	; (800956c <vQueueAddToRegistry+0x50>)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009542:	4a0a      	ldr	r2, [pc, #40]	; (800956c <vQueueAddToRegistry+0x50>)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	4413      	add	r3, r2
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800954e:	e006      	b.n	800955e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3301      	adds	r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b07      	cmp	r3, #7
 800955a:	d9e7      	bls.n	800952c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800955c:	bf00      	nop
 800955e:	bf00      	nop
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20004d10 	.word	0x20004d10

08009570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009580:	f001 fba0 	bl	800acc4 <vPortEnterCritical>
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800958a:	b25b      	sxtb	r3, r3
 800958c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009590:	d103      	bne.n	800959a <vQueueWaitForMessageRestricted+0x2a>
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095a0:	b25b      	sxtb	r3, r3
 80095a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095a6:	d103      	bne.n	80095b0 <vQueueWaitForMessageRestricted+0x40>
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095b0:	f001 fbb8 	bl	800ad24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d106      	bne.n	80095ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	3324      	adds	r3, #36	; 0x24
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	68b9      	ldr	r1, [r7, #8]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 fc3b 	bl	8009e40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f7ff ff26 	bl	800941c <prvUnlockQueue>
	}
 80095d0:	bf00      	nop
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08e      	sub	sp, #56	; 0x38
 80095dc:	af04      	add	r7, sp, #16
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <xTaskCreateStatic+0x2a>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	623b      	str	r3, [r7, #32]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10a      	bne.n	800961e <xTaskCreateStatic+0x46>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	61fb      	str	r3, [r7, #28]
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800961e:	235c      	movs	r3, #92	; 0x5c
 8009620:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b5c      	cmp	r3, #92	; 0x5c
 8009626:	d00a      	beq.n	800963e <xTaskCreateStatic+0x66>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	61bb      	str	r3, [r7, #24]
}
 800963a:	bf00      	nop
 800963c:	e7fe      	b.n	800963c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800963e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	2b00      	cmp	r3, #0
 8009644:	d01e      	beq.n	8009684 <xTaskCreateStatic+0xac>
 8009646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009648:	2b00      	cmp	r3, #0
 800964a:	d01b      	beq.n	8009684 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009654:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	2202      	movs	r2, #2
 800965a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800965e:	2300      	movs	r3, #0
 8009660:	9303      	str	r3, [sp, #12]
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	9302      	str	r3, [sp, #8]
 8009666:	f107 0314 	add.w	r3, r7, #20
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f850 	bl	800971c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800967c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800967e:	f000 f8dd 	bl	800983c <prvAddNewTaskToReadyList>
 8009682:	e001      	b.n	8009688 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009688:	697b      	ldr	r3, [r7, #20]
	}
 800968a:	4618      	mov	r0, r3
 800968c:	3728      	adds	r7, #40	; 0x28
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009692:	b580      	push	{r7, lr}
 8009694:	b08c      	sub	sp, #48	; 0x30
 8009696:	af04      	add	r7, sp, #16
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	4613      	mov	r3, r2
 80096a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f001 fc2e 	bl	800af08 <pvPortMalloc>
 80096ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00e      	beq.n	80096d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096b4:	205c      	movs	r0, #92	; 0x5c
 80096b6:	f001 fc27 	bl	800af08 <pvPortMalloc>
 80096ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	631a      	str	r2, [r3, #48]	; 0x30
 80096c8:	e005      	b.n	80096d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096ca:	6978      	ldr	r0, [r7, #20]
 80096cc:	f001 fce8 	bl	800b0a0 <vPortFree>
 80096d0:	e001      	b.n	80096d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d017      	beq.n	800970c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096e4:	88fa      	ldrh	r2, [r7, #6]
 80096e6:	2300      	movs	r3, #0
 80096e8:	9303      	str	r3, [sp, #12]
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f80e 	bl	800971c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009700:	69f8      	ldr	r0, [r7, #28]
 8009702:	f000 f89b 	bl	800983c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009706:	2301      	movs	r3, #1
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	e002      	b.n	8009712 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800970c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009710:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009712:	69bb      	ldr	r3, [r7, #24]
	}
 8009714:	4618      	mov	r0, r3
 8009716:	3720      	adds	r7, #32
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b088      	sub	sp, #32
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	461a      	mov	r2, r3
 8009734:	21a5      	movs	r1, #165	; 0xa5
 8009736:	f002 f83b 	bl	800b7b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009744:	3b01      	subs	r3, #1
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	f023 0307 	bic.w	r3, r3, #7
 8009752:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <prvInitialiseNewTask+0x58>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	617b      	str	r3, [r7, #20]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d01f      	beq.n	80097ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800977a:	2300      	movs	r3, #0
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	e012      	b.n	80097a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	4413      	add	r3, r2
 8009786:	7819      	ldrb	r1, [r3, #0]
 8009788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	4413      	add	r3, r2
 800978e:	3334      	adds	r3, #52	; 0x34
 8009790:	460a      	mov	r2, r1
 8009792:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	4413      	add	r3, r2
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d006      	beq.n	80097ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	3301      	adds	r3, #1
 80097a4:	61fb      	str	r3, [r7, #28]
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	2b0f      	cmp	r3, #15
 80097aa:	d9e9      	bls.n	8009780 <prvInitialiseNewTask+0x64>
 80097ac:	e000      	b.n	80097b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80097ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097b8:	e003      	b.n	80097c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	2b37      	cmp	r3, #55	; 0x37
 80097c6:	d901      	bls.n	80097cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097c8:	2337      	movs	r3, #55	; 0x37
 80097ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	2200      	movs	r2, #0
 80097dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	3304      	adds	r3, #4
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff f978 	bl	8008ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	3318      	adds	r3, #24
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7ff f973 	bl	8008ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	2200      	movs	r2, #0
 800980c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	68f9      	ldr	r1, [r7, #12]
 800981a:	69b8      	ldr	r0, [r7, #24]
 800981c:	f001 f928 	bl	800aa70 <pxPortInitialiseStack>
 8009820:	4602      	mov	r2, r0
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009832:	bf00      	nop
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009844:	f001 fa3e 	bl	800acc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009848:	4b2d      	ldr	r3, [pc, #180]	; (8009900 <prvAddNewTaskToReadyList+0xc4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	4a2c      	ldr	r2, [pc, #176]	; (8009900 <prvAddNewTaskToReadyList+0xc4>)
 8009850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009852:	4b2c      	ldr	r3, [pc, #176]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d109      	bne.n	800986e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800985a:	4a2a      	ldr	r2, [pc, #168]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009860:	4b27      	ldr	r3, [pc, #156]	; (8009900 <prvAddNewTaskToReadyList+0xc4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d110      	bne.n	800988a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009868:	f000 fc16 	bl	800a098 <prvInitialiseTaskLists>
 800986c:	e00d      	b.n	800988a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800986e:	4b26      	ldr	r3, [pc, #152]	; (8009908 <prvAddNewTaskToReadyList+0xcc>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009876:	4b23      	ldr	r3, [pc, #140]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	429a      	cmp	r2, r3
 8009882:	d802      	bhi.n	800988a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009884:	4a1f      	ldr	r2, [pc, #124]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800988a:	4b20      	ldr	r3, [pc, #128]	; (800990c <prvAddNewTaskToReadyList+0xd0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3301      	adds	r3, #1
 8009890:	4a1e      	ldr	r2, [pc, #120]	; (800990c <prvAddNewTaskToReadyList+0xd0>)
 8009892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009894:	4b1d      	ldr	r3, [pc, #116]	; (800990c <prvAddNewTaskToReadyList+0xd0>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a0:	4b1b      	ldr	r3, [pc, #108]	; (8009910 <prvAddNewTaskToReadyList+0xd4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d903      	bls.n	80098b0 <prvAddNewTaskToReadyList+0x74>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	4a18      	ldr	r2, [pc, #96]	; (8009910 <prvAddNewTaskToReadyList+0xd4>)
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b4:	4613      	mov	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4a15      	ldr	r2, [pc, #84]	; (8009914 <prvAddNewTaskToReadyList+0xd8>)
 80098be:	441a      	add	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3304      	adds	r3, #4
 80098c4:	4619      	mov	r1, r3
 80098c6:	4610      	mov	r0, r2
 80098c8:	f7ff f913 	bl	8008af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098cc:	f001 fa2a 	bl	800ad24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098d0:	4b0d      	ldr	r3, [pc, #52]	; (8009908 <prvAddNewTaskToReadyList+0xcc>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00e      	beq.n	80098f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <prvAddNewTaskToReadyList+0xc8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d207      	bcs.n	80098f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <prvAddNewTaskToReadyList+0xdc>)
 80098e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000c70 	.word	0x20000c70
 8009904:	2000079c 	.word	0x2000079c
 8009908:	20000c7c 	.word	0x20000c7c
 800990c:	20000c8c 	.word	0x20000c8c
 8009910:	20000c78 	.word	0x20000c78
 8009914:	200007a0 	.word	0x200007a0
 8009918:	e000ed04 	.word	0xe000ed04

0800991c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d017      	beq.n	800995e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800992e:	4b13      	ldr	r3, [pc, #76]	; (800997c <vTaskDelay+0x60>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00a      	beq.n	800994c <vTaskDelay+0x30>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	60bb      	str	r3, [r7, #8]
}
 8009948:	bf00      	nop
 800994a:	e7fe      	b.n	800994a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800994c:	f000 f880 	bl	8009a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009950:	2100      	movs	r1, #0
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fcea 	bl	800a32c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009958:	f000 f888 	bl	8009a6c <xTaskResumeAll>
 800995c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d107      	bne.n	8009974 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009964:	4b06      	ldr	r3, [pc, #24]	; (8009980 <vTaskDelay+0x64>)
 8009966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000c98 	.word	0x20000c98
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08a      	sub	sp, #40	; 0x28
 8009988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009992:	463a      	mov	r2, r7
 8009994:	1d39      	adds	r1, r7, #4
 8009996:	f107 0308 	add.w	r3, r7, #8
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff f848 	bl	8008a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	9202      	str	r2, [sp, #8]
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	2300      	movs	r3, #0
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	2300      	movs	r3, #0
 80099b0:	460a      	mov	r2, r1
 80099b2:	4921      	ldr	r1, [pc, #132]	; (8009a38 <vTaskStartScheduler+0xb4>)
 80099b4:	4821      	ldr	r0, [pc, #132]	; (8009a3c <vTaskStartScheduler+0xb8>)
 80099b6:	f7ff fe0f 	bl	80095d8 <xTaskCreateStatic>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4a20      	ldr	r2, [pc, #128]	; (8009a40 <vTaskStartScheduler+0xbc>)
 80099be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099c0:	4b1f      	ldr	r3, [pc, #124]	; (8009a40 <vTaskStartScheduler+0xbc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e001      	b.n	80099d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d102      	bne.n	80099de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099d8:	f000 fcfc 	bl	800a3d4 <xTimerCreateTimerTask>
 80099dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d116      	bne.n	8009a12 <vTaskStartScheduler+0x8e>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	613b      	str	r3, [r7, #16]
}
 80099f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099f8:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <vTaskStartScheduler+0xc0>)
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a00:	4b11      	ldr	r3, [pc, #68]	; (8009a48 <vTaskStartScheduler+0xc4>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a06:	4b11      	ldr	r3, [pc, #68]	; (8009a4c <vTaskStartScheduler+0xc8>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a0c:	f001 f8b8 	bl	800ab80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a10:	e00e      	b.n	8009a30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a18:	d10a      	bne.n	8009a30 <vTaskStartScheduler+0xac>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	60fb      	str	r3, [r7, #12]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <vTaskStartScheduler+0xaa>
}
 8009a30:	bf00      	nop
 8009a32:	3718      	adds	r7, #24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	0800d9a4 	.word	0x0800d9a4
 8009a3c:	0800a069 	.word	0x0800a069
 8009a40:	20000c94 	.word	0x20000c94
 8009a44:	20000c90 	.word	0x20000c90
 8009a48:	20000c7c 	.word	0x20000c7c
 8009a4c:	20000c74 	.word	0x20000c74

08009a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a50:	b480      	push	{r7}
 8009a52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a54:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <vTaskSuspendAll+0x18>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	4a03      	ldr	r2, [pc, #12]	; (8009a68 <vTaskSuspendAll+0x18>)
 8009a5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a5e:	bf00      	nop
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	20000c98 	.word	0x20000c98

08009a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a7a:	4b42      	ldr	r3, [pc, #264]	; (8009b84 <xTaskResumeAll+0x118>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	603b      	str	r3, [r7, #0]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a98:	f001 f914 	bl	800acc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a9c:	4b39      	ldr	r3, [pc, #228]	; (8009b84 <xTaskResumeAll+0x118>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	4a38      	ldr	r2, [pc, #224]	; (8009b84 <xTaskResumeAll+0x118>)
 8009aa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa6:	4b37      	ldr	r3, [pc, #220]	; (8009b84 <xTaskResumeAll+0x118>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d162      	bne.n	8009b74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aae:	4b36      	ldr	r3, [pc, #216]	; (8009b88 <xTaskResumeAll+0x11c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d05e      	beq.n	8009b74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ab6:	e02f      	b.n	8009b18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab8:	4b34      	ldr	r3, [pc, #208]	; (8009b8c <xTaskResumeAll+0x120>)
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3318      	adds	r3, #24
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff f871 	bl	8008bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff f86c 	bl	8008bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad8:	4b2d      	ldr	r3, [pc, #180]	; (8009b90 <xTaskResumeAll+0x124>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d903      	bls.n	8009ae8 <xTaskResumeAll+0x7c>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	4a2a      	ldr	r2, [pc, #168]	; (8009b90 <xTaskResumeAll+0x124>)
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4a27      	ldr	r2, [pc, #156]	; (8009b94 <xTaskResumeAll+0x128>)
 8009af6:	441a      	add	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f7fe fff7 	bl	8008af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b08:	4b23      	ldr	r3, [pc, #140]	; (8009b98 <xTaskResumeAll+0x12c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d302      	bcc.n	8009b18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b12:	4b22      	ldr	r3, [pc, #136]	; (8009b9c <xTaskResumeAll+0x130>)
 8009b14:	2201      	movs	r2, #1
 8009b16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b18:	4b1c      	ldr	r3, [pc, #112]	; (8009b8c <xTaskResumeAll+0x120>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1cb      	bne.n	8009ab8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b26:	f000 fb55 	bl	800a1d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ba0 <xTaskResumeAll+0x134>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d010      	beq.n	8009b58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b36:	f000 f847 	bl	8009bc8 <xTaskIncrementTick>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b40:	4b16      	ldr	r3, [pc, #88]	; (8009b9c <xTaskResumeAll+0x130>)
 8009b42:	2201      	movs	r2, #1
 8009b44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1f1      	bne.n	8009b36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b52:	4b13      	ldr	r3, [pc, #76]	; (8009ba0 <xTaskResumeAll+0x134>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b58:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <xTaskResumeAll+0x130>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d009      	beq.n	8009b74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b60:	2301      	movs	r3, #1
 8009b62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b64:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <xTaskResumeAll+0x138>)
 8009b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b74:	f001 f8d6 	bl	800ad24 <vPortExitCritical>

	return xAlreadyYielded;
 8009b78:	68bb      	ldr	r3, [r7, #8]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000c98 	.word	0x20000c98
 8009b88:	20000c70 	.word	0x20000c70
 8009b8c:	20000c30 	.word	0x20000c30
 8009b90:	20000c78 	.word	0x20000c78
 8009b94:	200007a0 	.word	0x200007a0
 8009b98:	2000079c 	.word	0x2000079c
 8009b9c:	20000c84 	.word	0x20000c84
 8009ba0:	20000c80 	.word	0x20000c80
 8009ba4:	e000ed04 	.word	0xe000ed04

08009ba8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <xTaskGetTickCount+0x1c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bb4:	687b      	ldr	r3, [r7, #4]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000c74 	.word	0x20000c74

08009bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bd2:	4b4f      	ldr	r3, [pc, #316]	; (8009d10 <xTaskIncrementTick+0x148>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 808f 	bne.w	8009cfa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bdc:	4b4d      	ldr	r3, [pc, #308]	; (8009d14 <xTaskIncrementTick+0x14c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3301      	adds	r3, #1
 8009be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009be4:	4a4b      	ldr	r2, [pc, #300]	; (8009d14 <xTaskIncrementTick+0x14c>)
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d120      	bne.n	8009c32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bf0:	4b49      	ldr	r3, [pc, #292]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <xTaskIncrementTick+0x48>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	603b      	str	r3, [r7, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <xTaskIncrementTick+0x46>
 8009c10:	4b41      	ldr	r3, [pc, #260]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	4b41      	ldr	r3, [pc, #260]	; (8009d1c <xTaskIncrementTick+0x154>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a3f      	ldr	r2, [pc, #252]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	4a3f      	ldr	r2, [pc, #252]	; (8009d1c <xTaskIncrementTick+0x154>)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	4b3e      	ldr	r3, [pc, #248]	; (8009d20 <xTaskIncrementTick+0x158>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	4a3d      	ldr	r2, [pc, #244]	; (8009d20 <xTaskIncrementTick+0x158>)
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	f000 fad1 	bl	800a1d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c32:	4b3c      	ldr	r3, [pc, #240]	; (8009d24 <xTaskIncrementTick+0x15c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d349      	bcc.n	8009cd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c3c:	4b36      	ldr	r3, [pc, #216]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d104      	bne.n	8009c50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c46:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <xTaskIncrementTick+0x15c>)
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c4c:	601a      	str	r2, [r3, #0]
					break;
 8009c4e:	e03f      	b.n	8009cd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c50:	4b31      	ldr	r3, [pc, #196]	; (8009d18 <xTaskIncrementTick+0x150>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d203      	bcs.n	8009c70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c68:	4a2e      	ldr	r2, [pc, #184]	; (8009d24 <xTaskIncrementTick+0x15c>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c6e:	e02f      	b.n	8009cd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe ff99 	bl	8008bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d004      	beq.n	8009c8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	3318      	adds	r3, #24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe ff90 	bl	8008bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c90:	4b25      	ldr	r3, [pc, #148]	; (8009d28 <xTaskIncrementTick+0x160>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d903      	bls.n	8009ca0 <xTaskIncrementTick+0xd8>
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	4a22      	ldr	r2, [pc, #136]	; (8009d28 <xTaskIncrementTick+0x160>)
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4a1f      	ldr	r2, [pc, #124]	; (8009d2c <xTaskIncrementTick+0x164>)
 8009cae:	441a      	add	r2, r3
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	f7fe ff1b 	bl	8008af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <xTaskIncrementTick+0x168>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d3b8      	bcc.n	8009c3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cce:	e7b5      	b.n	8009c3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cd0:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <xTaskIncrementTick+0x168>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd6:	4915      	ldr	r1, [pc, #84]	; (8009d2c <xTaskIncrementTick+0x164>)
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d901      	bls.n	8009cec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cec:	4b11      	ldr	r3, [pc, #68]	; (8009d34 <xTaskIncrementTick+0x16c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d007      	beq.n	8009d04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	e004      	b.n	8009d04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cfa:	4b0f      	ldr	r3, [pc, #60]	; (8009d38 <xTaskIncrementTick+0x170>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	4a0d      	ldr	r2, [pc, #52]	; (8009d38 <xTaskIncrementTick+0x170>)
 8009d02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d04:	697b      	ldr	r3, [r7, #20]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000c98 	.word	0x20000c98
 8009d14:	20000c74 	.word	0x20000c74
 8009d18:	20000c28 	.word	0x20000c28
 8009d1c:	20000c2c 	.word	0x20000c2c
 8009d20:	20000c88 	.word	0x20000c88
 8009d24:	20000c90 	.word	0x20000c90
 8009d28:	20000c78 	.word	0x20000c78
 8009d2c:	200007a0 	.word	0x200007a0
 8009d30:	2000079c 	.word	0x2000079c
 8009d34:	20000c84 	.word	0x20000c84
 8009d38:	20000c80 	.word	0x20000c80

08009d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d42:	4b28      	ldr	r3, [pc, #160]	; (8009de4 <vTaskSwitchContext+0xa8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d4a:	4b27      	ldr	r3, [pc, #156]	; (8009de8 <vTaskSwitchContext+0xac>)
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d50:	e041      	b.n	8009dd6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009d52:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <vTaskSwitchContext+0xac>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d58:	4b24      	ldr	r3, [pc, #144]	; (8009dec <vTaskSwitchContext+0xb0>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	e010      	b.n	8009d82 <vTaskSwitchContext+0x46>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <vTaskSwitchContext+0x40>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	607b      	str	r3, [r7, #4]
}
 8009d78:	bf00      	nop
 8009d7a:	e7fe      	b.n	8009d7a <vTaskSwitchContext+0x3e>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	491b      	ldr	r1, [pc, #108]	; (8009df0 <vTaskSwitchContext+0xb4>)
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0e4      	beq.n	8009d60 <vTaskSwitchContext+0x24>
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4a13      	ldr	r2, [pc, #76]	; (8009df0 <vTaskSwitchContext+0xb4>)
 8009da2:	4413      	add	r3, r2
 8009da4:	60bb      	str	r3, [r7, #8]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	605a      	str	r2, [r3, #4]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	3308      	adds	r3, #8
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d104      	bne.n	8009dc6 <vTaskSwitchContext+0x8a>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	605a      	str	r2, [r3, #4]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	4a09      	ldr	r2, [pc, #36]	; (8009df4 <vTaskSwitchContext+0xb8>)
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	4a06      	ldr	r2, [pc, #24]	; (8009dec <vTaskSwitchContext+0xb0>)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6013      	str	r3, [r2, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20000c98 	.word	0x20000c98
 8009de8:	20000c84 	.word	0x20000c84
 8009dec:	20000c78 	.word	0x20000c78
 8009df0:	200007a0 	.word	0x200007a0
 8009df4:	2000079c 	.word	0x2000079c

08009df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	60fb      	str	r3, [r7, #12]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e1e:	4b07      	ldr	r3, [pc, #28]	; (8009e3c <vTaskPlaceOnEventList+0x44>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3318      	adds	r3, #24
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7fe fe87 	bl	8008b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	6838      	ldr	r0, [r7, #0]
 8009e30:	f000 fa7c 	bl	800a32c <prvAddCurrentTaskToDelayedList>
}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	2000079c 	.word	0x2000079c

08009e40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	617b      	str	r3, [r7, #20]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e68:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3318      	adds	r3, #24
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7fe fe3e 	bl	8008af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	68b8      	ldr	r0, [r7, #8]
 8009e86:	f000 fa51 	bl	800a32c <prvAddCurrentTaskToDelayedList>
	}
 8009e8a:	bf00      	nop
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	2000079c 	.word	0x2000079c

08009e98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	60fb      	str	r3, [r7, #12]
}
 8009ec0:	bf00      	nop
 8009ec2:	e7fe      	b.n	8009ec2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	3318      	adds	r3, #24
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fe fe6f 	bl	8008bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ece:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <xTaskRemoveFromEventList+0xb0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d11d      	bne.n	8009f12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe fe66 	bl	8008bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee4:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <xTaskRemoveFromEventList+0xb4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d903      	bls.n	8009ef4 <xTaskRemoveFromEventList+0x5c>
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef0:	4a16      	ldr	r2, [pc, #88]	; (8009f4c <xTaskRemoveFromEventList+0xb4>)
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4a13      	ldr	r2, [pc, #76]	; (8009f50 <xTaskRemoveFromEventList+0xb8>)
 8009f02:	441a      	add	r2, r3
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	f7fe fdf1 	bl	8008af2 <vListInsertEnd>
 8009f10:	e005      	b.n	8009f1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	3318      	adds	r3, #24
 8009f16:	4619      	mov	r1, r3
 8009f18:	480e      	ldr	r0, [pc, #56]	; (8009f54 <xTaskRemoveFromEventList+0xbc>)
 8009f1a:	f7fe fdea 	bl	8008af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f22:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <xTaskRemoveFromEventList+0xc0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d905      	bls.n	8009f38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f30:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <xTaskRemoveFromEventList+0xc4>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e001      	b.n	8009f3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f3c:	697b      	ldr	r3, [r7, #20]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20000c98 	.word	0x20000c98
 8009f4c:	20000c78 	.word	0x20000c78
 8009f50:	200007a0 	.word	0x200007a0
 8009f54:	20000c30 	.word	0x20000c30
 8009f58:	2000079c 	.word	0x2000079c
 8009f5c:	20000c84 	.word	0x20000c84

08009f60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f68:	4b06      	ldr	r3, [pc, #24]	; (8009f84 <vTaskInternalSetTimeOutState+0x24>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f70:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <vTaskInternalSetTimeOutState+0x28>)
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	605a      	str	r2, [r3, #4]
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	20000c88 	.word	0x20000c88
 8009f88:	20000c74 	.word	0x20000c74

08009f8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	613b      	str	r3, [r7, #16]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10a      	bne.n	8009fce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	60fb      	str	r3, [r7, #12]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009fce:	f000 fe79 	bl	800acc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fd2:	4b1d      	ldr	r3, [pc, #116]	; (800a048 <xTaskCheckForTimeOut+0xbc>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fea:	d102      	bne.n	8009ff2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
 8009ff0:	e023      	b.n	800a03a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4b15      	ldr	r3, [pc, #84]	; (800a04c <xTaskCheckForTimeOut+0xc0>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d007      	beq.n	800a00e <xTaskCheckForTimeOut+0x82>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	429a      	cmp	r2, r3
 800a006:	d302      	bcc.n	800a00e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a008:	2301      	movs	r3, #1
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	e015      	b.n	800a03a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	429a      	cmp	r2, r3
 800a016:	d20b      	bcs.n	800a030 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff ff9b 	bl	8009f60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a02a:	2300      	movs	r3, #0
 800a02c:	61fb      	str	r3, [r7, #28]
 800a02e:	e004      	b.n	800a03a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a036:	2301      	movs	r3, #1
 800a038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a03a:	f000 fe73 	bl	800ad24 <vPortExitCritical>

	return xReturn;
 800a03e:	69fb      	ldr	r3, [r7, #28]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3720      	adds	r7, #32
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20000c74 	.word	0x20000c74
 800a04c:	20000c88 	.word	0x20000c88

0800a050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a054:	4b03      	ldr	r3, [pc, #12]	; (800a064 <vTaskMissedYield+0x14>)
 800a056:	2201      	movs	r2, #1
 800a058:	601a      	str	r2, [r3, #0]
}
 800a05a:	bf00      	nop
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	20000c84 	.word	0x20000c84

0800a068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a070:	f000 f852 	bl	800a118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a074:	4b06      	ldr	r3, [pc, #24]	; (800a090 <prvIdleTask+0x28>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d9f9      	bls.n	800a070 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <prvIdleTask+0x2c>)
 800a07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a08c:	e7f0      	b.n	800a070 <prvIdleTask+0x8>
 800a08e:	bf00      	nop
 800a090:	200007a0 	.word	0x200007a0
 800a094:	e000ed04 	.word	0xe000ed04

0800a098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a09e:	2300      	movs	r3, #0
 800a0a0:	607b      	str	r3, [r7, #4]
 800a0a2:	e00c      	b.n	800a0be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4a12      	ldr	r2, [pc, #72]	; (800a0f8 <prvInitialiseTaskLists+0x60>)
 800a0b0:	4413      	add	r3, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fcf0 	bl	8008a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	607b      	str	r3, [r7, #4]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b37      	cmp	r3, #55	; 0x37
 800a0c2:	d9ef      	bls.n	800a0a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0c4:	480d      	ldr	r0, [pc, #52]	; (800a0fc <prvInitialiseTaskLists+0x64>)
 800a0c6:	f7fe fce7 	bl	8008a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0ca:	480d      	ldr	r0, [pc, #52]	; (800a100 <prvInitialiseTaskLists+0x68>)
 800a0cc:	f7fe fce4 	bl	8008a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0d0:	480c      	ldr	r0, [pc, #48]	; (800a104 <prvInitialiseTaskLists+0x6c>)
 800a0d2:	f7fe fce1 	bl	8008a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0d6:	480c      	ldr	r0, [pc, #48]	; (800a108 <prvInitialiseTaskLists+0x70>)
 800a0d8:	f7fe fcde 	bl	8008a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0dc:	480b      	ldr	r0, [pc, #44]	; (800a10c <prvInitialiseTaskLists+0x74>)
 800a0de:	f7fe fcdb 	bl	8008a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0e2:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <prvInitialiseTaskLists+0x78>)
 800a0e4:	4a05      	ldr	r2, [pc, #20]	; (800a0fc <prvInitialiseTaskLists+0x64>)
 800a0e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0e8:	4b0a      	ldr	r3, [pc, #40]	; (800a114 <prvInitialiseTaskLists+0x7c>)
 800a0ea:	4a05      	ldr	r2, [pc, #20]	; (800a100 <prvInitialiseTaskLists+0x68>)
 800a0ec:	601a      	str	r2, [r3, #0]
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	200007a0 	.word	0x200007a0
 800a0fc:	20000c00 	.word	0x20000c00
 800a100:	20000c14 	.word	0x20000c14
 800a104:	20000c30 	.word	0x20000c30
 800a108:	20000c44 	.word	0x20000c44
 800a10c:	20000c5c 	.word	0x20000c5c
 800a110:	20000c28 	.word	0x20000c28
 800a114:	20000c2c 	.word	0x20000c2c

0800a118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a11e:	e019      	b.n	800a154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a120:	f000 fdd0 	bl	800acc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a124:	4b10      	ldr	r3, [pc, #64]	; (800a168 <prvCheckTasksWaitingTermination+0x50>)
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3304      	adds	r3, #4
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe fd3b 	bl	8008bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a136:	4b0d      	ldr	r3, [pc, #52]	; (800a16c <prvCheckTasksWaitingTermination+0x54>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	4a0b      	ldr	r2, [pc, #44]	; (800a16c <prvCheckTasksWaitingTermination+0x54>)
 800a13e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a140:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <prvCheckTasksWaitingTermination+0x58>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3b01      	subs	r3, #1
 800a146:	4a0a      	ldr	r2, [pc, #40]	; (800a170 <prvCheckTasksWaitingTermination+0x58>)
 800a148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a14a:	f000 fdeb 	bl	800ad24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f810 	bl	800a174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <prvCheckTasksWaitingTermination+0x58>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e1      	bne.n	800a120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20000c44 	.word	0x20000c44
 800a16c:	20000c70 	.word	0x20000c70
 800a170:	20000c58 	.word	0x20000c58

0800a174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a182:	2b00      	cmp	r3, #0
 800a184:	d108      	bne.n	800a198 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 ff88 	bl	800b0a0 <vPortFree>
				vPortFree( pxTCB );
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 ff85 	bl	800b0a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a196:	e018      	b.n	800a1ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d103      	bne.n	800a1aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 ff7c 	bl	800b0a0 <vPortFree>
	}
 800a1a8:	e00f      	b.n	800a1ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d00a      	beq.n	800a1ca <prvDeleteTCB+0x56>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	60fb      	str	r3, [r7, #12]
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <prvDeleteTCB+0x54>
	}
 800a1ca:	bf00      	nop
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1da:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <prvResetNextTaskUnblockTime+0x38>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d104      	bne.n	800a1ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1e4:	4b0a      	ldr	r3, [pc, #40]	; (800a210 <prvResetNextTaskUnblockTime+0x3c>)
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1ec:	e008      	b.n	800a200 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ee:	4b07      	ldr	r3, [pc, #28]	; (800a20c <prvResetNextTaskUnblockTime+0x38>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	4a04      	ldr	r2, [pc, #16]	; (800a210 <prvResetNextTaskUnblockTime+0x3c>)
 800a1fe:	6013      	str	r3, [r2, #0]
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000c28 	.word	0x20000c28
 800a210:	20000c90 	.word	0x20000c90

0800a214 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a21a:	4b0b      	ldr	r3, [pc, #44]	; (800a248 <xTaskGetSchedulerState+0x34>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a222:	2301      	movs	r3, #1
 800a224:	607b      	str	r3, [r7, #4]
 800a226:	e008      	b.n	800a23a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a228:	4b08      	ldr	r3, [pc, #32]	; (800a24c <xTaskGetSchedulerState+0x38>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d102      	bne.n	800a236 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a230:	2302      	movs	r3, #2
 800a232:	607b      	str	r3, [r7, #4]
 800a234:	e001      	b.n	800a23a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a236:	2300      	movs	r3, #0
 800a238:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a23a:	687b      	ldr	r3, [r7, #4]
	}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000c7c 	.word	0x20000c7c
 800a24c:	20000c98 	.word	0x20000c98

0800a250 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a25c:	2300      	movs	r3, #0
 800a25e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d056      	beq.n	800a314 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a266:	4b2e      	ldr	r3, [pc, #184]	; (800a320 <xTaskPriorityDisinherit+0xd0>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d00a      	beq.n	800a286 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	60fb      	str	r3, [r7, #12]
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10a      	bne.n	800a2a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	60bb      	str	r3, [r7, #8]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a8:	1e5a      	subs	r2, r3, #1
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d02c      	beq.n	800a314 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d128      	bne.n	800a314 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe fc70 	bl	8008bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <xTaskPriorityDisinherit+0xd4>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d903      	bls.n	800a2f4 <xTaskPriorityDisinherit+0xa4>
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f0:	4a0c      	ldr	r2, [pc, #48]	; (800a324 <xTaskPriorityDisinherit+0xd4>)
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4a09      	ldr	r2, [pc, #36]	; (800a328 <xTaskPriorityDisinherit+0xd8>)
 800a302:	441a      	add	r2, r3
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	3304      	adds	r3, #4
 800a308:	4619      	mov	r1, r3
 800a30a:	4610      	mov	r0, r2
 800a30c:	f7fe fbf1 	bl	8008af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a310:	2301      	movs	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a314:	697b      	ldr	r3, [r7, #20]
	}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	2000079c 	.word	0x2000079c
 800a324:	20000c78 	.word	0x20000c78
 800a328:	200007a0 	.word	0x200007a0

0800a32c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a336:	4b21      	ldr	r3, [pc, #132]	; (800a3bc <prvAddCurrentTaskToDelayedList+0x90>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a33c:	4b20      	ldr	r3, [pc, #128]	; (800a3c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3304      	adds	r3, #4
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe fc32 	bl	8008bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a34e:	d10a      	bne.n	800a366 <prvAddCurrentTaskToDelayedList+0x3a>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d007      	beq.n	800a366 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a356:	4b1a      	ldr	r3, [pc, #104]	; (800a3c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4619      	mov	r1, r3
 800a35e:	4819      	ldr	r0, [pc, #100]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a360:	f7fe fbc7 	bl	8008af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a364:	e026      	b.n	800a3b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4413      	add	r3, r2
 800a36c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a36e:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d209      	bcs.n	800a392 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a37e:	4b12      	ldr	r3, [pc, #72]	; (800a3c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3304      	adds	r3, #4
 800a388:	4619      	mov	r1, r3
 800a38a:	4610      	mov	r0, r2
 800a38c:	f7fe fbd5 	bl	8008b3a <vListInsert>
}
 800a390:	e010      	b.n	800a3b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a392:	4b0e      	ldr	r3, [pc, #56]	; (800a3cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3304      	adds	r3, #4
 800a39c:	4619      	mov	r1, r3
 800a39e:	4610      	mov	r0, r2
 800a3a0:	f7fe fbcb 	bl	8008b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d202      	bcs.n	800a3b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3ae:	4a08      	ldr	r2, [pc, #32]	; (800a3d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	6013      	str	r3, [r2, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	20000c74 	.word	0x20000c74
 800a3c0:	2000079c 	.word	0x2000079c
 800a3c4:	20000c5c 	.word	0x20000c5c
 800a3c8:	20000c2c 	.word	0x20000c2c
 800a3cc:	20000c28 	.word	0x20000c28
 800a3d0:	20000c90 	.word	0x20000c90

0800a3d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b08a      	sub	sp, #40	; 0x28
 800a3d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3de:	f000 fb07 	bl	800a9f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3e2:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <xTimerCreateTimerTask+0x80>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d021      	beq.n	800a42e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3f2:	1d3a      	adds	r2, r7, #4
 800a3f4:	f107 0108 	add.w	r1, r7, #8
 800a3f8:	f107 030c 	add.w	r3, r7, #12
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fe fb31 	bl	8008a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	9202      	str	r2, [sp, #8]
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	2302      	movs	r3, #2
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	2300      	movs	r3, #0
 800a412:	460a      	mov	r2, r1
 800a414:	4910      	ldr	r1, [pc, #64]	; (800a458 <xTimerCreateTimerTask+0x84>)
 800a416:	4811      	ldr	r0, [pc, #68]	; (800a45c <xTimerCreateTimerTask+0x88>)
 800a418:	f7ff f8de 	bl	80095d8 <xTaskCreateStatic>
 800a41c:	4603      	mov	r3, r0
 800a41e:	4a10      	ldr	r2, [pc, #64]	; (800a460 <xTimerCreateTimerTask+0x8c>)
 800a420:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a422:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <xTimerCreateTimerTask+0x8c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a42a:	2301      	movs	r3, #1
 800a42c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	613b      	str	r3, [r7, #16]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a44a:	697b      	ldr	r3, [r7, #20]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20000ccc 	.word	0x20000ccc
 800a458:	0800d9ac 	.word	0x0800d9ac
 800a45c:	0800a599 	.word	0x0800a599
 800a460:	20000cd0 	.word	0x20000cd0

0800a464 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08a      	sub	sp, #40	; 0x28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a472:	2300      	movs	r3, #0
 800a474:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10a      	bne.n	800a492 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	623b      	str	r3, [r7, #32]
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a492:	4b1a      	ldr	r3, [pc, #104]	; (800a4fc <xTimerGenericCommand+0x98>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d02a      	beq.n	800a4f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2b05      	cmp	r3, #5
 800a4aa:	dc18      	bgt.n	800a4de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4ac:	f7ff feb2 	bl	800a214 <xTaskGetSchedulerState>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d109      	bne.n	800a4ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4b6:	4b11      	ldr	r3, [pc, #68]	; (800a4fc <xTimerGenericCommand+0x98>)
 800a4b8:	6818      	ldr	r0, [r3, #0]
 800a4ba:	f107 0110 	add.w	r1, r7, #16
 800a4be:	2300      	movs	r3, #0
 800a4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4c2:	f7fe fca1 	bl	8008e08 <xQueueGenericSend>
 800a4c6:	6278      	str	r0, [r7, #36]	; 0x24
 800a4c8:	e012      	b.n	800a4f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4ca:	4b0c      	ldr	r3, [pc, #48]	; (800a4fc <xTimerGenericCommand+0x98>)
 800a4cc:	6818      	ldr	r0, [r3, #0]
 800a4ce:	f107 0110 	add.w	r1, r7, #16
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f7fe fc97 	bl	8008e08 <xQueueGenericSend>
 800a4da:	6278      	str	r0, [r7, #36]	; 0x24
 800a4dc:	e008      	b.n	800a4f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a4de:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <xTimerGenericCommand+0x98>)
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	f107 0110 	add.w	r1, r7, #16
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	f7fe fd8b 	bl	8009004 <xQueueGenericSendFromISR>
 800a4ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3728      	adds	r7, #40	; 0x28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20000ccc 	.word	0x20000ccc

0800a500 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b088      	sub	sp, #32
 800a504:	af02      	add	r7, sp, #8
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a50a:	4b22      	ldr	r3, [pc, #136]	; (800a594 <prvProcessExpiredTimer+0x94>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	3304      	adds	r3, #4
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe fb47 	bl	8008bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a524:	f003 0304 	and.w	r3, r3, #4
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d022      	beq.n	800a572 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	699a      	ldr	r2, [r3, #24]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	18d1      	adds	r1, r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	6978      	ldr	r0, [r7, #20]
 800a53a:	f000 f8d1 	bl	800a6e0 <prvInsertTimerInActiveList>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01f      	beq.n	800a584 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a544:	2300      	movs	r3, #0
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	2300      	movs	r3, #0
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	2100      	movs	r1, #0
 800a54e:	6978      	ldr	r0, [r7, #20]
 800a550:	f7ff ff88 	bl	800a464 <xTimerGenericCommand>
 800a554:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d113      	bne.n	800a584 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	60fb      	str	r3, [r7, #12]
}
 800a56e:	bf00      	nop
 800a570:	e7fe      	b.n	800a570 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a578:	f023 0301 	bic.w	r3, r3, #1
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	6978      	ldr	r0, [r7, #20]
 800a58a:	4798      	blx	r3
}
 800a58c:	bf00      	nop
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	20000cc4 	.word	0x20000cc4

0800a598 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5a0:	f107 0308 	add.w	r3, r7, #8
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 f857 	bl	800a658 <prvGetNextExpireTime>
 800a5aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 f803 	bl	800a5bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5b6:	f000 f8d5 	bl	800a764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5ba:	e7f1      	b.n	800a5a0 <prvTimerTask+0x8>

0800a5bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5c6:	f7ff fa43 	bl	8009a50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5ca:	f107 0308 	add.w	r3, r7, #8
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 f866 	bl	800a6a0 <prvSampleTimeNow>
 800a5d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d130      	bne.n	800a63e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10a      	bne.n	800a5f8 <prvProcessTimerOrBlockTask+0x3c>
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d806      	bhi.n	800a5f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a5ea:	f7ff fa3f 	bl	8009a6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a5ee:	68f9      	ldr	r1, [r7, #12]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff ff85 	bl	800a500 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a5f6:	e024      	b.n	800a642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d008      	beq.n	800a610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5fe:	4b13      	ldr	r3, [pc, #76]	; (800a64c <prvProcessTimerOrBlockTask+0x90>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <prvProcessTimerOrBlockTask+0x50>
 800a608:	2301      	movs	r3, #1
 800a60a:	e000      	b.n	800a60e <prvProcessTimerOrBlockTask+0x52>
 800a60c:	2300      	movs	r3, #0
 800a60e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a610:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <prvProcessTimerOrBlockTask+0x94>)
 800a612:	6818      	ldr	r0, [r3, #0]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	4619      	mov	r1, r3
 800a61e:	f7fe ffa7 	bl	8009570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a622:	f7ff fa23 	bl	8009a6c <xTaskResumeAll>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10a      	bne.n	800a642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a62c:	4b09      	ldr	r3, [pc, #36]	; (800a654 <prvProcessTimerOrBlockTask+0x98>)
 800a62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	f3bf 8f6f 	isb	sy
}
 800a63c:	e001      	b.n	800a642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a63e:	f7ff fa15 	bl	8009a6c <xTaskResumeAll>
}
 800a642:	bf00      	nop
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000cc8 	.word	0x20000cc8
 800a650:	20000ccc 	.word	0x20000ccc
 800a654:	e000ed04 	.word	0xe000ed04

0800a658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a660:	4b0e      	ldr	r3, [pc, #56]	; (800a69c <prvGetNextExpireTime+0x44>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <prvGetNextExpireTime+0x16>
 800a66a:	2201      	movs	r2, #1
 800a66c:	e000      	b.n	800a670 <prvGetNextExpireTime+0x18>
 800a66e:	2200      	movs	r2, #0
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d105      	bne.n	800a688 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a67c:	4b07      	ldr	r3, [pc, #28]	; (800a69c <prvGetNextExpireTime+0x44>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	e001      	b.n	800a68c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a68c:	68fb      	ldr	r3, [r7, #12]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	20000cc4 	.word	0x20000cc4

0800a6a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6a8:	f7ff fa7e 	bl	8009ba8 <xTaskGetTickCount>
 800a6ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <prvSampleTimeNow+0x3c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d205      	bcs.n	800a6c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6b8:	f000 f936 	bl	800a928 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	e002      	b.n	800a6ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6ca:	4a04      	ldr	r2, [pc, #16]	; (800a6dc <prvSampleTimeNow+0x3c>)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000cd4 	.word	0x20000cd4

0800a6e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	429a      	cmp	r2, r3
 800a704:	d812      	bhi.n	800a72c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	1ad2      	subs	r2, r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	429a      	cmp	r2, r3
 800a712:	d302      	bcc.n	800a71a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a714:	2301      	movs	r3, #1
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e01b      	b.n	800a752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a71a:	4b10      	ldr	r3, [pc, #64]	; (800a75c <prvInsertTimerInActiveList+0x7c>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3304      	adds	r3, #4
 800a722:	4619      	mov	r1, r3
 800a724:	4610      	mov	r0, r2
 800a726:	f7fe fa08 	bl	8008b3a <vListInsert>
 800a72a:	e012      	b.n	800a752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	429a      	cmp	r2, r3
 800a732:	d206      	bcs.n	800a742 <prvInsertTimerInActiveList+0x62>
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d302      	bcc.n	800a742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a73c:	2301      	movs	r3, #1
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	e007      	b.n	800a752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <prvInsertTimerInActiveList+0x80>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fe f9f4 	bl	8008b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a752:	697b      	ldr	r3, [r7, #20]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3718      	adds	r7, #24
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20000cc8 	.word	0x20000cc8
 800a760:	20000cc4 	.word	0x20000cc4

0800a764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08e      	sub	sp, #56	; 0x38
 800a768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a76a:	e0ca      	b.n	800a902 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da18      	bge.n	800a7a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a772:	1d3b      	adds	r3, r7, #4
 800a774:	3304      	adds	r3, #4
 800a776:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10a      	bne.n	800a794 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	61fb      	str	r3, [r7, #28]
}
 800a790:	bf00      	nop
 800a792:	e7fe      	b.n	800a792 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79a:	6850      	ldr	r0, [r2, #4]
 800a79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79e:	6892      	ldr	r2, [r2, #8]
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f2c0 80aa 	blt.w	800a900 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d004      	beq.n	800a7c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fe f9f5 	bl	8008bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff ff6b 	bl	800a6a0 <prvSampleTimeNow>
 800a7ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	f200 8097 	bhi.w	800a902 <prvProcessReceivedCommands+0x19e>
 800a7d4:	a201      	add	r2, pc, #4	; (adr r2, 800a7dc <prvProcessReceivedCommands+0x78>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a805 	.word	0x0800a805
 800a7e0:	0800a805 	.word	0x0800a805
 800a7e4:	0800a805 	.word	0x0800a805
 800a7e8:	0800a879 	.word	0x0800a879
 800a7ec:	0800a88d 	.word	0x0800a88d
 800a7f0:	0800a8d7 	.word	0x0800a8d7
 800a7f4:	0800a805 	.word	0x0800a805
 800a7f8:	0800a805 	.word	0x0800a805
 800a7fc:	0800a879 	.word	0x0800a879
 800a800:	0800a88d 	.word	0x0800a88d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a80a:	f043 0301 	orr.w	r3, r3, #1
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	18d1      	adds	r1, r2, r3
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a824:	f7ff ff5c 	bl	800a6e0 <prvInsertTimerInActiveList>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d069      	beq.n	800a902 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a834:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	2b00      	cmp	r3, #0
 800a842:	d05e      	beq.n	800a902 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	441a      	add	r2, r3
 800a84c:	2300      	movs	r3, #0
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	2300      	movs	r3, #0
 800a852:	2100      	movs	r1, #0
 800a854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a856:	f7ff fe05 	bl	800a464 <xTimerGenericCommand>
 800a85a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d14f      	bne.n	800a902 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	61bb      	str	r3, [r7, #24]
}
 800a874:	bf00      	nop
 800a876:	e7fe      	b.n	800a876 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a87e:	f023 0301 	bic.w	r3, r3, #1
 800a882:	b2da      	uxtb	r2, r3
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a88a:	e03a      	b.n	800a902 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a892:	f043 0301 	orr.w	r3, r3, #1
 800a896:	b2da      	uxtb	r2, r3
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	617b      	str	r3, [r7, #20]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	18d1      	adds	r1, r2, r3
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d0:	f7ff ff06 	bl	800a6e0 <prvInsertTimerInActiveList>
					break;
 800a8d4:	e015      	b.n	800a902 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d103      	bne.n	800a8ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a8e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e6:	f000 fbdb 	bl	800b0a0 <vPortFree>
 800a8ea:	e00a      	b.n	800a902 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8f2:	f023 0301 	bic.w	r3, r3, #1
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8fe:	e000      	b.n	800a902 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a900:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a902:	4b08      	ldr	r3, [pc, #32]	; (800a924 <prvProcessReceivedCommands+0x1c0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	1d39      	adds	r1, r7, #4
 800a908:	2200      	movs	r2, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fc16 	bl	800913c <xQueueReceive>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	f47f af2a 	bne.w	800a76c <prvProcessReceivedCommands+0x8>
	}
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	3730      	adds	r7, #48	; 0x30
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000ccc 	.word	0x20000ccc

0800a928 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a92e:	e048      	b.n	800a9c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a930:	4b2d      	ldr	r3, [pc, #180]	; (800a9e8 <prvSwitchTimerLists+0xc0>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93a:	4b2b      	ldr	r3, [pc, #172]	; (800a9e8 <prvSwitchTimerLists+0xc0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3304      	adds	r3, #4
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe f92f 	bl	8008bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	d02e      	beq.n	800a9c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	4413      	add	r3, r2
 800a96c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	429a      	cmp	r2, r3
 800a974:	d90e      	bls.n	800a994 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a982:	4b19      	ldr	r3, [pc, #100]	; (800a9e8 <prvSwitchTimerLists+0xc0>)
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3304      	adds	r3, #4
 800a98a:	4619      	mov	r1, r3
 800a98c:	4610      	mov	r0, r2
 800a98e:	f7fe f8d4 	bl	8008b3a <vListInsert>
 800a992:	e016      	b.n	800a9c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a994:	2300      	movs	r3, #0
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	2300      	movs	r3, #0
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	2100      	movs	r1, #0
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f7ff fd60 	bl	800a464 <xTimerGenericCommand>
 800a9a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	603b      	str	r3, [r7, #0]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9c2:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <prvSwitchTimerLists+0xc0>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1b1      	bne.n	800a930 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9cc:	4b06      	ldr	r3, [pc, #24]	; (800a9e8 <prvSwitchTimerLists+0xc0>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9d2:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <prvSwitchTimerLists+0xc4>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a04      	ldr	r2, [pc, #16]	; (800a9e8 <prvSwitchTimerLists+0xc0>)
 800a9d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9da:	4a04      	ldr	r2, [pc, #16]	; (800a9ec <prvSwitchTimerLists+0xc4>)
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	6013      	str	r3, [r2, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	3718      	adds	r7, #24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	20000cc4 	.word	0x20000cc4
 800a9ec:	20000cc8 	.word	0x20000cc8

0800a9f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9f6:	f000 f965 	bl	800acc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <prvCheckForValidListAndQueue+0x60>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d120      	bne.n	800aa44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa02:	4814      	ldr	r0, [pc, #80]	; (800aa54 <prvCheckForValidListAndQueue+0x64>)
 800aa04:	f7fe f848 	bl	8008a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa08:	4813      	ldr	r0, [pc, #76]	; (800aa58 <prvCheckForValidListAndQueue+0x68>)
 800aa0a:	f7fe f845 	bl	8008a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa0e:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <prvCheckForValidListAndQueue+0x6c>)
 800aa10:	4a10      	ldr	r2, [pc, #64]	; (800aa54 <prvCheckForValidListAndQueue+0x64>)
 800aa12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa14:	4b12      	ldr	r3, [pc, #72]	; (800aa60 <prvCheckForValidListAndQueue+0x70>)
 800aa16:	4a10      	ldr	r2, [pc, #64]	; (800aa58 <prvCheckForValidListAndQueue+0x68>)
 800aa18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	4b11      	ldr	r3, [pc, #68]	; (800aa64 <prvCheckForValidListAndQueue+0x74>)
 800aa20:	4a11      	ldr	r2, [pc, #68]	; (800aa68 <prvCheckForValidListAndQueue+0x78>)
 800aa22:	2110      	movs	r1, #16
 800aa24:	200a      	movs	r0, #10
 800aa26:	f7fe f953 	bl	8008cd0 <xQueueGenericCreateStatic>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	4a08      	ldr	r2, [pc, #32]	; (800aa50 <prvCheckForValidListAndQueue+0x60>)
 800aa2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa30:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <prvCheckForValidListAndQueue+0x60>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <prvCheckForValidListAndQueue+0x60>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	490b      	ldr	r1, [pc, #44]	; (800aa6c <prvCheckForValidListAndQueue+0x7c>)
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fd6c 	bl	800951c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa44:	f000 f96e 	bl	800ad24 <vPortExitCritical>
}
 800aa48:	bf00      	nop
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000ccc 	.word	0x20000ccc
 800aa54:	20000c9c 	.word	0x20000c9c
 800aa58:	20000cb0 	.word	0x20000cb0
 800aa5c:	20000cc4 	.word	0x20000cc4
 800aa60:	20000cc8 	.word	0x20000cc8
 800aa64:	20000d78 	.word	0x20000d78
 800aa68:	20000cd8 	.word	0x20000cd8
 800aa6c:	0800d9b4 	.word	0x0800d9b4

0800aa70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3b04      	subs	r3, #4
 800aa80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3b04      	subs	r3, #4
 800aa8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	f023 0201 	bic.w	r2, r3, #1
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3b04      	subs	r3, #4
 800aa9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aaa0:	4a0c      	ldr	r2, [pc, #48]	; (800aad4 <pxPortInitialiseStack+0x64>)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3b14      	subs	r3, #20
 800aaaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	3b04      	subs	r3, #4
 800aab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f06f 0202 	mvn.w	r2, #2
 800aabe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3b20      	subs	r3, #32
 800aac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aac6:	68fb      	ldr	r3, [r7, #12]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	0800aad9 	.word	0x0800aad9

0800aad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <prvTaskExitError+0x54>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaea:	d00a      	beq.n	800ab02 <prvTaskExitError+0x2a>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60fb      	str	r3, [r7, #12]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <prvTaskExitError+0x28>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	60bb      	str	r3, [r7, #8]
}
 800ab14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab16:	bf00      	nop
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0fc      	beq.n	800ab18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	2000000c 	.word	0x2000000c

0800ab30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab30:	4b07      	ldr	r3, [pc, #28]	; (800ab50 <pxCurrentTCBConst2>)
 800ab32:	6819      	ldr	r1, [r3, #0]
 800ab34:	6808      	ldr	r0, [r1, #0]
 800ab36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3a:	f380 8809 	msr	PSP, r0
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f04f 0000 	mov.w	r0, #0
 800ab46:	f380 8811 	msr	BASEPRI, r0
 800ab4a:	4770      	bx	lr
 800ab4c:	f3af 8000 	nop.w

0800ab50 <pxCurrentTCBConst2>:
 800ab50:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop

0800ab58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab58:	4808      	ldr	r0, [pc, #32]	; (800ab7c <prvPortStartFirstTask+0x24>)
 800ab5a:	6800      	ldr	r0, [r0, #0]
 800ab5c:	6800      	ldr	r0, [r0, #0]
 800ab5e:	f380 8808 	msr	MSP, r0
 800ab62:	f04f 0000 	mov.w	r0, #0
 800ab66:	f380 8814 	msr	CONTROL, r0
 800ab6a:	b662      	cpsie	i
 800ab6c:	b661      	cpsie	f
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	df00      	svc	0
 800ab78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab7a:	bf00      	nop
 800ab7c:	e000ed08 	.word	0xe000ed08

0800ab80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab86:	4b46      	ldr	r3, [pc, #280]	; (800aca0 <xPortStartScheduler+0x120>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a46      	ldr	r2, [pc, #280]	; (800aca4 <xPortStartScheduler+0x124>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d10a      	bne.n	800aba6 <xPortStartScheduler+0x26>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	613b      	str	r3, [r7, #16]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aba6:	4b3e      	ldr	r3, [pc, #248]	; (800aca0 <xPortStartScheduler+0x120>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a3f      	ldr	r2, [pc, #252]	; (800aca8 <xPortStartScheduler+0x128>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d10a      	bne.n	800abc6 <xPortStartScheduler+0x46>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	60fb      	str	r3, [r7, #12]
}
 800abc2:	bf00      	nop
 800abc4:	e7fe      	b.n	800abc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abc6:	4b39      	ldr	r3, [pc, #228]	; (800acac <xPortStartScheduler+0x12c>)
 800abc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	22ff      	movs	r2, #255	; 0xff
 800abd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abe0:	78fb      	ldrb	r3, [r7, #3]
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	4b31      	ldr	r3, [pc, #196]	; (800acb0 <xPortStartScheduler+0x130>)
 800abec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abee:	4b31      	ldr	r3, [pc, #196]	; (800acb4 <xPortStartScheduler+0x134>)
 800abf0:	2207      	movs	r2, #7
 800abf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abf4:	e009      	b.n	800ac0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800abf6:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <xPortStartScheduler+0x134>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3b01      	subs	r3, #1
 800abfc:	4a2d      	ldr	r2, [pc, #180]	; (800acb4 <xPortStartScheduler+0x134>)
 800abfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac0a:	78fb      	ldrb	r3, [r7, #3]
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac12:	2b80      	cmp	r3, #128	; 0x80
 800ac14:	d0ef      	beq.n	800abf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac16:	4b27      	ldr	r3, [pc, #156]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f1c3 0307 	rsb	r3, r3, #7
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d00a      	beq.n	800ac38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	60bb      	str	r3, [r7, #8]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac38:	4b1e      	ldr	r3, [pc, #120]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	021b      	lsls	r3, r3, #8
 800ac3e:	4a1d      	ldr	r2, [pc, #116]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac42:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac4a:	4a1a      	ldr	r2, [pc, #104]	; (800acb4 <xPortStartScheduler+0x134>)
 800ac4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac56:	4b18      	ldr	r3, [pc, #96]	; (800acb8 <xPortStartScheduler+0x138>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a17      	ldr	r2, [pc, #92]	; (800acb8 <xPortStartScheduler+0x138>)
 800ac5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac62:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <xPortStartScheduler+0x138>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a14      	ldr	r2, [pc, #80]	; (800acb8 <xPortStartScheduler+0x138>)
 800ac68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac6e:	f000 f8dd 	bl	800ae2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac72:	4b12      	ldr	r3, [pc, #72]	; (800acbc <xPortStartScheduler+0x13c>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac78:	f000 f8fc 	bl	800ae74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac7c:	4b10      	ldr	r3, [pc, #64]	; (800acc0 <xPortStartScheduler+0x140>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a0f      	ldr	r2, [pc, #60]	; (800acc0 <xPortStartScheduler+0x140>)
 800ac82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac88:	f7ff ff66 	bl	800ab58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac8c:	f7ff f856 	bl	8009d3c <vTaskSwitchContext>
	prvTaskExitError();
 800ac90:	f7ff ff22 	bl	800aad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	e000ed00 	.word	0xe000ed00
 800aca4:	410fc271 	.word	0x410fc271
 800aca8:	410fc270 	.word	0x410fc270
 800acac:	e000e400 	.word	0xe000e400
 800acb0:	20000dc8 	.word	0x20000dc8
 800acb4:	20000dcc 	.word	0x20000dcc
 800acb8:	e000ed20 	.word	0xe000ed20
 800acbc:	2000000c 	.word	0x2000000c
 800acc0:	e000ef34 	.word	0xe000ef34

0800acc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	607b      	str	r3, [r7, #4]
}
 800acdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acde:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <vPortEnterCritical+0x58>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	4a0d      	ldr	r2, [pc, #52]	; (800ad1c <vPortEnterCritical+0x58>)
 800ace6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ace8:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <vPortEnterCritical+0x58>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d10f      	bne.n	800ad10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <vPortEnterCritical+0x5c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <vPortEnterCritical+0x4c>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	603b      	str	r3, [r7, #0]
}
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <vPortEnterCritical+0x4a>
	}
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	2000000c 	.word	0x2000000c
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad2a:	4b12      	ldr	r3, [pc, #72]	; (800ad74 <vPortExitCritical+0x50>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10a      	bne.n	800ad48 <vPortExitCritical+0x24>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	607b      	str	r3, [r7, #4]
}
 800ad44:	bf00      	nop
 800ad46:	e7fe      	b.n	800ad46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <vPortExitCritical+0x50>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <vPortExitCritical+0x50>)
 800ad50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad52:	4b08      	ldr	r3, [pc, #32]	; (800ad74 <vPortExitCritical+0x50>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d105      	bne.n	800ad66 <vPortExitCritical+0x42>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	f383 8811 	msr	BASEPRI, r3
}
 800ad64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad66:	bf00      	nop
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	2000000c 	.word	0x2000000c
	...

0800ad80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad80:	f3ef 8009 	mrs	r0, PSP
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	4b15      	ldr	r3, [pc, #84]	; (800ade0 <pxCurrentTCBConst>)
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	f01e 0f10 	tst.w	lr, #16
 800ad90:	bf08      	it	eq
 800ad92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9a:	6010      	str	r0, [r2, #0]
 800ad9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ada0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ada4:	f380 8811 	msr	BASEPRI, r0
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f7fe ffc4 	bl	8009d3c <vTaskSwitchContext>
 800adb4:	f04f 0000 	mov.w	r0, #0
 800adb8:	f380 8811 	msr	BASEPRI, r0
 800adbc:	bc09      	pop	{r0, r3}
 800adbe:	6819      	ldr	r1, [r3, #0]
 800adc0:	6808      	ldr	r0, [r1, #0]
 800adc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc6:	f01e 0f10 	tst.w	lr, #16
 800adca:	bf08      	it	eq
 800adcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800add0:	f380 8809 	msr	PSP, r0
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w

0800ade0 <pxCurrentTCBConst>:
 800ade0:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop

0800ade8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	607b      	str	r3, [r7, #4]
}
 800ae00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae02:	f7fe fee1 	bl	8009bc8 <xTaskIncrementTick>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae0c:	4b06      	ldr	r3, [pc, #24]	; (800ae28 <xPortSysTickHandler+0x40>)
 800ae0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	2300      	movs	r3, #0
 800ae16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	f383 8811 	msr	BASEPRI, r3
}
 800ae1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	e000ed04 	.word	0xe000ed04

0800ae2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae30:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <vPortSetupTimerInterrupt+0x34>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae36:	4b0b      	ldr	r3, [pc, #44]	; (800ae64 <vPortSetupTimerInterrupt+0x38>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <vPortSetupTimerInterrupt+0x3c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a0a      	ldr	r2, [pc, #40]	; (800ae6c <vPortSetupTimerInterrupt+0x40>)
 800ae42:	fba2 2303 	umull	r2, r3, r2, r3
 800ae46:	099b      	lsrs	r3, r3, #6
 800ae48:	4a09      	ldr	r2, [pc, #36]	; (800ae70 <vPortSetupTimerInterrupt+0x44>)
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae4e:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <vPortSetupTimerInterrupt+0x34>)
 800ae50:	2207      	movs	r2, #7
 800ae52:	601a      	str	r2, [r3, #0]
}
 800ae54:	bf00      	nop
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	e000e010 	.word	0xe000e010
 800ae64:	e000e018 	.word	0xe000e018
 800ae68:	20000000 	.word	0x20000000
 800ae6c:	10624dd3 	.word	0x10624dd3
 800ae70:	e000e014 	.word	0xe000e014

0800ae74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae84 <vPortEnableVFP+0x10>
 800ae78:	6801      	ldr	r1, [r0, #0]
 800ae7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae7e:	6001      	str	r1, [r0, #0]
 800ae80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae82:	bf00      	nop
 800ae84:	e000ed88 	.word	0xe000ed88

0800ae88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae8e:	f3ef 8305 	mrs	r3, IPSR
 800ae92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b0f      	cmp	r3, #15
 800ae98:	d914      	bls.n	800aec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae9a:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <vPortValidateInterruptPriority+0x70>)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aea4:	4b15      	ldr	r3, [pc, #84]	; (800aefc <vPortValidateInterruptPriority+0x74>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	7afa      	ldrb	r2, [r7, #11]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d20a      	bcs.n	800aec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	607b      	str	r3, [r7, #4]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aec4:	4b0e      	ldr	r3, [pc, #56]	; (800af00 <vPortValidateInterruptPriority+0x78>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aecc:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <vPortValidateInterruptPriority+0x7c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d90a      	bls.n	800aeea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	603b      	str	r3, [r7, #0]
}
 800aee6:	bf00      	nop
 800aee8:	e7fe      	b.n	800aee8 <vPortValidateInterruptPriority+0x60>
	}
 800aeea:	bf00      	nop
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	e000e3f0 	.word	0xe000e3f0
 800aefc:	20000dc8 	.word	0x20000dc8
 800af00:	e000ed0c 	.word	0xe000ed0c
 800af04:	20000dcc 	.word	0x20000dcc

0800af08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af10:	2300      	movs	r3, #0
 800af12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af14:	f7fe fd9c 	bl	8009a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af18:	4b5b      	ldr	r3, [pc, #364]	; (800b088 <pvPortMalloc+0x180>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af20:	f000 f920 	bl	800b164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af24:	4b59      	ldr	r3, [pc, #356]	; (800b08c <pvPortMalloc+0x184>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4013      	ands	r3, r2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f040 8093 	bne.w	800b058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d01d      	beq.n	800af74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af38:	2208      	movs	r2, #8
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4413      	add	r3, r2
 800af3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	2b00      	cmp	r3, #0
 800af48:	d014      	beq.n	800af74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f023 0307 	bic.w	r3, r3, #7
 800af50:	3308      	adds	r3, #8
 800af52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00a      	beq.n	800af74 <pvPortMalloc+0x6c>
	__asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	617b      	str	r3, [r7, #20]
}
 800af70:	bf00      	nop
 800af72:	e7fe      	b.n	800af72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d06e      	beq.n	800b058 <pvPortMalloc+0x150>
 800af7a:	4b45      	ldr	r3, [pc, #276]	; (800b090 <pvPortMalloc+0x188>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d869      	bhi.n	800b058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af84:	4b43      	ldr	r3, [pc, #268]	; (800b094 <pvPortMalloc+0x18c>)
 800af86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af88:	4b42      	ldr	r3, [pc, #264]	; (800b094 <pvPortMalloc+0x18c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af8e:	e004      	b.n	800af9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d903      	bls.n	800afac <pvPortMalloc+0xa4>
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1f1      	bne.n	800af90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afac:	4b36      	ldr	r3, [pc, #216]	; (800b088 <pvPortMalloc+0x180>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d050      	beq.n	800b058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2208      	movs	r2, #8
 800afbc:	4413      	add	r3, r2
 800afbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	1ad2      	subs	r2, r2, r3
 800afd0:	2308      	movs	r3, #8
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d91f      	bls.n	800b018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4413      	add	r3, r2
 800afde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	f003 0307 	and.w	r3, r3, #7
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <pvPortMalloc+0xf8>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	613b      	str	r3, [r7, #16]
}
 800affc:	bf00      	nop
 800affe:	e7fe      	b.n	800affe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	1ad2      	subs	r2, r2, r3
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b012:	69b8      	ldr	r0, [r7, #24]
 800b014:	f000 f908 	bl	800b228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b018:	4b1d      	ldr	r3, [pc, #116]	; (800b090 <pvPortMalloc+0x188>)
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	4a1b      	ldr	r2, [pc, #108]	; (800b090 <pvPortMalloc+0x188>)
 800b024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b026:	4b1a      	ldr	r3, [pc, #104]	; (800b090 <pvPortMalloc+0x188>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	4b1b      	ldr	r3, [pc, #108]	; (800b098 <pvPortMalloc+0x190>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d203      	bcs.n	800b03a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b032:	4b17      	ldr	r3, [pc, #92]	; (800b090 <pvPortMalloc+0x188>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a18      	ldr	r2, [pc, #96]	; (800b098 <pvPortMalloc+0x190>)
 800b038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	4b13      	ldr	r3, [pc, #76]	; (800b08c <pvPortMalloc+0x184>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	431a      	orrs	r2, r3
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b04e:	4b13      	ldr	r3, [pc, #76]	; (800b09c <pvPortMalloc+0x194>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3301      	adds	r3, #1
 800b054:	4a11      	ldr	r2, [pc, #68]	; (800b09c <pvPortMalloc+0x194>)
 800b056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b058:	f7fe fd08 	bl	8009a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	f003 0307 	and.w	r3, r3, #7
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <pvPortMalloc+0x174>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60fb      	str	r3, [r7, #12]
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <pvPortMalloc+0x172>
	return pvReturn;
 800b07c:	69fb      	ldr	r3, [r7, #28]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3728      	adds	r7, #40	; 0x28
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200049d8 	.word	0x200049d8
 800b08c:	200049ec 	.word	0x200049ec
 800b090:	200049dc 	.word	0x200049dc
 800b094:	200049d0 	.word	0x200049d0
 800b098:	200049e0 	.word	0x200049e0
 800b09c:	200049e4 	.word	0x200049e4

0800b0a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d04d      	beq.n	800b14e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0b2:	2308      	movs	r3, #8
 800b0b4:	425b      	negs	r3, r3
 800b0b6:	697a      	ldr	r2, [r7, #20]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	4b24      	ldr	r3, [pc, #144]	; (800b158 <vPortFree+0xb8>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <vPortFree+0x44>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	60fb      	str	r3, [r7, #12]
}
 800b0e0:	bf00      	nop
 800b0e2:	e7fe      	b.n	800b0e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00a      	beq.n	800b102 <vPortFree+0x62>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	60bb      	str	r3, [r7, #8]
}
 800b0fe:	bf00      	nop
 800b100:	e7fe      	b.n	800b100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	4b14      	ldr	r3, [pc, #80]	; (800b158 <vPortFree+0xb8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d01e      	beq.n	800b14e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d11a      	bne.n	800b14e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	4b0e      	ldr	r3, [pc, #56]	; (800b158 <vPortFree+0xb8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	43db      	mvns	r3, r3
 800b122:	401a      	ands	r2, r3
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b128:	f7fe fc92 	bl	8009a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <vPortFree+0xbc>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4413      	add	r3, r2
 800b136:	4a09      	ldr	r2, [pc, #36]	; (800b15c <vPortFree+0xbc>)
 800b138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b13a:	6938      	ldr	r0, [r7, #16]
 800b13c:	f000 f874 	bl	800b228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b140:	4b07      	ldr	r3, [pc, #28]	; (800b160 <vPortFree+0xc0>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3301      	adds	r3, #1
 800b146:	4a06      	ldr	r2, [pc, #24]	; (800b160 <vPortFree+0xc0>)
 800b148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b14a:	f7fe fc8f 	bl	8009a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b14e:	bf00      	nop
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	200049ec 	.word	0x200049ec
 800b15c:	200049dc 	.word	0x200049dc
 800b160:	200049e8 	.word	0x200049e8

0800b164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b16a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b16e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b170:	4b27      	ldr	r3, [pc, #156]	; (800b210 <prvHeapInit+0xac>)
 800b172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00c      	beq.n	800b198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3307      	adds	r3, #7
 800b182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f023 0307 	bic.w	r3, r3, #7
 800b18a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	4a1f      	ldr	r2, [pc, #124]	; (800b210 <prvHeapInit+0xac>)
 800b194:	4413      	add	r3, r2
 800b196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b19c:	4a1d      	ldr	r2, [pc, #116]	; (800b214 <prvHeapInit+0xb0>)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1a2:	4b1c      	ldr	r3, [pc, #112]	; (800b214 <prvHeapInit+0xb0>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1b0:	2208      	movs	r2, #8
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	1a9b      	subs	r3, r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f023 0307 	bic.w	r3, r3, #7
 800b1be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4a15      	ldr	r2, [pc, #84]	; (800b218 <prvHeapInit+0xb4>)
 800b1c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1c6:	4b14      	ldr	r3, [pc, #80]	; (800b218 <prvHeapInit+0xb4>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1ce:	4b12      	ldr	r3, [pc, #72]	; (800b218 <prvHeapInit+0xb4>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	1ad2      	subs	r2, r2, r3
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <prvHeapInit+0xb4>)
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	4a0a      	ldr	r2, [pc, #40]	; (800b21c <prvHeapInit+0xb8>)
 800b1f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	4a09      	ldr	r2, [pc, #36]	; (800b220 <prvHeapInit+0xbc>)
 800b1fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1fc:	4b09      	ldr	r3, [pc, #36]	; (800b224 <prvHeapInit+0xc0>)
 800b1fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b202:	601a      	str	r2, [r3, #0]
}
 800b204:	bf00      	nop
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	20000dd0 	.word	0x20000dd0
 800b214:	200049d0 	.word	0x200049d0
 800b218:	200049d8 	.word	0x200049d8
 800b21c:	200049e0 	.word	0x200049e0
 800b220:	200049dc 	.word	0x200049dc
 800b224:	200049ec 	.word	0x200049ec

0800b228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b230:	4b28      	ldr	r3, [pc, #160]	; (800b2d4 <prvInsertBlockIntoFreeList+0xac>)
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	e002      	b.n	800b23c <prvInsertBlockIntoFreeList+0x14>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	429a      	cmp	r2, r3
 800b244:	d8f7      	bhi.n	800b236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	4413      	add	r3, r2
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d108      	bne.n	800b26a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	441a      	add	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	441a      	add	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d118      	bne.n	800b2b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	d00d      	beq.n	800b2a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	441a      	add	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	e008      	b.n	800b2b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2a6:	4b0c      	ldr	r3, [pc, #48]	; (800b2d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	e003      	b.n	800b2b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d002      	beq.n	800b2c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2c6:	bf00      	nop
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	200049d0 	.word	0x200049d0
 800b2d8:	200049d8 	.word	0x200049d8

0800b2dc <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	71fb      	strb	r3, [r7, #7]
 800b2e6:	e026      	b.n	800b336 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	3b50      	subs	r3, #80	; 0x50
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 f82b 	bl	800b34c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	f000 f827 	bl	800b34c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800b2fe:	2100      	movs	r1, #0
 800b300:	2010      	movs	r0, #16
 800b302:	f000 f823 	bl	800b34c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800b306:	2300      	movs	r3, #0
 800b308:	71bb      	strb	r3, [r7, #6]
 800b30a:	e00d      	b.n	800b328 <OLED_Refresh_Gram+0x4c>
 800b30c:	79ba      	ldrb	r2, [r7, #6]
 800b30e:	79fb      	ldrb	r3, [r7, #7]
 800b310:	490d      	ldr	r1, [pc, #52]	; (800b348 <OLED_Refresh_Gram+0x6c>)
 800b312:	00d2      	lsls	r2, r2, #3
 800b314:	440a      	add	r2, r1
 800b316:	4413      	add	r3, r2
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2101      	movs	r1, #1
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 f815 	bl	800b34c <OLED_WR_Byte>
 800b322:	79bb      	ldrb	r3, [r7, #6]
 800b324:	3301      	adds	r3, #1
 800b326:	71bb      	strb	r3, [r7, #6]
 800b328:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	daed      	bge.n	800b30c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	3301      	adds	r3, #1
 800b334:	71fb      	strb	r3, [r7, #7]
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	2b07      	cmp	r3, #7
 800b33a:	d9d5      	bls.n	800b2e8 <OLED_Refresh_Gram+0xc>
	}   
}
 800b33c:	bf00      	nop
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20004d50 	.word	0x20004d50

0800b34c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	460a      	mov	r2, r1
 800b356:	71fb      	strb	r3, [r7, #7]
 800b358:	4613      	mov	r3, r2
 800b35a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800b35c:	79bb      	ldrb	r3, [r7, #6]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d006      	beq.n	800b370 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800b362:	2201      	movs	r2, #1
 800b364:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b368:	481c      	ldr	r0, [pc, #112]	; (800b3dc <OLED_WR_Byte+0x90>)
 800b36a:	f7f9 fe65 	bl	8005038 <HAL_GPIO_WritePin>
 800b36e:	e005      	b.n	800b37c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800b370:	2200      	movs	r2, #0
 800b372:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b376:	4819      	ldr	r0, [pc, #100]	; (800b3dc <OLED_WR_Byte+0x90>)
 800b378:	f7f9 fe5e 	bl	8005038 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800b37c:	2300      	movs	r3, #0
 800b37e:	73fb      	strb	r3, [r7, #15]
 800b380:	e01e      	b.n	800b3c0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800b382:	2200      	movs	r2, #0
 800b384:	2120      	movs	r1, #32
 800b386:	4815      	ldr	r0, [pc, #84]	; (800b3dc <OLED_WR_Byte+0x90>)
 800b388:	f7f9 fe56 	bl	8005038 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800b38c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b390:	2b00      	cmp	r3, #0
 800b392:	da05      	bge.n	800b3a0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800b394:	2201      	movs	r2, #1
 800b396:	2140      	movs	r1, #64	; 0x40
 800b398:	4810      	ldr	r0, [pc, #64]	; (800b3dc <OLED_WR_Byte+0x90>)
 800b39a:	f7f9 fe4d 	bl	8005038 <HAL_GPIO_WritePin>
 800b39e:	e004      	b.n	800b3aa <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2140      	movs	r1, #64	; 0x40
 800b3a4:	480d      	ldr	r0, [pc, #52]	; (800b3dc <OLED_WR_Byte+0x90>)
 800b3a6:	f7f9 fe47 	bl	8005038 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	2120      	movs	r1, #32
 800b3ae:	480b      	ldr	r0, [pc, #44]	; (800b3dc <OLED_WR_Byte+0x90>)
 800b3b0:	f7f9 fe42 	bl	8005038 <HAL_GPIO_WritePin>
		dat<<=1;
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	73fb      	strb	r3, [r7, #15]
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	2b07      	cmp	r3, #7
 800b3c4:	d9dd      	bls.n	800b382 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3cc:	4803      	ldr	r0, [pc, #12]	; (800b3dc <OLED_WR_Byte+0x90>)
 800b3ce:	f7f9 fe33 	bl	8005038 <HAL_GPIO_WritePin>
} 
 800b3d2:	bf00      	nop
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	40021000 	.word	0x40021000

0800b3e0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	71fb      	strb	r3, [r7, #7]
 800b3ea:	e014      	b.n	800b416 <OLED_Clear+0x36>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	71bb      	strb	r3, [r7, #6]
 800b3f0:	e00a      	b.n	800b408 <OLED_Clear+0x28>
 800b3f2:	79ba      	ldrb	r2, [r7, #6]
 800b3f4:	79fb      	ldrb	r3, [r7, #7]
 800b3f6:	490c      	ldr	r1, [pc, #48]	; (800b428 <OLED_Clear+0x48>)
 800b3f8:	00d2      	lsls	r2, r2, #3
 800b3fa:	440a      	add	r2, r1
 800b3fc:	4413      	add	r3, r2
 800b3fe:	2200      	movs	r2, #0
 800b400:	701a      	strb	r2, [r3, #0]
 800b402:	79bb      	ldrb	r3, [r7, #6]
 800b404:	3301      	adds	r3, #1
 800b406:	71bb      	strb	r3, [r7, #6]
 800b408:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	daf0      	bge.n	800b3f2 <OLED_Clear+0x12>
 800b410:	79fb      	ldrb	r3, [r7, #7]
 800b412:	3301      	adds	r3, #1
 800b414:	71fb      	strb	r3, [r7, #7]
 800b416:	79fb      	ldrb	r3, [r7, #7]
 800b418:	2b07      	cmp	r3, #7
 800b41a:	d9e7      	bls.n	800b3ec <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800b41c:	f7ff ff5e 	bl	800b2dc <OLED_Refresh_Gram>
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20004d50 	.word	0x20004d50

0800b42c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
 800b436:	460b      	mov	r3, r1
 800b438:	71bb      	strb	r3, [r7, #6]
 800b43a:	4613      	mov	r3, r2
 800b43c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800b442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b446:	2b00      	cmp	r3, #0
 800b448:	db41      	blt.n	800b4ce <OLED_DrawPoint+0xa2>
 800b44a:	79bb      	ldrb	r3, [r7, #6]
 800b44c:	2b3f      	cmp	r3, #63	; 0x3f
 800b44e:	d83e      	bhi.n	800b4ce <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800b450:	79bb      	ldrb	r3, [r7, #6]
 800b452:	08db      	lsrs	r3, r3, #3
 800b454:	b2db      	uxtb	r3, r3
 800b456:	f1c3 0307 	rsb	r3, r3, #7
 800b45a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800b45c:	79bb      	ldrb	r3, [r7, #6]
 800b45e:	f003 0307 	and.w	r3, r3, #7
 800b462:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800b464:	7b7b      	ldrb	r3, [r7, #13]
 800b466:	f1c3 0307 	rsb	r3, r3, #7
 800b46a:	2201      	movs	r2, #1
 800b46c:	fa02 f303 	lsl.w	r3, r2, r3
 800b470:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800b472:	797b      	ldrb	r3, [r7, #5]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d012      	beq.n	800b49e <OLED_DrawPoint+0x72>
 800b478:	79fa      	ldrb	r2, [r7, #7]
 800b47a:	7bbb      	ldrb	r3, [r7, #14]
 800b47c:	4917      	ldr	r1, [pc, #92]	; (800b4dc <OLED_DrawPoint+0xb0>)
 800b47e:	00d2      	lsls	r2, r2, #3
 800b480:	440a      	add	r2, r1
 800b482:	4413      	add	r3, r2
 800b484:	7818      	ldrb	r0, [r3, #0]
 800b486:	79fa      	ldrb	r2, [r7, #7]
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	7bf9      	ldrb	r1, [r7, #15]
 800b48c:	4301      	orrs	r1, r0
 800b48e:	b2c8      	uxtb	r0, r1
 800b490:	4912      	ldr	r1, [pc, #72]	; (800b4dc <OLED_DrawPoint+0xb0>)
 800b492:	00d2      	lsls	r2, r2, #3
 800b494:	440a      	add	r2, r1
 800b496:	4413      	add	r3, r2
 800b498:	4602      	mov	r2, r0
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	e018      	b.n	800b4d0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800b49e:	79fa      	ldrb	r2, [r7, #7]
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	490e      	ldr	r1, [pc, #56]	; (800b4dc <OLED_DrawPoint+0xb0>)
 800b4a4:	00d2      	lsls	r2, r2, #3
 800b4a6:	440a      	add	r2, r1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	b25a      	sxtb	r2, r3
 800b4ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4b2:	43db      	mvns	r3, r3
 800b4b4:	b25b      	sxtb	r3, r3
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	b259      	sxtb	r1, r3
 800b4ba:	79fa      	ldrb	r2, [r7, #7]
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	b2c8      	uxtb	r0, r1
 800b4c0:	4906      	ldr	r1, [pc, #24]	; (800b4dc <OLED_DrawPoint+0xb0>)
 800b4c2:	00d2      	lsls	r2, r2, #3
 800b4c4:	440a      	add	r2, r1
 800b4c6:	4413      	add	r3, r2
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	701a      	strb	r2, [r3, #0]
 800b4cc:	e000      	b.n	800b4d0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800b4ce:	bf00      	nop
}
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	20004d50 	.word	0x20004d50

0800b4e0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800b4e0:	b590      	push	{r4, r7, lr}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	4623      	mov	r3, r4
 800b4f0:	71fb      	strb	r3, [r7, #7]
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	71bb      	strb	r3, [r7, #6]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	717b      	strb	r3, [r7, #5]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800b4fe:	79bb      	ldrb	r3, [r7, #6]
 800b500:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800b502:	797b      	ldrb	r3, [r7, #5]
 800b504:	3b20      	subs	r3, #32
 800b506:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800b508:	2300      	movs	r3, #0
 800b50a:	73bb      	strb	r3, [r7, #14]
 800b50c:	e04d      	b.n	800b5aa <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800b50e:	793b      	ldrb	r3, [r7, #4]
 800b510:	2b0c      	cmp	r3, #12
 800b512:	d10b      	bne.n	800b52c <OLED_ShowChar+0x4c>
 800b514:	797a      	ldrb	r2, [r7, #5]
 800b516:	7bb9      	ldrb	r1, [r7, #14]
 800b518:	4828      	ldr	r0, [pc, #160]	; (800b5bc <OLED_ShowChar+0xdc>)
 800b51a:	4613      	mov	r3, r2
 800b51c:	005b      	lsls	r3, r3, #1
 800b51e:	4413      	add	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4403      	add	r3, r0
 800b524:	440b      	add	r3, r1
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	73fb      	strb	r3, [r7, #15]
 800b52a:	e007      	b.n	800b53c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800b52c:	797a      	ldrb	r2, [r7, #5]
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	4923      	ldr	r1, [pc, #140]	; (800b5c0 <OLED_ShowChar+0xe0>)
 800b532:	0112      	lsls	r2, r2, #4
 800b534:	440a      	add	r2, r1
 800b536:	4413      	add	r3, r2
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800b53c:	2300      	movs	r3, #0
 800b53e:	737b      	strb	r3, [r7, #13]
 800b540:	e02d      	b.n	800b59e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800b542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b546:	2b00      	cmp	r3, #0
 800b548:	da07      	bge.n	800b55a <OLED_ShowChar+0x7a>
 800b54a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b54e:	79b9      	ldrb	r1, [r7, #6]
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff ff6a 	bl	800b42c <OLED_DrawPoint>
 800b558:	e00c      	b.n	800b574 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800b55a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	bf0c      	ite	eq
 800b562:	2301      	moveq	r3, #1
 800b564:	2300      	movne	r3, #0
 800b566:	b2db      	uxtb	r3, r3
 800b568:	461a      	mov	r2, r3
 800b56a:	79b9      	ldrb	r1, [r7, #6]
 800b56c:	79fb      	ldrb	r3, [r7, #7]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff ff5c 	bl	800b42c <OLED_DrawPoint>
			temp<<=1;
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	73fb      	strb	r3, [r7, #15]
			y++;
 800b57a:	79bb      	ldrb	r3, [r7, #6]
 800b57c:	3301      	adds	r3, #1
 800b57e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800b580:	79ba      	ldrb	r2, [r7, #6]
 800b582:	7b3b      	ldrb	r3, [r7, #12]
 800b584:	1ad2      	subs	r2, r2, r3
 800b586:	793b      	ldrb	r3, [r7, #4]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d105      	bne.n	800b598 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800b58c:	7b3b      	ldrb	r3, [r7, #12]
 800b58e:	71bb      	strb	r3, [r7, #6]
				x++;
 800b590:	79fb      	ldrb	r3, [r7, #7]
 800b592:	3301      	adds	r3, #1
 800b594:	71fb      	strb	r3, [r7, #7]
				break;
 800b596:	e005      	b.n	800b5a4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800b598:	7b7b      	ldrb	r3, [r7, #13]
 800b59a:	3301      	adds	r3, #1
 800b59c:	737b      	strb	r3, [r7, #13]
 800b59e:	7b7b      	ldrb	r3, [r7, #13]
 800b5a0:	2b07      	cmp	r3, #7
 800b5a2:	d9ce      	bls.n	800b542 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800b5a4:	7bbb      	ldrb	r3, [r7, #14]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	73bb      	strb	r3, [r7, #14]
 800b5aa:	7bba      	ldrb	r2, [r7, #14]
 800b5ac:	793b      	ldrb	r3, [r7, #4]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d3ad      	bcc.n	800b50e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800b5b2:	bf00      	nop
 800b5b4:	bf00      	nop
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd90      	pop	{r4, r7, pc}
 800b5bc:	0800da1c 	.word	0x0800da1c
 800b5c0:	0800de90 	.word	0x0800de90

0800b5c4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	603a      	str	r2, [r7, #0]
 800b5ce:	71fb      	strb	r3, [r7, #7]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800b5d4:	e01f      	b.n	800b616 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	2b7a      	cmp	r3, #122	; 0x7a
 800b5da:	d904      	bls.n	800b5e6 <OLED_ShowString+0x22>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	71fb      	strb	r3, [r7, #7]
 800b5e0:	79bb      	ldrb	r3, [r7, #6]
 800b5e2:	3310      	adds	r3, #16
 800b5e4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800b5e6:	79bb      	ldrb	r3, [r7, #6]
 800b5e8:	2b3a      	cmp	r3, #58	; 0x3a
 800b5ea:	d905      	bls.n	800b5f8 <OLED_ShowString+0x34>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	71fb      	strb	r3, [r7, #7]
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	71bb      	strb	r3, [r7, #6]
 800b5f4:	f7ff fef4 	bl	800b3e0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	781a      	ldrb	r2, [r3, #0]
 800b5fc:	79b9      	ldrb	r1, [r7, #6]
 800b5fe:	79f8      	ldrb	r0, [r7, #7]
 800b600:	2301      	movs	r3, #1
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	230c      	movs	r3, #12
 800b606:	f7ff ff6b 	bl	800b4e0 <OLED_ShowChar>
        x+=8;
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	3308      	adds	r3, #8
 800b60e:	71fb      	strb	r3, [r7, #7]
        p++;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1db      	bne.n	800b5d6 <OLED_ShowString+0x12>
    }  
}	 
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <OLED_Init>:

void OLED_Init(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b62c:	f7f9 fd1e 	bl	800506c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b630:	4b41      	ldr	r3, [pc, #260]	; (800b738 <OLED_Init+0x110>)
 800b632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b634:	4a40      	ldr	r2, [pc, #256]	; (800b738 <OLED_Init+0x110>)
 800b636:	f023 0301 	bic.w	r3, r3, #1
 800b63a:	6713      	str	r3, [r2, #112]	; 0x70
 800b63c:	4b3e      	ldr	r3, [pc, #248]	; (800b738 <OLED_Init+0x110>)
 800b63e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b640:	4a3d      	ldr	r2, [pc, #244]	; (800b738 <OLED_Init+0x110>)
 800b642:	f023 0304 	bic.w	r3, r3, #4
 800b646:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b648:	f7f9 fd24 	bl	8005094 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b64c:	2200      	movs	r2, #0
 800b64e:	2180      	movs	r1, #128	; 0x80
 800b650:	483a      	ldr	r0, [pc, #232]	; (800b73c <OLED_Init+0x114>)
 800b652:	f7f9 fcf1 	bl	8005038 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b656:	2064      	movs	r0, #100	; 0x64
 800b658:	f7f8 fe48 	bl	80042ec <HAL_Delay>
	OLED_RST_Set();
 800b65c:	2201      	movs	r2, #1
 800b65e:	2180      	movs	r1, #128	; 0x80
 800b660:	4836      	ldr	r0, [pc, #216]	; (800b73c <OLED_Init+0x114>)
 800b662:	f7f9 fce9 	bl	8005038 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800b666:	2100      	movs	r1, #0
 800b668:	20ae      	movs	r0, #174	; 0xae
 800b66a:	f7ff fe6f 	bl	800b34c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800b66e:	2100      	movs	r1, #0
 800b670:	20d5      	movs	r0, #213	; 0xd5
 800b672:	f7ff fe6b 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800b676:	2100      	movs	r1, #0
 800b678:	2050      	movs	r0, #80	; 0x50
 800b67a:	f7ff fe67 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800b67e:	2100      	movs	r1, #0
 800b680:	20a8      	movs	r0, #168	; 0xa8
 800b682:	f7ff fe63 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800b686:	2100      	movs	r1, #0
 800b688:	203f      	movs	r0, #63	; 0x3f
 800b68a:	f7ff fe5f 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800b68e:	2100      	movs	r1, #0
 800b690:	20d3      	movs	r0, #211	; 0xd3
 800b692:	f7ff fe5b 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800b696:	2100      	movs	r1, #0
 800b698:	2000      	movs	r0, #0
 800b69a:	f7ff fe57 	bl	800b34c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800b69e:	2100      	movs	r1, #0
 800b6a0:	2040      	movs	r0, #64	; 0x40
 800b6a2:	f7ff fe53 	bl	800b34c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	208d      	movs	r0, #141	; 0x8d
 800b6aa:	f7ff fe4f 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	2014      	movs	r0, #20
 800b6b2:	f7ff fe4b 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	2020      	movs	r0, #32
 800b6ba:	f7ff fe47 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800b6be:	2100      	movs	r1, #0
 800b6c0:	2002      	movs	r0, #2
 800b6c2:	f7ff fe43 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	20a1      	movs	r0, #161	; 0xa1
 800b6ca:	f7ff fe3f 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	20c0      	movs	r0, #192	; 0xc0
 800b6d2:	f7ff fe3b 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	20da      	movs	r0, #218	; 0xda
 800b6da:	f7ff fe37 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800b6de:	2100      	movs	r1, #0
 800b6e0:	2012      	movs	r0, #18
 800b6e2:	f7ff fe33 	bl	800b34c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	2081      	movs	r0, #129	; 0x81
 800b6ea:	f7ff fe2f 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	20ef      	movs	r0, #239	; 0xef
 800b6f2:	f7ff fe2b 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	20d9      	movs	r0, #217	; 0xd9
 800b6fa:	f7ff fe27 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800b6fe:	2100      	movs	r1, #0
 800b700:	20f1      	movs	r0, #241	; 0xf1
 800b702:	f7ff fe23 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800b706:	2100      	movs	r1, #0
 800b708:	20db      	movs	r0, #219	; 0xdb
 800b70a:	f7ff fe1f 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800b70e:	2100      	movs	r1, #0
 800b710:	2030      	movs	r0, #48	; 0x30
 800b712:	f7ff fe1b 	bl	800b34c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800b716:	2100      	movs	r1, #0
 800b718:	20a4      	movs	r0, #164	; 0xa4
 800b71a:	f7ff fe17 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800b71e:	2100      	movs	r1, #0
 800b720:	20a6      	movs	r0, #166	; 0xa6
 800b722:	f7ff fe13 	bl	800b34c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800b726:	2100      	movs	r1, #0
 800b728:	20af      	movs	r0, #175	; 0xaf
 800b72a:	f7ff fe0f 	bl	800b34c <OLED_WR_Byte>
	OLED_Clear(); 
 800b72e:	f7ff fe57 	bl	800b3e0 <OLED_Clear>
}
 800b732:	bf00      	nop
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	40023800 	.word	0x40023800
 800b73c:	40021000 	.word	0x40021000

0800b740 <__errno>:
 800b740:	4b01      	ldr	r3, [pc, #4]	; (800b748 <__errno+0x8>)
 800b742:	6818      	ldr	r0, [r3, #0]
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	20000010 	.word	0x20000010

0800b74c <__libc_init_array>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	4d0d      	ldr	r5, [pc, #52]	; (800b784 <__libc_init_array+0x38>)
 800b750:	4c0d      	ldr	r4, [pc, #52]	; (800b788 <__libc_init_array+0x3c>)
 800b752:	1b64      	subs	r4, r4, r5
 800b754:	10a4      	asrs	r4, r4, #2
 800b756:	2600      	movs	r6, #0
 800b758:	42a6      	cmp	r6, r4
 800b75a:	d109      	bne.n	800b770 <__libc_init_array+0x24>
 800b75c:	4d0b      	ldr	r5, [pc, #44]	; (800b78c <__libc_init_array+0x40>)
 800b75e:	4c0c      	ldr	r4, [pc, #48]	; (800b790 <__libc_init_array+0x44>)
 800b760:	f002 f8cc 	bl	800d8fc <_init>
 800b764:	1b64      	subs	r4, r4, r5
 800b766:	10a4      	asrs	r4, r4, #2
 800b768:	2600      	movs	r6, #0
 800b76a:	42a6      	cmp	r6, r4
 800b76c:	d105      	bne.n	800b77a <__libc_init_array+0x2e>
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
 800b770:	f855 3b04 	ldr.w	r3, [r5], #4
 800b774:	4798      	blx	r3
 800b776:	3601      	adds	r6, #1
 800b778:	e7ee      	b.n	800b758 <__libc_init_array+0xc>
 800b77a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b77e:	4798      	blx	r3
 800b780:	3601      	adds	r6, #1
 800b782:	e7f2      	b.n	800b76a <__libc_init_array+0x1e>
 800b784:	0800e520 	.word	0x0800e520
 800b788:	0800e520 	.word	0x0800e520
 800b78c:	0800e520 	.word	0x0800e520
 800b790:	0800e524 	.word	0x0800e524

0800b794 <memcpy>:
 800b794:	440a      	add	r2, r1
 800b796:	4291      	cmp	r1, r2
 800b798:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b79c:	d100      	bne.n	800b7a0 <memcpy+0xc>
 800b79e:	4770      	bx	lr
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7aa:	4291      	cmp	r1, r2
 800b7ac:	d1f9      	bne.n	800b7a2 <memcpy+0xe>
 800b7ae:	bd10      	pop	{r4, pc}

0800b7b0 <memset>:
 800b7b0:	4402      	add	r2, r0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d100      	bne.n	800b7ba <memset+0xa>
 800b7b8:	4770      	bx	lr
 800b7ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b7be:	e7f9      	b.n	800b7b4 <memset+0x4>

0800b7c0 <siprintf>:
 800b7c0:	b40e      	push	{r1, r2, r3}
 800b7c2:	b500      	push	{lr}
 800b7c4:	b09c      	sub	sp, #112	; 0x70
 800b7c6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7c8:	9002      	str	r0, [sp, #8]
 800b7ca:	9006      	str	r0, [sp, #24]
 800b7cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7d0:	4809      	ldr	r0, [pc, #36]	; (800b7f8 <siprintf+0x38>)
 800b7d2:	9107      	str	r1, [sp, #28]
 800b7d4:	9104      	str	r1, [sp, #16]
 800b7d6:	4909      	ldr	r1, [pc, #36]	; (800b7fc <siprintf+0x3c>)
 800b7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7dc:	9105      	str	r1, [sp, #20]
 800b7de:	6800      	ldr	r0, [r0, #0]
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	a902      	add	r1, sp, #8
 800b7e4:	f000 f868 	bl	800b8b8 <_svfiprintf_r>
 800b7e8:	9b02      	ldr	r3, [sp, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	b01c      	add	sp, #112	; 0x70
 800b7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7f4:	b003      	add	sp, #12
 800b7f6:	4770      	bx	lr
 800b7f8:	20000010 	.word	0x20000010
 800b7fc:	ffff0208 	.word	0xffff0208

0800b800 <__ssputs_r>:
 800b800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b804:	688e      	ldr	r6, [r1, #8]
 800b806:	429e      	cmp	r6, r3
 800b808:	4682      	mov	sl, r0
 800b80a:	460c      	mov	r4, r1
 800b80c:	4690      	mov	r8, r2
 800b80e:	461f      	mov	r7, r3
 800b810:	d838      	bhi.n	800b884 <__ssputs_r+0x84>
 800b812:	898a      	ldrh	r2, [r1, #12]
 800b814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b818:	d032      	beq.n	800b880 <__ssputs_r+0x80>
 800b81a:	6825      	ldr	r5, [r4, #0]
 800b81c:	6909      	ldr	r1, [r1, #16]
 800b81e:	eba5 0901 	sub.w	r9, r5, r1
 800b822:	6965      	ldr	r5, [r4, #20]
 800b824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b82c:	3301      	adds	r3, #1
 800b82e:	444b      	add	r3, r9
 800b830:	106d      	asrs	r5, r5, #1
 800b832:	429d      	cmp	r5, r3
 800b834:	bf38      	it	cc
 800b836:	461d      	movcc	r5, r3
 800b838:	0553      	lsls	r3, r2, #21
 800b83a:	d531      	bpl.n	800b8a0 <__ssputs_r+0xa0>
 800b83c:	4629      	mov	r1, r5
 800b83e:	f000 fb39 	bl	800beb4 <_malloc_r>
 800b842:	4606      	mov	r6, r0
 800b844:	b950      	cbnz	r0, 800b85c <__ssputs_r+0x5c>
 800b846:	230c      	movs	r3, #12
 800b848:	f8ca 3000 	str.w	r3, [sl]
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b852:	81a3      	strh	r3, [r4, #12]
 800b854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85c:	6921      	ldr	r1, [r4, #16]
 800b85e:	464a      	mov	r2, r9
 800b860:	f7ff ff98 	bl	800b794 <memcpy>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b86e:	81a3      	strh	r3, [r4, #12]
 800b870:	6126      	str	r6, [r4, #16]
 800b872:	6165      	str	r5, [r4, #20]
 800b874:	444e      	add	r6, r9
 800b876:	eba5 0509 	sub.w	r5, r5, r9
 800b87a:	6026      	str	r6, [r4, #0]
 800b87c:	60a5      	str	r5, [r4, #8]
 800b87e:	463e      	mov	r6, r7
 800b880:	42be      	cmp	r6, r7
 800b882:	d900      	bls.n	800b886 <__ssputs_r+0x86>
 800b884:	463e      	mov	r6, r7
 800b886:	4632      	mov	r2, r6
 800b888:	6820      	ldr	r0, [r4, #0]
 800b88a:	4641      	mov	r1, r8
 800b88c:	f000 faa8 	bl	800bde0 <memmove>
 800b890:	68a3      	ldr	r3, [r4, #8]
 800b892:	6822      	ldr	r2, [r4, #0]
 800b894:	1b9b      	subs	r3, r3, r6
 800b896:	4432      	add	r2, r6
 800b898:	60a3      	str	r3, [r4, #8]
 800b89a:	6022      	str	r2, [r4, #0]
 800b89c:	2000      	movs	r0, #0
 800b89e:	e7db      	b.n	800b858 <__ssputs_r+0x58>
 800b8a0:	462a      	mov	r2, r5
 800b8a2:	f000 fb61 	bl	800bf68 <_realloc_r>
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d1e1      	bne.n	800b870 <__ssputs_r+0x70>
 800b8ac:	6921      	ldr	r1, [r4, #16]
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	f000 fab0 	bl	800be14 <_free_r>
 800b8b4:	e7c7      	b.n	800b846 <__ssputs_r+0x46>
	...

0800b8b8 <_svfiprintf_r>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	4698      	mov	r8, r3
 800b8be:	898b      	ldrh	r3, [r1, #12]
 800b8c0:	061b      	lsls	r3, r3, #24
 800b8c2:	b09d      	sub	sp, #116	; 0x74
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	d50e      	bpl.n	800b8ea <_svfiprintf_r+0x32>
 800b8cc:	690b      	ldr	r3, [r1, #16]
 800b8ce:	b963      	cbnz	r3, 800b8ea <_svfiprintf_r+0x32>
 800b8d0:	2140      	movs	r1, #64	; 0x40
 800b8d2:	f000 faef 	bl	800beb4 <_malloc_r>
 800b8d6:	6028      	str	r0, [r5, #0]
 800b8d8:	6128      	str	r0, [r5, #16]
 800b8da:	b920      	cbnz	r0, 800b8e6 <_svfiprintf_r+0x2e>
 800b8dc:	230c      	movs	r3, #12
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8e4:	e0d1      	b.n	800ba8a <_svfiprintf_r+0x1d2>
 800b8e6:	2340      	movs	r3, #64	; 0x40
 800b8e8:	616b      	str	r3, [r5, #20]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ee:	2320      	movs	r3, #32
 800b8f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8f8:	2330      	movs	r3, #48	; 0x30
 800b8fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800baa4 <_svfiprintf_r+0x1ec>
 800b8fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b902:	f04f 0901 	mov.w	r9, #1
 800b906:	4623      	mov	r3, r4
 800b908:	469a      	mov	sl, r3
 800b90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b90e:	b10a      	cbz	r2, 800b914 <_svfiprintf_r+0x5c>
 800b910:	2a25      	cmp	r2, #37	; 0x25
 800b912:	d1f9      	bne.n	800b908 <_svfiprintf_r+0x50>
 800b914:	ebba 0b04 	subs.w	fp, sl, r4
 800b918:	d00b      	beq.n	800b932 <_svfiprintf_r+0x7a>
 800b91a:	465b      	mov	r3, fp
 800b91c:	4622      	mov	r2, r4
 800b91e:	4629      	mov	r1, r5
 800b920:	4638      	mov	r0, r7
 800b922:	f7ff ff6d 	bl	800b800 <__ssputs_r>
 800b926:	3001      	adds	r0, #1
 800b928:	f000 80aa 	beq.w	800ba80 <_svfiprintf_r+0x1c8>
 800b92c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b92e:	445a      	add	r2, fp
 800b930:	9209      	str	r2, [sp, #36]	; 0x24
 800b932:	f89a 3000 	ldrb.w	r3, [sl]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 80a2 	beq.w	800ba80 <_svfiprintf_r+0x1c8>
 800b93c:	2300      	movs	r3, #0
 800b93e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b946:	f10a 0a01 	add.w	sl, sl, #1
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	9307      	str	r3, [sp, #28]
 800b94e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b952:	931a      	str	r3, [sp, #104]	; 0x68
 800b954:	4654      	mov	r4, sl
 800b956:	2205      	movs	r2, #5
 800b958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95c:	4851      	ldr	r0, [pc, #324]	; (800baa4 <_svfiprintf_r+0x1ec>)
 800b95e:	f7f4 fc3f 	bl	80001e0 <memchr>
 800b962:	9a04      	ldr	r2, [sp, #16]
 800b964:	b9d8      	cbnz	r0, 800b99e <_svfiprintf_r+0xe6>
 800b966:	06d0      	lsls	r0, r2, #27
 800b968:	bf44      	itt	mi
 800b96a:	2320      	movmi	r3, #32
 800b96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b970:	0711      	lsls	r1, r2, #28
 800b972:	bf44      	itt	mi
 800b974:	232b      	movmi	r3, #43	; 0x2b
 800b976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b97a:	f89a 3000 	ldrb.w	r3, [sl]
 800b97e:	2b2a      	cmp	r3, #42	; 0x2a
 800b980:	d015      	beq.n	800b9ae <_svfiprintf_r+0xf6>
 800b982:	9a07      	ldr	r2, [sp, #28]
 800b984:	4654      	mov	r4, sl
 800b986:	2000      	movs	r0, #0
 800b988:	f04f 0c0a 	mov.w	ip, #10
 800b98c:	4621      	mov	r1, r4
 800b98e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b992:	3b30      	subs	r3, #48	; 0x30
 800b994:	2b09      	cmp	r3, #9
 800b996:	d94e      	bls.n	800ba36 <_svfiprintf_r+0x17e>
 800b998:	b1b0      	cbz	r0, 800b9c8 <_svfiprintf_r+0x110>
 800b99a:	9207      	str	r2, [sp, #28]
 800b99c:	e014      	b.n	800b9c8 <_svfiprintf_r+0x110>
 800b99e:	eba0 0308 	sub.w	r3, r0, r8
 800b9a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	46a2      	mov	sl, r4
 800b9ac:	e7d2      	b.n	800b954 <_svfiprintf_r+0x9c>
 800b9ae:	9b03      	ldr	r3, [sp, #12]
 800b9b0:	1d19      	adds	r1, r3, #4
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	9103      	str	r1, [sp, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	bfbb      	ittet	lt
 800b9ba:	425b      	neglt	r3, r3
 800b9bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b9c0:	9307      	strge	r3, [sp, #28]
 800b9c2:	9307      	strlt	r3, [sp, #28]
 800b9c4:	bfb8      	it	lt
 800b9c6:	9204      	strlt	r2, [sp, #16]
 800b9c8:	7823      	ldrb	r3, [r4, #0]
 800b9ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b9cc:	d10c      	bne.n	800b9e8 <_svfiprintf_r+0x130>
 800b9ce:	7863      	ldrb	r3, [r4, #1]
 800b9d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9d2:	d135      	bne.n	800ba40 <_svfiprintf_r+0x188>
 800b9d4:	9b03      	ldr	r3, [sp, #12]
 800b9d6:	1d1a      	adds	r2, r3, #4
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	9203      	str	r2, [sp, #12]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	bfb8      	it	lt
 800b9e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9e4:	3402      	adds	r4, #2
 800b9e6:	9305      	str	r3, [sp, #20]
 800b9e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bab4 <_svfiprintf_r+0x1fc>
 800b9ec:	7821      	ldrb	r1, [r4, #0]
 800b9ee:	2203      	movs	r2, #3
 800b9f0:	4650      	mov	r0, sl
 800b9f2:	f7f4 fbf5 	bl	80001e0 <memchr>
 800b9f6:	b140      	cbz	r0, 800ba0a <_svfiprintf_r+0x152>
 800b9f8:	2340      	movs	r3, #64	; 0x40
 800b9fa:	eba0 000a 	sub.w	r0, r0, sl
 800b9fe:	fa03 f000 	lsl.w	r0, r3, r0
 800ba02:	9b04      	ldr	r3, [sp, #16]
 800ba04:	4303      	orrs	r3, r0
 800ba06:	3401      	adds	r4, #1
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0e:	4826      	ldr	r0, [pc, #152]	; (800baa8 <_svfiprintf_r+0x1f0>)
 800ba10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba14:	2206      	movs	r2, #6
 800ba16:	f7f4 fbe3 	bl	80001e0 <memchr>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d038      	beq.n	800ba90 <_svfiprintf_r+0x1d8>
 800ba1e:	4b23      	ldr	r3, [pc, #140]	; (800baac <_svfiprintf_r+0x1f4>)
 800ba20:	bb1b      	cbnz	r3, 800ba6a <_svfiprintf_r+0x1b2>
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	3307      	adds	r3, #7
 800ba26:	f023 0307 	bic.w	r3, r3, #7
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	9303      	str	r3, [sp, #12]
 800ba2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba30:	4433      	add	r3, r6
 800ba32:	9309      	str	r3, [sp, #36]	; 0x24
 800ba34:	e767      	b.n	800b906 <_svfiprintf_r+0x4e>
 800ba36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	e7a5      	b.n	800b98c <_svfiprintf_r+0xd4>
 800ba40:	2300      	movs	r3, #0
 800ba42:	3401      	adds	r4, #1
 800ba44:	9305      	str	r3, [sp, #20]
 800ba46:	4619      	mov	r1, r3
 800ba48:	f04f 0c0a 	mov.w	ip, #10
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba52:	3a30      	subs	r2, #48	; 0x30
 800ba54:	2a09      	cmp	r2, #9
 800ba56:	d903      	bls.n	800ba60 <_svfiprintf_r+0x1a8>
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0c5      	beq.n	800b9e8 <_svfiprintf_r+0x130>
 800ba5c:	9105      	str	r1, [sp, #20]
 800ba5e:	e7c3      	b.n	800b9e8 <_svfiprintf_r+0x130>
 800ba60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba64:	4604      	mov	r4, r0
 800ba66:	2301      	movs	r3, #1
 800ba68:	e7f0      	b.n	800ba4c <_svfiprintf_r+0x194>
 800ba6a:	ab03      	add	r3, sp, #12
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	462a      	mov	r2, r5
 800ba70:	4b0f      	ldr	r3, [pc, #60]	; (800bab0 <_svfiprintf_r+0x1f8>)
 800ba72:	a904      	add	r1, sp, #16
 800ba74:	4638      	mov	r0, r7
 800ba76:	f3af 8000 	nop.w
 800ba7a:	1c42      	adds	r2, r0, #1
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	d1d6      	bne.n	800ba2e <_svfiprintf_r+0x176>
 800ba80:	89ab      	ldrh	r3, [r5, #12]
 800ba82:	065b      	lsls	r3, r3, #25
 800ba84:	f53f af2c 	bmi.w	800b8e0 <_svfiprintf_r+0x28>
 800ba88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba8a:	b01d      	add	sp, #116	; 0x74
 800ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba90:	ab03      	add	r3, sp, #12
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	462a      	mov	r2, r5
 800ba96:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <_svfiprintf_r+0x1f8>)
 800ba98:	a904      	add	r1, sp, #16
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	f000 f87a 	bl	800bb94 <_printf_i>
 800baa0:	e7eb      	b.n	800ba7a <_svfiprintf_r+0x1c2>
 800baa2:	bf00      	nop
 800baa4:	0800e480 	.word	0x0800e480
 800baa8:	0800e48a 	.word	0x0800e48a
 800baac:	00000000 	.word	0x00000000
 800bab0:	0800b801 	.word	0x0800b801
 800bab4:	0800e486 	.word	0x0800e486

0800bab8 <_printf_common>:
 800bab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800babc:	4616      	mov	r6, r2
 800babe:	4699      	mov	r9, r3
 800bac0:	688a      	ldr	r2, [r1, #8]
 800bac2:	690b      	ldr	r3, [r1, #16]
 800bac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bac8:	4293      	cmp	r3, r2
 800baca:	bfb8      	it	lt
 800bacc:	4613      	movlt	r3, r2
 800bace:	6033      	str	r3, [r6, #0]
 800bad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bad4:	4607      	mov	r7, r0
 800bad6:	460c      	mov	r4, r1
 800bad8:	b10a      	cbz	r2, 800bade <_printf_common+0x26>
 800bada:	3301      	adds	r3, #1
 800badc:	6033      	str	r3, [r6, #0]
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	0699      	lsls	r1, r3, #26
 800bae2:	bf42      	ittt	mi
 800bae4:	6833      	ldrmi	r3, [r6, #0]
 800bae6:	3302      	addmi	r3, #2
 800bae8:	6033      	strmi	r3, [r6, #0]
 800baea:	6825      	ldr	r5, [r4, #0]
 800baec:	f015 0506 	ands.w	r5, r5, #6
 800baf0:	d106      	bne.n	800bb00 <_printf_common+0x48>
 800baf2:	f104 0a19 	add.w	sl, r4, #25
 800baf6:	68e3      	ldr	r3, [r4, #12]
 800baf8:	6832      	ldr	r2, [r6, #0]
 800bafa:	1a9b      	subs	r3, r3, r2
 800bafc:	42ab      	cmp	r3, r5
 800bafe:	dc26      	bgt.n	800bb4e <_printf_common+0x96>
 800bb00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb04:	1e13      	subs	r3, r2, #0
 800bb06:	6822      	ldr	r2, [r4, #0]
 800bb08:	bf18      	it	ne
 800bb0a:	2301      	movne	r3, #1
 800bb0c:	0692      	lsls	r2, r2, #26
 800bb0e:	d42b      	bmi.n	800bb68 <_printf_common+0xb0>
 800bb10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb14:	4649      	mov	r1, r9
 800bb16:	4638      	mov	r0, r7
 800bb18:	47c0      	blx	r8
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d01e      	beq.n	800bb5c <_printf_common+0xa4>
 800bb1e:	6823      	ldr	r3, [r4, #0]
 800bb20:	68e5      	ldr	r5, [r4, #12]
 800bb22:	6832      	ldr	r2, [r6, #0]
 800bb24:	f003 0306 	and.w	r3, r3, #6
 800bb28:	2b04      	cmp	r3, #4
 800bb2a:	bf08      	it	eq
 800bb2c:	1aad      	subeq	r5, r5, r2
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	6922      	ldr	r2, [r4, #16]
 800bb32:	bf0c      	ite	eq
 800bb34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb38:	2500      	movne	r5, #0
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	bfc4      	itt	gt
 800bb3e:	1a9b      	subgt	r3, r3, r2
 800bb40:	18ed      	addgt	r5, r5, r3
 800bb42:	2600      	movs	r6, #0
 800bb44:	341a      	adds	r4, #26
 800bb46:	42b5      	cmp	r5, r6
 800bb48:	d11a      	bne.n	800bb80 <_printf_common+0xc8>
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	e008      	b.n	800bb60 <_printf_common+0xa8>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	4652      	mov	r2, sl
 800bb52:	4649      	mov	r1, r9
 800bb54:	4638      	mov	r0, r7
 800bb56:	47c0      	blx	r8
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d103      	bne.n	800bb64 <_printf_common+0xac>
 800bb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb64:	3501      	adds	r5, #1
 800bb66:	e7c6      	b.n	800baf6 <_printf_common+0x3e>
 800bb68:	18e1      	adds	r1, r4, r3
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	2030      	movs	r0, #48	; 0x30
 800bb6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb72:	4422      	add	r2, r4
 800bb74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb7c:	3302      	adds	r3, #2
 800bb7e:	e7c7      	b.n	800bb10 <_printf_common+0x58>
 800bb80:	2301      	movs	r3, #1
 800bb82:	4622      	mov	r2, r4
 800bb84:	4649      	mov	r1, r9
 800bb86:	4638      	mov	r0, r7
 800bb88:	47c0      	blx	r8
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	d0e6      	beq.n	800bb5c <_printf_common+0xa4>
 800bb8e:	3601      	adds	r6, #1
 800bb90:	e7d9      	b.n	800bb46 <_printf_common+0x8e>
	...

0800bb94 <_printf_i>:
 800bb94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb98:	460c      	mov	r4, r1
 800bb9a:	4691      	mov	r9, r2
 800bb9c:	7e27      	ldrb	r7, [r4, #24]
 800bb9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bba0:	2f78      	cmp	r7, #120	; 0x78
 800bba2:	4680      	mov	r8, r0
 800bba4:	469a      	mov	sl, r3
 800bba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbaa:	d807      	bhi.n	800bbbc <_printf_i+0x28>
 800bbac:	2f62      	cmp	r7, #98	; 0x62
 800bbae:	d80a      	bhi.n	800bbc6 <_printf_i+0x32>
 800bbb0:	2f00      	cmp	r7, #0
 800bbb2:	f000 80d8 	beq.w	800bd66 <_printf_i+0x1d2>
 800bbb6:	2f58      	cmp	r7, #88	; 0x58
 800bbb8:	f000 80a3 	beq.w	800bd02 <_printf_i+0x16e>
 800bbbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbc4:	e03a      	b.n	800bc3c <_printf_i+0xa8>
 800bbc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbca:	2b15      	cmp	r3, #21
 800bbcc:	d8f6      	bhi.n	800bbbc <_printf_i+0x28>
 800bbce:	a001      	add	r0, pc, #4	; (adr r0, 800bbd4 <_printf_i+0x40>)
 800bbd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bbd4:	0800bc2d 	.word	0x0800bc2d
 800bbd8:	0800bc41 	.word	0x0800bc41
 800bbdc:	0800bbbd 	.word	0x0800bbbd
 800bbe0:	0800bbbd 	.word	0x0800bbbd
 800bbe4:	0800bbbd 	.word	0x0800bbbd
 800bbe8:	0800bbbd 	.word	0x0800bbbd
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bbbd 	.word	0x0800bbbd
 800bbf4:	0800bbbd 	.word	0x0800bbbd
 800bbf8:	0800bbbd 	.word	0x0800bbbd
 800bbfc:	0800bbbd 	.word	0x0800bbbd
 800bc00:	0800bd4d 	.word	0x0800bd4d
 800bc04:	0800bc71 	.word	0x0800bc71
 800bc08:	0800bd2f 	.word	0x0800bd2f
 800bc0c:	0800bbbd 	.word	0x0800bbbd
 800bc10:	0800bbbd 	.word	0x0800bbbd
 800bc14:	0800bd6f 	.word	0x0800bd6f
 800bc18:	0800bbbd 	.word	0x0800bbbd
 800bc1c:	0800bc71 	.word	0x0800bc71
 800bc20:	0800bbbd 	.word	0x0800bbbd
 800bc24:	0800bbbd 	.word	0x0800bbbd
 800bc28:	0800bd37 	.word	0x0800bd37
 800bc2c:	680b      	ldr	r3, [r1, #0]
 800bc2e:	1d1a      	adds	r2, r3, #4
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	600a      	str	r2, [r1, #0]
 800bc34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e0a3      	b.n	800bd88 <_printf_i+0x1f4>
 800bc40:	6825      	ldr	r5, [r4, #0]
 800bc42:	6808      	ldr	r0, [r1, #0]
 800bc44:	062e      	lsls	r6, r5, #24
 800bc46:	f100 0304 	add.w	r3, r0, #4
 800bc4a:	d50a      	bpl.n	800bc62 <_printf_i+0xce>
 800bc4c:	6805      	ldr	r5, [r0, #0]
 800bc4e:	600b      	str	r3, [r1, #0]
 800bc50:	2d00      	cmp	r5, #0
 800bc52:	da03      	bge.n	800bc5c <_printf_i+0xc8>
 800bc54:	232d      	movs	r3, #45	; 0x2d
 800bc56:	426d      	negs	r5, r5
 800bc58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc5c:	485e      	ldr	r0, [pc, #376]	; (800bdd8 <_printf_i+0x244>)
 800bc5e:	230a      	movs	r3, #10
 800bc60:	e019      	b.n	800bc96 <_printf_i+0x102>
 800bc62:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc66:	6805      	ldr	r5, [r0, #0]
 800bc68:	600b      	str	r3, [r1, #0]
 800bc6a:	bf18      	it	ne
 800bc6c:	b22d      	sxthne	r5, r5
 800bc6e:	e7ef      	b.n	800bc50 <_printf_i+0xbc>
 800bc70:	680b      	ldr	r3, [r1, #0]
 800bc72:	6825      	ldr	r5, [r4, #0]
 800bc74:	1d18      	adds	r0, r3, #4
 800bc76:	6008      	str	r0, [r1, #0]
 800bc78:	0628      	lsls	r0, r5, #24
 800bc7a:	d501      	bpl.n	800bc80 <_printf_i+0xec>
 800bc7c:	681d      	ldr	r5, [r3, #0]
 800bc7e:	e002      	b.n	800bc86 <_printf_i+0xf2>
 800bc80:	0669      	lsls	r1, r5, #25
 800bc82:	d5fb      	bpl.n	800bc7c <_printf_i+0xe8>
 800bc84:	881d      	ldrh	r5, [r3, #0]
 800bc86:	4854      	ldr	r0, [pc, #336]	; (800bdd8 <_printf_i+0x244>)
 800bc88:	2f6f      	cmp	r7, #111	; 0x6f
 800bc8a:	bf0c      	ite	eq
 800bc8c:	2308      	moveq	r3, #8
 800bc8e:	230a      	movne	r3, #10
 800bc90:	2100      	movs	r1, #0
 800bc92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc96:	6866      	ldr	r6, [r4, #4]
 800bc98:	60a6      	str	r6, [r4, #8]
 800bc9a:	2e00      	cmp	r6, #0
 800bc9c:	bfa2      	ittt	ge
 800bc9e:	6821      	ldrge	r1, [r4, #0]
 800bca0:	f021 0104 	bicge.w	r1, r1, #4
 800bca4:	6021      	strge	r1, [r4, #0]
 800bca6:	b90d      	cbnz	r5, 800bcac <_printf_i+0x118>
 800bca8:	2e00      	cmp	r6, #0
 800bcaa:	d04d      	beq.n	800bd48 <_printf_i+0x1b4>
 800bcac:	4616      	mov	r6, r2
 800bcae:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcb2:	fb03 5711 	mls	r7, r3, r1, r5
 800bcb6:	5dc7      	ldrb	r7, [r0, r7]
 800bcb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcbc:	462f      	mov	r7, r5
 800bcbe:	42bb      	cmp	r3, r7
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	d9f4      	bls.n	800bcae <_printf_i+0x11a>
 800bcc4:	2b08      	cmp	r3, #8
 800bcc6:	d10b      	bne.n	800bce0 <_printf_i+0x14c>
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	07df      	lsls	r7, r3, #31
 800bccc:	d508      	bpl.n	800bce0 <_printf_i+0x14c>
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	6861      	ldr	r1, [r4, #4]
 800bcd2:	4299      	cmp	r1, r3
 800bcd4:	bfde      	ittt	le
 800bcd6:	2330      	movle	r3, #48	; 0x30
 800bcd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bcdc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bce0:	1b92      	subs	r2, r2, r6
 800bce2:	6122      	str	r2, [r4, #16]
 800bce4:	f8cd a000 	str.w	sl, [sp]
 800bce8:	464b      	mov	r3, r9
 800bcea:	aa03      	add	r2, sp, #12
 800bcec:	4621      	mov	r1, r4
 800bcee:	4640      	mov	r0, r8
 800bcf0:	f7ff fee2 	bl	800bab8 <_printf_common>
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	d14c      	bne.n	800bd92 <_printf_i+0x1fe>
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcfc:	b004      	add	sp, #16
 800bcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd02:	4835      	ldr	r0, [pc, #212]	; (800bdd8 <_printf_i+0x244>)
 800bd04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	680e      	ldr	r6, [r1, #0]
 800bd0c:	061f      	lsls	r7, r3, #24
 800bd0e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd12:	600e      	str	r6, [r1, #0]
 800bd14:	d514      	bpl.n	800bd40 <_printf_i+0x1ac>
 800bd16:	07d9      	lsls	r1, r3, #31
 800bd18:	bf44      	itt	mi
 800bd1a:	f043 0320 	orrmi.w	r3, r3, #32
 800bd1e:	6023      	strmi	r3, [r4, #0]
 800bd20:	b91d      	cbnz	r5, 800bd2a <_printf_i+0x196>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	f023 0320 	bic.w	r3, r3, #32
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	2310      	movs	r3, #16
 800bd2c:	e7b0      	b.n	800bc90 <_printf_i+0xfc>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	f043 0320 	orr.w	r3, r3, #32
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	2378      	movs	r3, #120	; 0x78
 800bd38:	4828      	ldr	r0, [pc, #160]	; (800bddc <_printf_i+0x248>)
 800bd3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd3e:	e7e3      	b.n	800bd08 <_printf_i+0x174>
 800bd40:	065e      	lsls	r6, r3, #25
 800bd42:	bf48      	it	mi
 800bd44:	b2ad      	uxthmi	r5, r5
 800bd46:	e7e6      	b.n	800bd16 <_printf_i+0x182>
 800bd48:	4616      	mov	r6, r2
 800bd4a:	e7bb      	b.n	800bcc4 <_printf_i+0x130>
 800bd4c:	680b      	ldr	r3, [r1, #0]
 800bd4e:	6826      	ldr	r6, [r4, #0]
 800bd50:	6960      	ldr	r0, [r4, #20]
 800bd52:	1d1d      	adds	r5, r3, #4
 800bd54:	600d      	str	r5, [r1, #0]
 800bd56:	0635      	lsls	r5, r6, #24
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	d501      	bpl.n	800bd60 <_printf_i+0x1cc>
 800bd5c:	6018      	str	r0, [r3, #0]
 800bd5e:	e002      	b.n	800bd66 <_printf_i+0x1d2>
 800bd60:	0671      	lsls	r1, r6, #25
 800bd62:	d5fb      	bpl.n	800bd5c <_printf_i+0x1c8>
 800bd64:	8018      	strh	r0, [r3, #0]
 800bd66:	2300      	movs	r3, #0
 800bd68:	6123      	str	r3, [r4, #16]
 800bd6a:	4616      	mov	r6, r2
 800bd6c:	e7ba      	b.n	800bce4 <_printf_i+0x150>
 800bd6e:	680b      	ldr	r3, [r1, #0]
 800bd70:	1d1a      	adds	r2, r3, #4
 800bd72:	600a      	str	r2, [r1, #0]
 800bd74:	681e      	ldr	r6, [r3, #0]
 800bd76:	6862      	ldr	r2, [r4, #4]
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7f4 fa30 	bl	80001e0 <memchr>
 800bd80:	b108      	cbz	r0, 800bd86 <_printf_i+0x1f2>
 800bd82:	1b80      	subs	r0, r0, r6
 800bd84:	6060      	str	r0, [r4, #4]
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	6123      	str	r3, [r4, #16]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd90:	e7a8      	b.n	800bce4 <_printf_i+0x150>
 800bd92:	6923      	ldr	r3, [r4, #16]
 800bd94:	4632      	mov	r2, r6
 800bd96:	4649      	mov	r1, r9
 800bd98:	4640      	mov	r0, r8
 800bd9a:	47d0      	blx	sl
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d0ab      	beq.n	800bcf8 <_printf_i+0x164>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	079b      	lsls	r3, r3, #30
 800bda4:	d413      	bmi.n	800bdce <_printf_i+0x23a>
 800bda6:	68e0      	ldr	r0, [r4, #12]
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	4298      	cmp	r0, r3
 800bdac:	bfb8      	it	lt
 800bdae:	4618      	movlt	r0, r3
 800bdb0:	e7a4      	b.n	800bcfc <_printf_i+0x168>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	4640      	mov	r0, r8
 800bdba:	47d0      	blx	sl
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d09b      	beq.n	800bcf8 <_printf_i+0x164>
 800bdc0:	3501      	adds	r5, #1
 800bdc2:	68e3      	ldr	r3, [r4, #12]
 800bdc4:	9903      	ldr	r1, [sp, #12]
 800bdc6:	1a5b      	subs	r3, r3, r1
 800bdc8:	42ab      	cmp	r3, r5
 800bdca:	dcf2      	bgt.n	800bdb2 <_printf_i+0x21e>
 800bdcc:	e7eb      	b.n	800bda6 <_printf_i+0x212>
 800bdce:	2500      	movs	r5, #0
 800bdd0:	f104 0619 	add.w	r6, r4, #25
 800bdd4:	e7f5      	b.n	800bdc2 <_printf_i+0x22e>
 800bdd6:	bf00      	nop
 800bdd8:	0800e491 	.word	0x0800e491
 800bddc:	0800e4a2 	.word	0x0800e4a2

0800bde0 <memmove>:
 800bde0:	4288      	cmp	r0, r1
 800bde2:	b510      	push	{r4, lr}
 800bde4:	eb01 0402 	add.w	r4, r1, r2
 800bde8:	d902      	bls.n	800bdf0 <memmove+0x10>
 800bdea:	4284      	cmp	r4, r0
 800bdec:	4623      	mov	r3, r4
 800bdee:	d807      	bhi.n	800be00 <memmove+0x20>
 800bdf0:	1e43      	subs	r3, r0, #1
 800bdf2:	42a1      	cmp	r1, r4
 800bdf4:	d008      	beq.n	800be08 <memmove+0x28>
 800bdf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdfe:	e7f8      	b.n	800bdf2 <memmove+0x12>
 800be00:	4402      	add	r2, r0
 800be02:	4601      	mov	r1, r0
 800be04:	428a      	cmp	r2, r1
 800be06:	d100      	bne.n	800be0a <memmove+0x2a>
 800be08:	bd10      	pop	{r4, pc}
 800be0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be12:	e7f7      	b.n	800be04 <memmove+0x24>

0800be14 <_free_r>:
 800be14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be16:	2900      	cmp	r1, #0
 800be18:	d048      	beq.n	800beac <_free_r+0x98>
 800be1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1e:	9001      	str	r0, [sp, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f1a1 0404 	sub.w	r4, r1, #4
 800be26:	bfb8      	it	lt
 800be28:	18e4      	addlt	r4, r4, r3
 800be2a:	f000 f8d3 	bl	800bfd4 <__malloc_lock>
 800be2e:	4a20      	ldr	r2, [pc, #128]	; (800beb0 <_free_r+0x9c>)
 800be30:	9801      	ldr	r0, [sp, #4]
 800be32:	6813      	ldr	r3, [r2, #0]
 800be34:	4615      	mov	r5, r2
 800be36:	b933      	cbnz	r3, 800be46 <_free_r+0x32>
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	6014      	str	r4, [r2, #0]
 800be3c:	b003      	add	sp, #12
 800be3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be42:	f000 b8cd 	b.w	800bfe0 <__malloc_unlock>
 800be46:	42a3      	cmp	r3, r4
 800be48:	d90b      	bls.n	800be62 <_free_r+0x4e>
 800be4a:	6821      	ldr	r1, [r4, #0]
 800be4c:	1862      	adds	r2, r4, r1
 800be4e:	4293      	cmp	r3, r2
 800be50:	bf04      	itt	eq
 800be52:	681a      	ldreq	r2, [r3, #0]
 800be54:	685b      	ldreq	r3, [r3, #4]
 800be56:	6063      	str	r3, [r4, #4]
 800be58:	bf04      	itt	eq
 800be5a:	1852      	addeq	r2, r2, r1
 800be5c:	6022      	streq	r2, [r4, #0]
 800be5e:	602c      	str	r4, [r5, #0]
 800be60:	e7ec      	b.n	800be3c <_free_r+0x28>
 800be62:	461a      	mov	r2, r3
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	b10b      	cbz	r3, 800be6c <_free_r+0x58>
 800be68:	42a3      	cmp	r3, r4
 800be6a:	d9fa      	bls.n	800be62 <_free_r+0x4e>
 800be6c:	6811      	ldr	r1, [r2, #0]
 800be6e:	1855      	adds	r5, r2, r1
 800be70:	42a5      	cmp	r5, r4
 800be72:	d10b      	bne.n	800be8c <_free_r+0x78>
 800be74:	6824      	ldr	r4, [r4, #0]
 800be76:	4421      	add	r1, r4
 800be78:	1854      	adds	r4, r2, r1
 800be7a:	42a3      	cmp	r3, r4
 800be7c:	6011      	str	r1, [r2, #0]
 800be7e:	d1dd      	bne.n	800be3c <_free_r+0x28>
 800be80:	681c      	ldr	r4, [r3, #0]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	6053      	str	r3, [r2, #4]
 800be86:	4421      	add	r1, r4
 800be88:	6011      	str	r1, [r2, #0]
 800be8a:	e7d7      	b.n	800be3c <_free_r+0x28>
 800be8c:	d902      	bls.n	800be94 <_free_r+0x80>
 800be8e:	230c      	movs	r3, #12
 800be90:	6003      	str	r3, [r0, #0]
 800be92:	e7d3      	b.n	800be3c <_free_r+0x28>
 800be94:	6825      	ldr	r5, [r4, #0]
 800be96:	1961      	adds	r1, r4, r5
 800be98:	428b      	cmp	r3, r1
 800be9a:	bf04      	itt	eq
 800be9c:	6819      	ldreq	r1, [r3, #0]
 800be9e:	685b      	ldreq	r3, [r3, #4]
 800bea0:	6063      	str	r3, [r4, #4]
 800bea2:	bf04      	itt	eq
 800bea4:	1949      	addeq	r1, r1, r5
 800bea6:	6021      	streq	r1, [r4, #0]
 800bea8:	6054      	str	r4, [r2, #4]
 800beaa:	e7c7      	b.n	800be3c <_free_r+0x28>
 800beac:	b003      	add	sp, #12
 800beae:	bd30      	pop	{r4, r5, pc}
 800beb0:	200049f0 	.word	0x200049f0

0800beb4 <_malloc_r>:
 800beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb6:	1ccd      	adds	r5, r1, #3
 800beb8:	f025 0503 	bic.w	r5, r5, #3
 800bebc:	3508      	adds	r5, #8
 800bebe:	2d0c      	cmp	r5, #12
 800bec0:	bf38      	it	cc
 800bec2:	250c      	movcc	r5, #12
 800bec4:	2d00      	cmp	r5, #0
 800bec6:	4606      	mov	r6, r0
 800bec8:	db01      	blt.n	800bece <_malloc_r+0x1a>
 800beca:	42a9      	cmp	r1, r5
 800becc:	d903      	bls.n	800bed6 <_malloc_r+0x22>
 800bece:	230c      	movs	r3, #12
 800bed0:	6033      	str	r3, [r6, #0]
 800bed2:	2000      	movs	r0, #0
 800bed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed6:	f000 f87d 	bl	800bfd4 <__malloc_lock>
 800beda:	4921      	ldr	r1, [pc, #132]	; (800bf60 <_malloc_r+0xac>)
 800bedc:	680a      	ldr	r2, [r1, #0]
 800bede:	4614      	mov	r4, r2
 800bee0:	b99c      	cbnz	r4, 800bf0a <_malloc_r+0x56>
 800bee2:	4f20      	ldr	r7, [pc, #128]	; (800bf64 <_malloc_r+0xb0>)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	b923      	cbnz	r3, 800bef2 <_malloc_r+0x3e>
 800bee8:	4621      	mov	r1, r4
 800beea:	4630      	mov	r0, r6
 800beec:	f000 f862 	bl	800bfb4 <_sbrk_r>
 800bef0:	6038      	str	r0, [r7, #0]
 800bef2:	4629      	mov	r1, r5
 800bef4:	4630      	mov	r0, r6
 800bef6:	f000 f85d 	bl	800bfb4 <_sbrk_r>
 800befa:	1c43      	adds	r3, r0, #1
 800befc:	d123      	bne.n	800bf46 <_malloc_r+0x92>
 800befe:	230c      	movs	r3, #12
 800bf00:	6033      	str	r3, [r6, #0]
 800bf02:	4630      	mov	r0, r6
 800bf04:	f000 f86c 	bl	800bfe0 <__malloc_unlock>
 800bf08:	e7e3      	b.n	800bed2 <_malloc_r+0x1e>
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	1b5b      	subs	r3, r3, r5
 800bf0e:	d417      	bmi.n	800bf40 <_malloc_r+0x8c>
 800bf10:	2b0b      	cmp	r3, #11
 800bf12:	d903      	bls.n	800bf1c <_malloc_r+0x68>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	441c      	add	r4, r3
 800bf18:	6025      	str	r5, [r4, #0]
 800bf1a:	e004      	b.n	800bf26 <_malloc_r+0x72>
 800bf1c:	6863      	ldr	r3, [r4, #4]
 800bf1e:	42a2      	cmp	r2, r4
 800bf20:	bf0c      	ite	eq
 800bf22:	600b      	streq	r3, [r1, #0]
 800bf24:	6053      	strne	r3, [r2, #4]
 800bf26:	4630      	mov	r0, r6
 800bf28:	f000 f85a 	bl	800bfe0 <__malloc_unlock>
 800bf2c:	f104 000b 	add.w	r0, r4, #11
 800bf30:	1d23      	adds	r3, r4, #4
 800bf32:	f020 0007 	bic.w	r0, r0, #7
 800bf36:	1ac2      	subs	r2, r0, r3
 800bf38:	d0cc      	beq.n	800bed4 <_malloc_r+0x20>
 800bf3a:	1a1b      	subs	r3, r3, r0
 800bf3c:	50a3      	str	r3, [r4, r2]
 800bf3e:	e7c9      	b.n	800bed4 <_malloc_r+0x20>
 800bf40:	4622      	mov	r2, r4
 800bf42:	6864      	ldr	r4, [r4, #4]
 800bf44:	e7cc      	b.n	800bee0 <_malloc_r+0x2c>
 800bf46:	1cc4      	adds	r4, r0, #3
 800bf48:	f024 0403 	bic.w	r4, r4, #3
 800bf4c:	42a0      	cmp	r0, r4
 800bf4e:	d0e3      	beq.n	800bf18 <_malloc_r+0x64>
 800bf50:	1a21      	subs	r1, r4, r0
 800bf52:	4630      	mov	r0, r6
 800bf54:	f000 f82e 	bl	800bfb4 <_sbrk_r>
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d1dd      	bne.n	800bf18 <_malloc_r+0x64>
 800bf5c:	e7cf      	b.n	800befe <_malloc_r+0x4a>
 800bf5e:	bf00      	nop
 800bf60:	200049f0 	.word	0x200049f0
 800bf64:	200049f4 	.word	0x200049f4

0800bf68 <_realloc_r>:
 800bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6a:	4607      	mov	r7, r0
 800bf6c:	4614      	mov	r4, r2
 800bf6e:	460e      	mov	r6, r1
 800bf70:	b921      	cbnz	r1, 800bf7c <_realloc_r+0x14>
 800bf72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf76:	4611      	mov	r1, r2
 800bf78:	f7ff bf9c 	b.w	800beb4 <_malloc_r>
 800bf7c:	b922      	cbnz	r2, 800bf88 <_realloc_r+0x20>
 800bf7e:	f7ff ff49 	bl	800be14 <_free_r>
 800bf82:	4625      	mov	r5, r4
 800bf84:	4628      	mov	r0, r5
 800bf86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf88:	f000 f830 	bl	800bfec <_malloc_usable_size_r>
 800bf8c:	42a0      	cmp	r0, r4
 800bf8e:	d20f      	bcs.n	800bfb0 <_realloc_r+0x48>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4638      	mov	r0, r7
 800bf94:	f7ff ff8e 	bl	800beb4 <_malloc_r>
 800bf98:	4605      	mov	r5, r0
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d0f2      	beq.n	800bf84 <_realloc_r+0x1c>
 800bf9e:	4631      	mov	r1, r6
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	f7ff fbf7 	bl	800b794 <memcpy>
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	f7ff ff33 	bl	800be14 <_free_r>
 800bfae:	e7e9      	b.n	800bf84 <_realloc_r+0x1c>
 800bfb0:	4635      	mov	r5, r6
 800bfb2:	e7e7      	b.n	800bf84 <_realloc_r+0x1c>

0800bfb4 <_sbrk_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d06      	ldr	r5, [pc, #24]	; (800bfd0 <_sbrk_r+0x1c>)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f8 f8b0 	bl	8004124 <_sbrk>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_sbrk_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_sbrk_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20005150 	.word	0x20005150

0800bfd4 <__malloc_lock>:
 800bfd4:	4801      	ldr	r0, [pc, #4]	; (800bfdc <__malloc_lock+0x8>)
 800bfd6:	f000 b811 	b.w	800bffc <__retarget_lock_acquire_recursive>
 800bfda:	bf00      	nop
 800bfdc:	20005158 	.word	0x20005158

0800bfe0 <__malloc_unlock>:
 800bfe0:	4801      	ldr	r0, [pc, #4]	; (800bfe8 <__malloc_unlock+0x8>)
 800bfe2:	f000 b80c 	b.w	800bffe <__retarget_lock_release_recursive>
 800bfe6:	bf00      	nop
 800bfe8:	20005158 	.word	0x20005158

0800bfec <_malloc_usable_size_r>:
 800bfec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff0:	1f18      	subs	r0, r3, #4
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bfbc      	itt	lt
 800bff6:	580b      	ldrlt	r3, [r1, r0]
 800bff8:	18c0      	addlt	r0, r0, r3
 800bffa:	4770      	bx	lr

0800bffc <__retarget_lock_acquire_recursive>:
 800bffc:	4770      	bx	lr

0800bffe <__retarget_lock_release_recursive>:
 800bffe:	4770      	bx	lr

0800c000 <fmax>:
 800c000:	b508      	push	{r3, lr}
 800c002:	ed2d 8b04 	vpush	{d8-d9}
 800c006:	eeb0 8a40 	vmov.f32	s16, s0
 800c00a:	eef0 8a60 	vmov.f32	s17, s1
 800c00e:	eeb0 9a41 	vmov.f32	s18, s2
 800c012:	eef0 9a61 	vmov.f32	s19, s3
 800c016:	f000 f81b 	bl	800c050 <__fpclassifyd>
 800c01a:	b168      	cbz	r0, 800c038 <fmax+0x38>
 800c01c:	eeb0 0a49 	vmov.f32	s0, s18
 800c020:	eef0 0a69 	vmov.f32	s1, s19
 800c024:	f000 f814 	bl	800c050 <__fpclassifyd>
 800c028:	b150      	cbz	r0, 800c040 <fmax+0x40>
 800c02a:	ec53 2b19 	vmov	r2, r3, d9
 800c02e:	ec51 0b18 	vmov	r0, r1, d8
 800c032:	f7f4 fd71 	bl	8000b18 <__aeabi_dcmpgt>
 800c036:	b918      	cbnz	r0, 800c040 <fmax+0x40>
 800c038:	eeb0 8a49 	vmov.f32	s16, s18
 800c03c:	eef0 8a69 	vmov.f32	s17, s19
 800c040:	eeb0 0a48 	vmov.f32	s0, s16
 800c044:	eef0 0a68 	vmov.f32	s1, s17
 800c048:	ecbd 8b04 	vpop	{d8-d9}
 800c04c:	bd08      	pop	{r3, pc}
	...

0800c050 <__fpclassifyd>:
 800c050:	ec51 0b10 	vmov	r0, r1, d0
 800c054:	b510      	push	{r4, lr}
 800c056:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800c05a:	460b      	mov	r3, r1
 800c05c:	d019      	beq.n	800c092 <__fpclassifyd+0x42>
 800c05e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800c062:	490e      	ldr	r1, [pc, #56]	; (800c09c <__fpclassifyd+0x4c>)
 800c064:	428a      	cmp	r2, r1
 800c066:	d90e      	bls.n	800c086 <__fpclassifyd+0x36>
 800c068:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800c06c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800c070:	428a      	cmp	r2, r1
 800c072:	d908      	bls.n	800c086 <__fpclassifyd+0x36>
 800c074:	4a0a      	ldr	r2, [pc, #40]	; (800c0a0 <__fpclassifyd+0x50>)
 800c076:	4213      	tst	r3, r2
 800c078:	d007      	beq.n	800c08a <__fpclassifyd+0x3a>
 800c07a:	4294      	cmp	r4, r2
 800c07c:	d107      	bne.n	800c08e <__fpclassifyd+0x3e>
 800c07e:	fab0 f080 	clz	r0, r0
 800c082:	0940      	lsrs	r0, r0, #5
 800c084:	bd10      	pop	{r4, pc}
 800c086:	2004      	movs	r0, #4
 800c088:	e7fc      	b.n	800c084 <__fpclassifyd+0x34>
 800c08a:	2003      	movs	r0, #3
 800c08c:	e7fa      	b.n	800c084 <__fpclassifyd+0x34>
 800c08e:	2000      	movs	r0, #0
 800c090:	e7f8      	b.n	800c084 <__fpclassifyd+0x34>
 800c092:	2800      	cmp	r0, #0
 800c094:	d1ee      	bne.n	800c074 <__fpclassifyd+0x24>
 800c096:	2002      	movs	r0, #2
 800c098:	e7f4      	b.n	800c084 <__fpclassifyd+0x34>
 800c09a:	bf00      	nop
 800c09c:	7fdfffff 	.word	0x7fdfffff
 800c0a0:	7ff00000 	.word	0x7ff00000

0800c0a4 <pow>:
 800c0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a8:	ec59 8b10 	vmov	r8, r9, d0
 800c0ac:	ec57 6b11 	vmov	r6, r7, d1
 800c0b0:	f000 f972 	bl	800c398 <__ieee754_pow>
 800c0b4:	4b4e      	ldr	r3, [pc, #312]	; (800c1f0 <pow+0x14c>)
 800c0b6:	f993 3000 	ldrsb.w	r3, [r3]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	ec55 4b10 	vmov	r4, r5, d0
 800c0c0:	d015      	beq.n	800c0ee <pow+0x4a>
 800c0c2:	4632      	mov	r2, r6
 800c0c4:	463b      	mov	r3, r7
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	f7f4 fd2f 	bl	8000b2c <__aeabi_dcmpun>
 800c0ce:	b970      	cbnz	r0, 800c0ee <pow+0x4a>
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	f7f4 fd28 	bl	8000b2c <__aeabi_dcmpun>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2300      	movs	r3, #0
 800c0e0:	b148      	cbz	r0, 800c0f6 <pow+0x52>
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	4639      	mov	r1, r7
 800c0e6:	f7f4 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d17d      	bne.n	800c1ea <pow+0x146>
 800c0ee:	ec45 4b10 	vmov	d0, r4, r5
 800c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	f7f4 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0fe:	b1e0      	cbz	r0, 800c13a <pow+0x96>
 800c100:	2200      	movs	r2, #0
 800c102:	2300      	movs	r3, #0
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	f7f4 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d16c      	bne.n	800c1ea <pow+0x146>
 800c110:	ec47 6b10 	vmov	d0, r6, r7
 800c114:	f001 f9e2 	bl	800d4dc <finite>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d0e8      	beq.n	800c0ee <pow+0x4a>
 800c11c:	2200      	movs	r2, #0
 800c11e:	2300      	movs	r3, #0
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 fcda 	bl	8000adc <__aeabi_dcmplt>
 800c128:	2800      	cmp	r0, #0
 800c12a:	d0e0      	beq.n	800c0ee <pow+0x4a>
 800c12c:	f7ff fb08 	bl	800b740 <__errno>
 800c130:	2321      	movs	r3, #33	; 0x21
 800c132:	6003      	str	r3, [r0, #0]
 800c134:	2400      	movs	r4, #0
 800c136:	4d2f      	ldr	r5, [pc, #188]	; (800c1f4 <pow+0x150>)
 800c138:	e7d9      	b.n	800c0ee <pow+0x4a>
 800c13a:	ec45 4b10 	vmov	d0, r4, r5
 800c13e:	f001 f9cd 	bl	800d4dc <finite>
 800c142:	bbb8      	cbnz	r0, 800c1b4 <pow+0x110>
 800c144:	ec49 8b10 	vmov	d0, r8, r9
 800c148:	f001 f9c8 	bl	800d4dc <finite>
 800c14c:	b390      	cbz	r0, 800c1b4 <pow+0x110>
 800c14e:	ec47 6b10 	vmov	d0, r6, r7
 800c152:	f001 f9c3 	bl	800d4dc <finite>
 800c156:	b368      	cbz	r0, 800c1b4 <pow+0x110>
 800c158:	4622      	mov	r2, r4
 800c15a:	462b      	mov	r3, r5
 800c15c:	4620      	mov	r0, r4
 800c15e:	4629      	mov	r1, r5
 800c160:	f7f4 fce4 	bl	8000b2c <__aeabi_dcmpun>
 800c164:	b160      	cbz	r0, 800c180 <pow+0xdc>
 800c166:	f7ff faeb 	bl	800b740 <__errno>
 800c16a:	2321      	movs	r3, #33	; 0x21
 800c16c:	6003      	str	r3, [r0, #0]
 800c16e:	2200      	movs	r2, #0
 800c170:	2300      	movs	r3, #0
 800c172:	4610      	mov	r0, r2
 800c174:	4619      	mov	r1, r3
 800c176:	f7f4 fb69 	bl	800084c <__aeabi_ddiv>
 800c17a:	4604      	mov	r4, r0
 800c17c:	460d      	mov	r5, r1
 800c17e:	e7b6      	b.n	800c0ee <pow+0x4a>
 800c180:	f7ff fade 	bl	800b740 <__errno>
 800c184:	2322      	movs	r3, #34	; 0x22
 800c186:	6003      	str	r3, [r0, #0]
 800c188:	2200      	movs	r2, #0
 800c18a:	2300      	movs	r3, #0
 800c18c:	4640      	mov	r0, r8
 800c18e:	4649      	mov	r1, r9
 800c190:	f7f4 fca4 	bl	8000adc <__aeabi_dcmplt>
 800c194:	2400      	movs	r4, #0
 800c196:	b158      	cbz	r0, 800c1b0 <pow+0x10c>
 800c198:	ec47 6b10 	vmov	d0, r6, r7
 800c19c:	f001 f9b4 	bl	800d508 <rint>
 800c1a0:	4632      	mov	r2, r6
 800c1a2:	ec51 0b10 	vmov	r0, r1, d0
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	f7f4 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d0c2      	beq.n	800c136 <pow+0x92>
 800c1b0:	4d11      	ldr	r5, [pc, #68]	; (800c1f8 <pow+0x154>)
 800c1b2:	e79c      	b.n	800c0ee <pow+0x4a>
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	f7f4 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d094      	beq.n	800c0ee <pow+0x4a>
 800c1c4:	ec49 8b10 	vmov	d0, r8, r9
 800c1c8:	f001 f988 	bl	800d4dc <finite>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d08e      	beq.n	800c0ee <pow+0x4a>
 800c1d0:	ec47 6b10 	vmov	d0, r6, r7
 800c1d4:	f001 f982 	bl	800d4dc <finite>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d088      	beq.n	800c0ee <pow+0x4a>
 800c1dc:	f7ff fab0 	bl	800b740 <__errno>
 800c1e0:	2322      	movs	r3, #34	; 0x22
 800c1e2:	6003      	str	r3, [r0, #0]
 800c1e4:	2400      	movs	r4, #0
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	e781      	b.n	800c0ee <pow+0x4a>
 800c1ea:	4d04      	ldr	r5, [pc, #16]	; (800c1fc <pow+0x158>)
 800c1ec:	2400      	movs	r4, #0
 800c1ee:	e77e      	b.n	800c0ee <pow+0x4a>
 800c1f0:	20000074 	.word	0x20000074
 800c1f4:	fff00000 	.word	0xfff00000
 800c1f8:	7ff00000 	.word	0x7ff00000
 800c1fc:	3ff00000 	.word	0x3ff00000

0800c200 <sqrt>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	ed2d 8b02 	vpush	{d8}
 800c206:	ec55 4b10 	vmov	r4, r5, d0
 800c20a:	f000 fde7 	bl	800cddc <__ieee754_sqrt>
 800c20e:	4b15      	ldr	r3, [pc, #84]	; (800c264 <sqrt+0x64>)
 800c210:	eeb0 8a40 	vmov.f32	s16, s0
 800c214:	eef0 8a60 	vmov.f32	s17, s1
 800c218:	f993 3000 	ldrsb.w	r3, [r3]
 800c21c:	3301      	adds	r3, #1
 800c21e:	d019      	beq.n	800c254 <sqrt+0x54>
 800c220:	4622      	mov	r2, r4
 800c222:	462b      	mov	r3, r5
 800c224:	4620      	mov	r0, r4
 800c226:	4629      	mov	r1, r5
 800c228:	f7f4 fc80 	bl	8000b2c <__aeabi_dcmpun>
 800c22c:	b990      	cbnz	r0, 800c254 <sqrt+0x54>
 800c22e:	2200      	movs	r2, #0
 800c230:	2300      	movs	r3, #0
 800c232:	4620      	mov	r0, r4
 800c234:	4629      	mov	r1, r5
 800c236:	f7f4 fc51 	bl	8000adc <__aeabi_dcmplt>
 800c23a:	b158      	cbz	r0, 800c254 <sqrt+0x54>
 800c23c:	f7ff fa80 	bl	800b740 <__errno>
 800c240:	2321      	movs	r3, #33	; 0x21
 800c242:	6003      	str	r3, [r0, #0]
 800c244:	2200      	movs	r2, #0
 800c246:	2300      	movs	r3, #0
 800c248:	4610      	mov	r0, r2
 800c24a:	4619      	mov	r1, r3
 800c24c:	f7f4 fafe 	bl	800084c <__aeabi_ddiv>
 800c250:	ec41 0b18 	vmov	d8, r0, r1
 800c254:	eeb0 0a48 	vmov.f32	s0, s16
 800c258:	eef0 0a68 	vmov.f32	s1, s17
 800c25c:	ecbd 8b02 	vpop	{d8}
 800c260:	bd38      	pop	{r3, r4, r5, pc}
 800c262:	bf00      	nop
 800c264:	20000074 	.word	0x20000074

0800c268 <powf>:
 800c268:	b508      	push	{r3, lr}
 800c26a:	ed2d 8b04 	vpush	{d8-d9}
 800c26e:	eeb0 9a40 	vmov.f32	s18, s0
 800c272:	eef0 8a60 	vmov.f32	s17, s1
 800c276:	f000 fe65 	bl	800cf44 <__ieee754_powf>
 800c27a:	4b43      	ldr	r3, [pc, #268]	; (800c388 <powf+0x120>)
 800c27c:	f993 3000 	ldrsb.w	r3, [r3]
 800c280:	3301      	adds	r3, #1
 800c282:	eeb0 8a40 	vmov.f32	s16, s0
 800c286:	d012      	beq.n	800c2ae <powf+0x46>
 800c288:	eef4 8a68 	vcmp.f32	s17, s17
 800c28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c290:	d60d      	bvs.n	800c2ae <powf+0x46>
 800c292:	eeb4 9a49 	vcmp.f32	s18, s18
 800c296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c29a:	d70d      	bvc.n	800c2b8 <powf+0x50>
 800c29c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c2a8:	bf08      	it	eq
 800c2aa:	eeb0 8a67 	vmoveq.f32	s16, s15
 800c2ae:	eeb0 0a48 	vmov.f32	s0, s16
 800c2b2:	ecbd 8b04 	vpop	{d8-d9}
 800c2b6:	bd08      	pop	{r3, pc}
 800c2b8:	eddf 9a34 	vldr	s19, [pc, #208]	; 800c38c <powf+0x124>
 800c2bc:	eeb4 9a69 	vcmp.f32	s18, s19
 800c2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c4:	d116      	bne.n	800c2f4 <powf+0x8c>
 800c2c6:	eef4 8a69 	vcmp.f32	s17, s19
 800c2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ce:	d057      	beq.n	800c380 <powf+0x118>
 800c2d0:	eeb0 0a68 	vmov.f32	s0, s17
 800c2d4:	f001 fa31 	bl	800d73a <finitef>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d0e8      	beq.n	800c2ae <powf+0x46>
 800c2dc:	eef4 8ae9 	vcmpe.f32	s17, s19
 800c2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e4:	d5e3      	bpl.n	800c2ae <powf+0x46>
 800c2e6:	f7ff fa2b 	bl	800b740 <__errno>
 800c2ea:	2321      	movs	r3, #33	; 0x21
 800c2ec:	6003      	str	r3, [r0, #0]
 800c2ee:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800c390 <powf+0x128>
 800c2f2:	e7dc      	b.n	800c2ae <powf+0x46>
 800c2f4:	f001 fa21 	bl	800d73a <finitef>
 800c2f8:	bb50      	cbnz	r0, 800c350 <powf+0xe8>
 800c2fa:	eeb0 0a49 	vmov.f32	s0, s18
 800c2fe:	f001 fa1c 	bl	800d73a <finitef>
 800c302:	b328      	cbz	r0, 800c350 <powf+0xe8>
 800c304:	eeb0 0a68 	vmov.f32	s0, s17
 800c308:	f001 fa17 	bl	800d73a <finitef>
 800c30c:	b300      	cbz	r0, 800c350 <powf+0xe8>
 800c30e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c316:	d706      	bvc.n	800c326 <powf+0xbe>
 800c318:	f7ff fa12 	bl	800b740 <__errno>
 800c31c:	2321      	movs	r3, #33	; 0x21
 800c31e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800c322:	6003      	str	r3, [r0, #0]
 800c324:	e7c3      	b.n	800c2ae <powf+0x46>
 800c326:	f7ff fa0b 	bl	800b740 <__errno>
 800c32a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800c32e:	2322      	movs	r3, #34	; 0x22
 800c330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c334:	6003      	str	r3, [r0, #0]
 800c336:	d508      	bpl.n	800c34a <powf+0xe2>
 800c338:	eeb0 0a68 	vmov.f32	s0, s17
 800c33c:	f001 fa10 	bl	800d760 <rintf>
 800c340:	eeb4 0a68 	vcmp.f32	s0, s17
 800c344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c348:	d1d1      	bne.n	800c2ee <powf+0x86>
 800c34a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800c394 <powf+0x12c>
 800c34e:	e7ae      	b.n	800c2ae <powf+0x46>
 800c350:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c358:	d1a9      	bne.n	800c2ae <powf+0x46>
 800c35a:	eeb0 0a49 	vmov.f32	s0, s18
 800c35e:	f001 f9ec 	bl	800d73a <finitef>
 800c362:	2800      	cmp	r0, #0
 800c364:	d0a3      	beq.n	800c2ae <powf+0x46>
 800c366:	eeb0 0a68 	vmov.f32	s0, s17
 800c36a:	f001 f9e6 	bl	800d73a <finitef>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d09d      	beq.n	800c2ae <powf+0x46>
 800c372:	f7ff f9e5 	bl	800b740 <__errno>
 800c376:	2322      	movs	r3, #34	; 0x22
 800c378:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800c38c <powf+0x124>
 800c37c:	6003      	str	r3, [r0, #0]
 800c37e:	e796      	b.n	800c2ae <powf+0x46>
 800c380:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c384:	e793      	b.n	800c2ae <powf+0x46>
 800c386:	bf00      	nop
 800c388:	20000074 	.word	0x20000074
 800c38c:	00000000 	.word	0x00000000
 800c390:	ff800000 	.word	0xff800000
 800c394:	7f800000 	.word	0x7f800000

0800c398 <__ieee754_pow>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	ed2d 8b06 	vpush	{d8-d10}
 800c3a0:	b08d      	sub	sp, #52	; 0x34
 800c3a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c3a6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c3aa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c3ae:	ea56 0100 	orrs.w	r1, r6, r0
 800c3b2:	ec53 2b10 	vmov	r2, r3, d0
 800c3b6:	f000 84d1 	beq.w	800cd5c <__ieee754_pow+0x9c4>
 800c3ba:	497f      	ldr	r1, [pc, #508]	; (800c5b8 <__ieee754_pow+0x220>)
 800c3bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c3c0:	428c      	cmp	r4, r1
 800c3c2:	ee10 8a10 	vmov	r8, s0
 800c3c6:	4699      	mov	r9, r3
 800c3c8:	dc09      	bgt.n	800c3de <__ieee754_pow+0x46>
 800c3ca:	d103      	bne.n	800c3d4 <__ieee754_pow+0x3c>
 800c3cc:	b97a      	cbnz	r2, 800c3ee <__ieee754_pow+0x56>
 800c3ce:	42a6      	cmp	r6, r4
 800c3d0:	dd02      	ble.n	800c3d8 <__ieee754_pow+0x40>
 800c3d2:	e00c      	b.n	800c3ee <__ieee754_pow+0x56>
 800c3d4:	428e      	cmp	r6, r1
 800c3d6:	dc02      	bgt.n	800c3de <__ieee754_pow+0x46>
 800c3d8:	428e      	cmp	r6, r1
 800c3da:	d110      	bne.n	800c3fe <__ieee754_pow+0x66>
 800c3dc:	b178      	cbz	r0, 800c3fe <__ieee754_pow+0x66>
 800c3de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c3e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c3e6:	ea54 0308 	orrs.w	r3, r4, r8
 800c3ea:	f000 84b7 	beq.w	800cd5c <__ieee754_pow+0x9c4>
 800c3ee:	4873      	ldr	r0, [pc, #460]	; (800c5bc <__ieee754_pow+0x224>)
 800c3f0:	b00d      	add	sp, #52	; 0x34
 800c3f2:	ecbd 8b06 	vpop	{d8-d10}
 800c3f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fa:	f001 b87d 	b.w	800d4f8 <nan>
 800c3fe:	f1b9 0f00 	cmp.w	r9, #0
 800c402:	da36      	bge.n	800c472 <__ieee754_pow+0xda>
 800c404:	496e      	ldr	r1, [pc, #440]	; (800c5c0 <__ieee754_pow+0x228>)
 800c406:	428e      	cmp	r6, r1
 800c408:	dc51      	bgt.n	800c4ae <__ieee754_pow+0x116>
 800c40a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c40e:	428e      	cmp	r6, r1
 800c410:	f340 84af 	ble.w	800cd72 <__ieee754_pow+0x9da>
 800c414:	1531      	asrs	r1, r6, #20
 800c416:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c41a:	2914      	cmp	r1, #20
 800c41c:	dd0f      	ble.n	800c43e <__ieee754_pow+0xa6>
 800c41e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c422:	fa20 fc01 	lsr.w	ip, r0, r1
 800c426:	fa0c f101 	lsl.w	r1, ip, r1
 800c42a:	4281      	cmp	r1, r0
 800c42c:	f040 84a1 	bne.w	800cd72 <__ieee754_pow+0x9da>
 800c430:	f00c 0c01 	and.w	ip, ip, #1
 800c434:	f1cc 0102 	rsb	r1, ip, #2
 800c438:	9100      	str	r1, [sp, #0]
 800c43a:	b180      	cbz	r0, 800c45e <__ieee754_pow+0xc6>
 800c43c:	e059      	b.n	800c4f2 <__ieee754_pow+0x15a>
 800c43e:	2800      	cmp	r0, #0
 800c440:	d155      	bne.n	800c4ee <__ieee754_pow+0x156>
 800c442:	f1c1 0114 	rsb	r1, r1, #20
 800c446:	fa46 fc01 	asr.w	ip, r6, r1
 800c44a:	fa0c f101 	lsl.w	r1, ip, r1
 800c44e:	42b1      	cmp	r1, r6
 800c450:	f040 848c 	bne.w	800cd6c <__ieee754_pow+0x9d4>
 800c454:	f00c 0c01 	and.w	ip, ip, #1
 800c458:	f1cc 0102 	rsb	r1, ip, #2
 800c45c:	9100      	str	r1, [sp, #0]
 800c45e:	4959      	ldr	r1, [pc, #356]	; (800c5c4 <__ieee754_pow+0x22c>)
 800c460:	428e      	cmp	r6, r1
 800c462:	d12d      	bne.n	800c4c0 <__ieee754_pow+0x128>
 800c464:	2f00      	cmp	r7, #0
 800c466:	da79      	bge.n	800c55c <__ieee754_pow+0x1c4>
 800c468:	4956      	ldr	r1, [pc, #344]	; (800c5c4 <__ieee754_pow+0x22c>)
 800c46a:	2000      	movs	r0, #0
 800c46c:	f7f4 f9ee 	bl	800084c <__aeabi_ddiv>
 800c470:	e016      	b.n	800c4a0 <__ieee754_pow+0x108>
 800c472:	2100      	movs	r1, #0
 800c474:	9100      	str	r1, [sp, #0]
 800c476:	2800      	cmp	r0, #0
 800c478:	d13b      	bne.n	800c4f2 <__ieee754_pow+0x15a>
 800c47a:	494f      	ldr	r1, [pc, #316]	; (800c5b8 <__ieee754_pow+0x220>)
 800c47c:	428e      	cmp	r6, r1
 800c47e:	d1ee      	bne.n	800c45e <__ieee754_pow+0xc6>
 800c480:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c484:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c488:	ea53 0308 	orrs.w	r3, r3, r8
 800c48c:	f000 8466 	beq.w	800cd5c <__ieee754_pow+0x9c4>
 800c490:	4b4d      	ldr	r3, [pc, #308]	; (800c5c8 <__ieee754_pow+0x230>)
 800c492:	429c      	cmp	r4, r3
 800c494:	dd0d      	ble.n	800c4b2 <__ieee754_pow+0x11a>
 800c496:	2f00      	cmp	r7, #0
 800c498:	f280 8464 	bge.w	800cd64 <__ieee754_pow+0x9cc>
 800c49c:	2000      	movs	r0, #0
 800c49e:	2100      	movs	r1, #0
 800c4a0:	ec41 0b10 	vmov	d0, r0, r1
 800c4a4:	b00d      	add	sp, #52	; 0x34
 800c4a6:	ecbd 8b06 	vpop	{d8-d10}
 800c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ae:	2102      	movs	r1, #2
 800c4b0:	e7e0      	b.n	800c474 <__ieee754_pow+0xdc>
 800c4b2:	2f00      	cmp	r7, #0
 800c4b4:	daf2      	bge.n	800c49c <__ieee754_pow+0x104>
 800c4b6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c4ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c4be:	e7ef      	b.n	800c4a0 <__ieee754_pow+0x108>
 800c4c0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c4c4:	d104      	bne.n	800c4d0 <__ieee754_pow+0x138>
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	f7f4 f895 	bl	80005f8 <__aeabi_dmul>
 800c4ce:	e7e7      	b.n	800c4a0 <__ieee754_pow+0x108>
 800c4d0:	493e      	ldr	r1, [pc, #248]	; (800c5cc <__ieee754_pow+0x234>)
 800c4d2:	428f      	cmp	r7, r1
 800c4d4:	d10d      	bne.n	800c4f2 <__ieee754_pow+0x15a>
 800c4d6:	f1b9 0f00 	cmp.w	r9, #0
 800c4da:	db0a      	blt.n	800c4f2 <__ieee754_pow+0x15a>
 800c4dc:	ec43 2b10 	vmov	d0, r2, r3
 800c4e0:	b00d      	add	sp, #52	; 0x34
 800c4e2:	ecbd 8b06 	vpop	{d8-d10}
 800c4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f000 bc77 	b.w	800cddc <__ieee754_sqrt>
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	9100      	str	r1, [sp, #0]
 800c4f2:	ec43 2b10 	vmov	d0, r2, r3
 800c4f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4fa:	f000 ffe6 	bl	800d4ca <fabs>
 800c4fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c502:	ec51 0b10 	vmov	r0, r1, d0
 800c506:	f1b8 0f00 	cmp.w	r8, #0
 800c50a:	d12a      	bne.n	800c562 <__ieee754_pow+0x1ca>
 800c50c:	b12c      	cbz	r4, 800c51a <__ieee754_pow+0x182>
 800c50e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c5c4 <__ieee754_pow+0x22c>
 800c512:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c516:	45e6      	cmp	lr, ip
 800c518:	d123      	bne.n	800c562 <__ieee754_pow+0x1ca>
 800c51a:	2f00      	cmp	r7, #0
 800c51c:	da05      	bge.n	800c52a <__ieee754_pow+0x192>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	2000      	movs	r0, #0
 800c524:	4927      	ldr	r1, [pc, #156]	; (800c5c4 <__ieee754_pow+0x22c>)
 800c526:	f7f4 f991 	bl	800084c <__aeabi_ddiv>
 800c52a:	f1b9 0f00 	cmp.w	r9, #0
 800c52e:	dab7      	bge.n	800c4a0 <__ieee754_pow+0x108>
 800c530:	9b00      	ldr	r3, [sp, #0]
 800c532:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c536:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c53a:	4323      	orrs	r3, r4
 800c53c:	d108      	bne.n	800c550 <__ieee754_pow+0x1b8>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4610      	mov	r0, r2
 800c544:	4619      	mov	r1, r3
 800c546:	f7f3 fe9f 	bl	8000288 <__aeabi_dsub>
 800c54a:	4602      	mov	r2, r0
 800c54c:	460b      	mov	r3, r1
 800c54e:	e78d      	b.n	800c46c <__ieee754_pow+0xd4>
 800c550:	9b00      	ldr	r3, [sp, #0]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d1a4      	bne.n	800c4a0 <__ieee754_pow+0x108>
 800c556:	4602      	mov	r2, r0
 800c558:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c55c:	4610      	mov	r0, r2
 800c55e:	4619      	mov	r1, r3
 800c560:	e79e      	b.n	800c4a0 <__ieee754_pow+0x108>
 800c562:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c566:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800c56a:	950a      	str	r5, [sp, #40]	; 0x28
 800c56c:	9d00      	ldr	r5, [sp, #0]
 800c56e:	46ac      	mov	ip, r5
 800c570:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c572:	ea5c 0505 	orrs.w	r5, ip, r5
 800c576:	d0e4      	beq.n	800c542 <__ieee754_pow+0x1aa>
 800c578:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <__ieee754_pow+0x238>)
 800c57a:	429e      	cmp	r6, r3
 800c57c:	f340 80fc 	ble.w	800c778 <__ieee754_pow+0x3e0>
 800c580:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c584:	429e      	cmp	r6, r3
 800c586:	4b10      	ldr	r3, [pc, #64]	; (800c5c8 <__ieee754_pow+0x230>)
 800c588:	dd07      	ble.n	800c59a <__ieee754_pow+0x202>
 800c58a:	429c      	cmp	r4, r3
 800c58c:	dc0a      	bgt.n	800c5a4 <__ieee754_pow+0x20c>
 800c58e:	2f00      	cmp	r7, #0
 800c590:	da84      	bge.n	800c49c <__ieee754_pow+0x104>
 800c592:	a307      	add	r3, pc, #28	; (adr r3, 800c5b0 <__ieee754_pow+0x218>)
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	e795      	b.n	800c4c6 <__ieee754_pow+0x12e>
 800c59a:	429c      	cmp	r4, r3
 800c59c:	dbf7      	blt.n	800c58e <__ieee754_pow+0x1f6>
 800c59e:	4b09      	ldr	r3, [pc, #36]	; (800c5c4 <__ieee754_pow+0x22c>)
 800c5a0:	429c      	cmp	r4, r3
 800c5a2:	dd17      	ble.n	800c5d4 <__ieee754_pow+0x23c>
 800c5a4:	2f00      	cmp	r7, #0
 800c5a6:	dcf4      	bgt.n	800c592 <__ieee754_pow+0x1fa>
 800c5a8:	e778      	b.n	800c49c <__ieee754_pow+0x104>
 800c5aa:	bf00      	nop
 800c5ac:	f3af 8000 	nop.w
 800c5b0:	8800759c 	.word	0x8800759c
 800c5b4:	7e37e43c 	.word	0x7e37e43c
 800c5b8:	7ff00000 	.word	0x7ff00000
 800c5bc:	0800e485 	.word	0x0800e485
 800c5c0:	433fffff 	.word	0x433fffff
 800c5c4:	3ff00000 	.word	0x3ff00000
 800c5c8:	3fefffff 	.word	0x3fefffff
 800c5cc:	3fe00000 	.word	0x3fe00000
 800c5d0:	41e00000 	.word	0x41e00000
 800c5d4:	4b64      	ldr	r3, [pc, #400]	; (800c768 <__ieee754_pow+0x3d0>)
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f7f3 fe56 	bl	8000288 <__aeabi_dsub>
 800c5dc:	a356      	add	r3, pc, #344	; (adr r3, 800c738 <__ieee754_pow+0x3a0>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	460d      	mov	r5, r1
 800c5e6:	f7f4 f807 	bl	80005f8 <__aeabi_dmul>
 800c5ea:	a355      	add	r3, pc, #340	; (adr r3, 800c740 <__ieee754_pow+0x3a8>)
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	460f      	mov	r7, r1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	4b5b      	ldr	r3, [pc, #364]	; (800c76c <__ieee754_pow+0x3d4>)
 800c5fe:	4682      	mov	sl, r0
 800c600:	468b      	mov	fp, r1
 800c602:	2200      	movs	r2, #0
 800c604:	4620      	mov	r0, r4
 800c606:	4629      	mov	r1, r5
 800c608:	f7f3 fff6 	bl	80005f8 <__aeabi_dmul>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	a14d      	add	r1, pc, #308	; (adr r1, 800c748 <__ieee754_pow+0x3b0>)
 800c612:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c616:	f7f3 fe37 	bl	8000288 <__aeabi_dsub>
 800c61a:	4622      	mov	r2, r4
 800c61c:	462b      	mov	r3, r5
 800c61e:	f7f3 ffeb 	bl	80005f8 <__aeabi_dmul>
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	2000      	movs	r0, #0
 800c628:	4951      	ldr	r1, [pc, #324]	; (800c770 <__ieee754_pow+0x3d8>)
 800c62a:	f7f3 fe2d 	bl	8000288 <__aeabi_dsub>
 800c62e:	4622      	mov	r2, r4
 800c630:	4680      	mov	r8, r0
 800c632:	4689      	mov	r9, r1
 800c634:	462b      	mov	r3, r5
 800c636:	4620      	mov	r0, r4
 800c638:	4629      	mov	r1, r5
 800c63a:	f7f3 ffdd 	bl	80005f8 <__aeabi_dmul>
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	4640      	mov	r0, r8
 800c644:	4649      	mov	r1, r9
 800c646:	f7f3 ffd7 	bl	80005f8 <__aeabi_dmul>
 800c64a:	a341      	add	r3, pc, #260	; (adr r3, 800c750 <__ieee754_pow+0x3b8>)
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	f7f3 ffd2 	bl	80005f8 <__aeabi_dmul>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	4650      	mov	r0, sl
 800c65a:	4659      	mov	r1, fp
 800c65c:	f7f3 fe14 	bl	8000288 <__aeabi_dsub>
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	4680      	mov	r8, r0
 800c666:	4689      	mov	r9, r1
 800c668:	4630      	mov	r0, r6
 800c66a:	4639      	mov	r1, r7
 800c66c:	f7f3 fe0e 	bl	800028c <__adddf3>
 800c670:	2400      	movs	r4, #0
 800c672:	4632      	mov	r2, r6
 800c674:	463b      	mov	r3, r7
 800c676:	4620      	mov	r0, r4
 800c678:	460d      	mov	r5, r1
 800c67a:	f7f3 fe05 	bl	8000288 <__aeabi_dsub>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f3 fdff 	bl	8000288 <__aeabi_dsub>
 800c68a:	9b00      	ldr	r3, [sp, #0]
 800c68c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c68e:	3b01      	subs	r3, #1
 800c690:	4313      	orrs	r3, r2
 800c692:	4682      	mov	sl, r0
 800c694:	468b      	mov	fp, r1
 800c696:	f040 81f1 	bne.w	800ca7c <__ieee754_pow+0x6e4>
 800c69a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c758 <__ieee754_pow+0x3c0>
 800c69e:	eeb0 8a47 	vmov.f32	s16, s14
 800c6a2:	eef0 8a67 	vmov.f32	s17, s15
 800c6a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c6aa:	2600      	movs	r6, #0
 800c6ac:	4632      	mov	r2, r6
 800c6ae:	463b      	mov	r3, r7
 800c6b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b4:	f7f3 fde8 	bl	8000288 <__aeabi_dsub>
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	f7f3 ff9c 	bl	80005f8 <__aeabi_dmul>
 800c6c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6c4:	4680      	mov	r8, r0
 800c6c6:	4689      	mov	r9, r1
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	4659      	mov	r1, fp
 800c6cc:	f7f3 ff94 	bl	80005f8 <__aeabi_dmul>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	4649      	mov	r1, r9
 800c6d8:	f7f3 fdd8 	bl	800028c <__adddf3>
 800c6dc:	4632      	mov	r2, r6
 800c6de:	463b      	mov	r3, r7
 800c6e0:	4680      	mov	r8, r0
 800c6e2:	4689      	mov	r9, r1
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	f7f3 ff86 	bl	80005f8 <__aeabi_dmul>
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	460d      	mov	r5, r1
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	f7f3 fdc8 	bl	800028c <__adddf3>
 800c6fc:	4b1d      	ldr	r3, [pc, #116]	; (800c774 <__ieee754_pow+0x3dc>)
 800c6fe:	4299      	cmp	r1, r3
 800c700:	ec45 4b19 	vmov	d9, r4, r5
 800c704:	4606      	mov	r6, r0
 800c706:	460f      	mov	r7, r1
 800c708:	468b      	mov	fp, r1
 800c70a:	f340 82fe 	ble.w	800cd0a <__ieee754_pow+0x972>
 800c70e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c712:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c716:	4303      	orrs	r3, r0
 800c718:	f000 81f0 	beq.w	800cafc <__ieee754_pow+0x764>
 800c71c:	a310      	add	r3, pc, #64	; (adr r3, 800c760 <__ieee754_pow+0x3c8>)
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	ec51 0b18 	vmov	r0, r1, d8
 800c726:	f7f3 ff67 	bl	80005f8 <__aeabi_dmul>
 800c72a:	a30d      	add	r3, pc, #52	; (adr r3, 800c760 <__ieee754_pow+0x3c8>)
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	e6cb      	b.n	800c4ca <__ieee754_pow+0x132>
 800c732:	bf00      	nop
 800c734:	f3af 8000 	nop.w
 800c738:	60000000 	.word	0x60000000
 800c73c:	3ff71547 	.word	0x3ff71547
 800c740:	f85ddf44 	.word	0xf85ddf44
 800c744:	3e54ae0b 	.word	0x3e54ae0b
 800c748:	55555555 	.word	0x55555555
 800c74c:	3fd55555 	.word	0x3fd55555
 800c750:	652b82fe 	.word	0x652b82fe
 800c754:	3ff71547 	.word	0x3ff71547
 800c758:	00000000 	.word	0x00000000
 800c75c:	bff00000 	.word	0xbff00000
 800c760:	8800759c 	.word	0x8800759c
 800c764:	7e37e43c 	.word	0x7e37e43c
 800c768:	3ff00000 	.word	0x3ff00000
 800c76c:	3fd00000 	.word	0x3fd00000
 800c770:	3fe00000 	.word	0x3fe00000
 800c774:	408fffff 	.word	0x408fffff
 800c778:	4bd7      	ldr	r3, [pc, #860]	; (800cad8 <__ieee754_pow+0x740>)
 800c77a:	ea03 0309 	and.w	r3, r3, r9
 800c77e:	2200      	movs	r2, #0
 800c780:	b92b      	cbnz	r3, 800c78e <__ieee754_pow+0x3f6>
 800c782:	4bd6      	ldr	r3, [pc, #856]	; (800cadc <__ieee754_pow+0x744>)
 800c784:	f7f3 ff38 	bl	80005f8 <__aeabi_dmul>
 800c788:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c78c:	460c      	mov	r4, r1
 800c78e:	1523      	asrs	r3, r4, #20
 800c790:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c794:	4413      	add	r3, r2
 800c796:	9309      	str	r3, [sp, #36]	; 0x24
 800c798:	4bd1      	ldr	r3, [pc, #836]	; (800cae0 <__ieee754_pow+0x748>)
 800c79a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c79e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c7a2:	429c      	cmp	r4, r3
 800c7a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c7a8:	dd08      	ble.n	800c7bc <__ieee754_pow+0x424>
 800c7aa:	4bce      	ldr	r3, [pc, #824]	; (800cae4 <__ieee754_pow+0x74c>)
 800c7ac:	429c      	cmp	r4, r3
 800c7ae:	f340 8163 	ble.w	800ca78 <__ieee754_pow+0x6e0>
 800c7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c7bc:	2400      	movs	r4, #0
 800c7be:	00e3      	lsls	r3, r4, #3
 800c7c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7c2:	4bc9      	ldr	r3, [pc, #804]	; (800cae8 <__ieee754_pow+0x750>)
 800c7c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7c8:	ed93 7b00 	vldr	d7, [r3]
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	ec53 2b17 	vmov	r2, r3, d7
 800c7d2:	eeb0 8a47 	vmov.f32	s16, s14
 800c7d6:	eef0 8a67 	vmov.f32	s17, s15
 800c7da:	4682      	mov	sl, r0
 800c7dc:	f7f3 fd54 	bl	8000288 <__aeabi_dsub>
 800c7e0:	4652      	mov	r2, sl
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	460f      	mov	r7, r1
 800c7e6:	462b      	mov	r3, r5
 800c7e8:	ec51 0b18 	vmov	r0, r1, d8
 800c7ec:	f7f3 fd4e 	bl	800028c <__adddf3>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	49bd      	ldr	r1, [pc, #756]	; (800caec <__ieee754_pow+0x754>)
 800c7f8:	f7f4 f828 	bl	800084c <__aeabi_ddiv>
 800c7fc:	ec41 0b19 	vmov	d9, r0, r1
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4630      	mov	r0, r6
 800c806:	4639      	mov	r1, r7
 800c808:	f7f3 fef6 	bl	80005f8 <__aeabi_dmul>
 800c80c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c810:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c814:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c818:	2300      	movs	r3, #0
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c820:	46ab      	mov	fp, r5
 800c822:	106d      	asrs	r5, r5, #1
 800c824:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c828:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c82c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c830:	2200      	movs	r2, #0
 800c832:	4640      	mov	r0, r8
 800c834:	4649      	mov	r1, r9
 800c836:	4614      	mov	r4, r2
 800c838:	461d      	mov	r5, r3
 800c83a:	f7f3 fedd 	bl	80005f8 <__aeabi_dmul>
 800c83e:	4602      	mov	r2, r0
 800c840:	460b      	mov	r3, r1
 800c842:	4630      	mov	r0, r6
 800c844:	4639      	mov	r1, r7
 800c846:	f7f3 fd1f 	bl	8000288 <__aeabi_dsub>
 800c84a:	ec53 2b18 	vmov	r2, r3, d8
 800c84e:	4606      	mov	r6, r0
 800c850:	460f      	mov	r7, r1
 800c852:	4620      	mov	r0, r4
 800c854:	4629      	mov	r1, r5
 800c856:	f7f3 fd17 	bl	8000288 <__aeabi_dsub>
 800c85a:	4602      	mov	r2, r0
 800c85c:	460b      	mov	r3, r1
 800c85e:	4650      	mov	r0, sl
 800c860:	4659      	mov	r1, fp
 800c862:	f7f3 fd11 	bl	8000288 <__aeabi_dsub>
 800c866:	4642      	mov	r2, r8
 800c868:	464b      	mov	r3, r9
 800c86a:	f7f3 fec5 	bl	80005f8 <__aeabi_dmul>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f3 fd07 	bl	8000288 <__aeabi_dsub>
 800c87a:	ec53 2b19 	vmov	r2, r3, d9
 800c87e:	f7f3 febb 	bl	80005f8 <__aeabi_dmul>
 800c882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c886:	ec41 0b18 	vmov	d8, r0, r1
 800c88a:	4610      	mov	r0, r2
 800c88c:	4619      	mov	r1, r3
 800c88e:	f7f3 feb3 	bl	80005f8 <__aeabi_dmul>
 800c892:	a37d      	add	r3, pc, #500	; (adr r3, 800ca88 <__ieee754_pow+0x6f0>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	4604      	mov	r4, r0
 800c89a:	460d      	mov	r5, r1
 800c89c:	f7f3 feac 	bl	80005f8 <__aeabi_dmul>
 800c8a0:	a37b      	add	r3, pc, #492	; (adr r3, 800ca90 <__ieee754_pow+0x6f8>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7f3 fcf1 	bl	800028c <__adddf3>
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	f7f3 fea3 	bl	80005f8 <__aeabi_dmul>
 800c8b2:	a379      	add	r3, pc, #484	; (adr r3, 800ca98 <__ieee754_pow+0x700>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 fce8 	bl	800028c <__adddf3>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	462b      	mov	r3, r5
 800c8c0:	f7f3 fe9a 	bl	80005f8 <__aeabi_dmul>
 800c8c4:	a376      	add	r3, pc, #472	; (adr r3, 800caa0 <__ieee754_pow+0x708>)
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	f7f3 fcdf 	bl	800028c <__adddf3>
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	f7f3 fe91 	bl	80005f8 <__aeabi_dmul>
 800c8d6:	a374      	add	r3, pc, #464	; (adr r3, 800caa8 <__ieee754_pow+0x710>)
 800c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8dc:	f7f3 fcd6 	bl	800028c <__adddf3>
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	f7f3 fe88 	bl	80005f8 <__aeabi_dmul>
 800c8e8:	a371      	add	r3, pc, #452	; (adr r3, 800cab0 <__ieee754_pow+0x718>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 fccd 	bl	800028c <__adddf3>
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	460f      	mov	r7, r1
 800c8f8:	462b      	mov	r3, r5
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	f7f3 fe7b 	bl	80005f8 <__aeabi_dmul>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	4630      	mov	r0, r6
 800c908:	4639      	mov	r1, r7
 800c90a:	f7f3 fe75 	bl	80005f8 <__aeabi_dmul>
 800c90e:	4642      	mov	r2, r8
 800c910:	4604      	mov	r4, r0
 800c912:	460d      	mov	r5, r1
 800c914:	464b      	mov	r3, r9
 800c916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c91a:	f7f3 fcb7 	bl	800028c <__adddf3>
 800c91e:	ec53 2b18 	vmov	r2, r3, d8
 800c922:	f7f3 fe69 	bl	80005f8 <__aeabi_dmul>
 800c926:	4622      	mov	r2, r4
 800c928:	462b      	mov	r3, r5
 800c92a:	f7f3 fcaf 	bl	800028c <__adddf3>
 800c92e:	4642      	mov	r2, r8
 800c930:	4682      	mov	sl, r0
 800c932:	468b      	mov	fp, r1
 800c934:	464b      	mov	r3, r9
 800c936:	4640      	mov	r0, r8
 800c938:	4649      	mov	r1, r9
 800c93a:	f7f3 fe5d 	bl	80005f8 <__aeabi_dmul>
 800c93e:	4b6c      	ldr	r3, [pc, #432]	; (800caf0 <__ieee754_pow+0x758>)
 800c940:	2200      	movs	r2, #0
 800c942:	4606      	mov	r6, r0
 800c944:	460f      	mov	r7, r1
 800c946:	f7f3 fca1 	bl	800028c <__adddf3>
 800c94a:	4652      	mov	r2, sl
 800c94c:	465b      	mov	r3, fp
 800c94e:	f7f3 fc9d 	bl	800028c <__adddf3>
 800c952:	9c04      	ldr	r4, [sp, #16]
 800c954:	460d      	mov	r5, r1
 800c956:	4622      	mov	r2, r4
 800c958:	460b      	mov	r3, r1
 800c95a:	4640      	mov	r0, r8
 800c95c:	4649      	mov	r1, r9
 800c95e:	f7f3 fe4b 	bl	80005f8 <__aeabi_dmul>
 800c962:	4b63      	ldr	r3, [pc, #396]	; (800caf0 <__ieee754_pow+0x758>)
 800c964:	4680      	mov	r8, r0
 800c966:	4689      	mov	r9, r1
 800c968:	2200      	movs	r2, #0
 800c96a:	4620      	mov	r0, r4
 800c96c:	4629      	mov	r1, r5
 800c96e:	f7f3 fc8b 	bl	8000288 <__aeabi_dsub>
 800c972:	4632      	mov	r2, r6
 800c974:	463b      	mov	r3, r7
 800c976:	f7f3 fc87 	bl	8000288 <__aeabi_dsub>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4650      	mov	r0, sl
 800c980:	4659      	mov	r1, fp
 800c982:	f7f3 fc81 	bl	8000288 <__aeabi_dsub>
 800c986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c98a:	f7f3 fe35 	bl	80005f8 <__aeabi_dmul>
 800c98e:	4622      	mov	r2, r4
 800c990:	4606      	mov	r6, r0
 800c992:	460f      	mov	r7, r1
 800c994:	462b      	mov	r3, r5
 800c996:	ec51 0b18 	vmov	r0, r1, d8
 800c99a:	f7f3 fe2d 	bl	80005f8 <__aeabi_dmul>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	f7f3 fc71 	bl	800028c <__adddf3>
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	460f      	mov	r7, r1
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	4649      	mov	r1, r9
 800c9b6:	f7f3 fc69 	bl	800028c <__adddf3>
 800c9ba:	9c04      	ldr	r4, [sp, #16]
 800c9bc:	a33e      	add	r3, pc, #248	; (adr r3, 800cab8 <__ieee754_pow+0x720>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	460d      	mov	r5, r1
 800c9c6:	f7f3 fe17 	bl	80005f8 <__aeabi_dmul>
 800c9ca:	4642      	mov	r2, r8
 800c9cc:	ec41 0b18 	vmov	d8, r0, r1
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	f7f3 fc57 	bl	8000288 <__aeabi_dsub>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4630      	mov	r0, r6
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	f7f3 fc51 	bl	8000288 <__aeabi_dsub>
 800c9e6:	a336      	add	r3, pc, #216	; (adr r3, 800cac0 <__ieee754_pow+0x728>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f7f3 fe04 	bl	80005f8 <__aeabi_dmul>
 800c9f0:	a335      	add	r3, pc, #212	; (adr r3, 800cac8 <__ieee754_pow+0x730>)
 800c9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	460f      	mov	r7, r1
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	f7f3 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4630      	mov	r0, r6
 800ca08:	4639      	mov	r1, r7
 800ca0a:	f7f3 fc3f 	bl	800028c <__adddf3>
 800ca0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca10:	4b38      	ldr	r3, [pc, #224]	; (800caf4 <__ieee754_pow+0x75c>)
 800ca12:	4413      	add	r3, r2
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	f7f3 fc38 	bl	800028c <__adddf3>
 800ca1c:	4682      	mov	sl, r0
 800ca1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca20:	468b      	mov	fp, r1
 800ca22:	f7f3 fd7f 	bl	8000524 <__aeabi_i2d>
 800ca26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca28:	4b33      	ldr	r3, [pc, #204]	; (800caf8 <__ieee754_pow+0x760>)
 800ca2a:	4413      	add	r3, r2
 800ca2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca30:	4606      	mov	r6, r0
 800ca32:	460f      	mov	r7, r1
 800ca34:	4652      	mov	r2, sl
 800ca36:	465b      	mov	r3, fp
 800ca38:	ec51 0b18 	vmov	r0, r1, d8
 800ca3c:	f7f3 fc26 	bl	800028c <__adddf3>
 800ca40:	4642      	mov	r2, r8
 800ca42:	464b      	mov	r3, r9
 800ca44:	f7f3 fc22 	bl	800028c <__adddf3>
 800ca48:	4632      	mov	r2, r6
 800ca4a:	463b      	mov	r3, r7
 800ca4c:	f7f3 fc1e 	bl	800028c <__adddf3>
 800ca50:	9c04      	ldr	r4, [sp, #16]
 800ca52:	4632      	mov	r2, r6
 800ca54:	463b      	mov	r3, r7
 800ca56:	4620      	mov	r0, r4
 800ca58:	460d      	mov	r5, r1
 800ca5a:	f7f3 fc15 	bl	8000288 <__aeabi_dsub>
 800ca5e:	4642      	mov	r2, r8
 800ca60:	464b      	mov	r3, r9
 800ca62:	f7f3 fc11 	bl	8000288 <__aeabi_dsub>
 800ca66:	ec53 2b18 	vmov	r2, r3, d8
 800ca6a:	f7f3 fc0d 	bl	8000288 <__aeabi_dsub>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	4650      	mov	r0, sl
 800ca74:	4659      	mov	r1, fp
 800ca76:	e606      	b.n	800c686 <__ieee754_pow+0x2ee>
 800ca78:	2401      	movs	r4, #1
 800ca7a:	e6a0      	b.n	800c7be <__ieee754_pow+0x426>
 800ca7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800cad0 <__ieee754_pow+0x738>
 800ca80:	e60d      	b.n	800c69e <__ieee754_pow+0x306>
 800ca82:	bf00      	nop
 800ca84:	f3af 8000 	nop.w
 800ca88:	4a454eef 	.word	0x4a454eef
 800ca8c:	3fca7e28 	.word	0x3fca7e28
 800ca90:	93c9db65 	.word	0x93c9db65
 800ca94:	3fcd864a 	.word	0x3fcd864a
 800ca98:	a91d4101 	.word	0xa91d4101
 800ca9c:	3fd17460 	.word	0x3fd17460
 800caa0:	518f264d 	.word	0x518f264d
 800caa4:	3fd55555 	.word	0x3fd55555
 800caa8:	db6fabff 	.word	0xdb6fabff
 800caac:	3fdb6db6 	.word	0x3fdb6db6
 800cab0:	33333303 	.word	0x33333303
 800cab4:	3fe33333 	.word	0x3fe33333
 800cab8:	e0000000 	.word	0xe0000000
 800cabc:	3feec709 	.word	0x3feec709
 800cac0:	dc3a03fd 	.word	0xdc3a03fd
 800cac4:	3feec709 	.word	0x3feec709
 800cac8:	145b01f5 	.word	0x145b01f5
 800cacc:	be3e2fe0 	.word	0xbe3e2fe0
 800cad0:	00000000 	.word	0x00000000
 800cad4:	3ff00000 	.word	0x3ff00000
 800cad8:	7ff00000 	.word	0x7ff00000
 800cadc:	43400000 	.word	0x43400000
 800cae0:	0003988e 	.word	0x0003988e
 800cae4:	000bb679 	.word	0x000bb679
 800cae8:	0800e4b8 	.word	0x0800e4b8
 800caec:	3ff00000 	.word	0x3ff00000
 800caf0:	40080000 	.word	0x40080000
 800caf4:	0800e4d8 	.word	0x0800e4d8
 800caf8:	0800e4c8 	.word	0x0800e4c8
 800cafc:	a3b5      	add	r3, pc, #724	; (adr r3, 800cdd4 <__ieee754_pow+0xa3c>)
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	4640      	mov	r0, r8
 800cb04:	4649      	mov	r1, r9
 800cb06:	f7f3 fbc1 	bl	800028c <__adddf3>
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	ec41 0b1a 	vmov	d10, r0, r1
 800cb10:	462b      	mov	r3, r5
 800cb12:	4630      	mov	r0, r6
 800cb14:	4639      	mov	r1, r7
 800cb16:	f7f3 fbb7 	bl	8000288 <__aeabi_dsub>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	ec51 0b1a 	vmov	r0, r1, d10
 800cb22:	f7f3 fff9 	bl	8000b18 <__aeabi_dcmpgt>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	f47f adf8 	bne.w	800c71c <__ieee754_pow+0x384>
 800cb2c:	4aa4      	ldr	r2, [pc, #656]	; (800cdc0 <__ieee754_pow+0xa28>)
 800cb2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb32:	4293      	cmp	r3, r2
 800cb34:	f340 810b 	ble.w	800cd4e <__ieee754_pow+0x9b6>
 800cb38:	151b      	asrs	r3, r3, #20
 800cb3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cb3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cb42:	fa4a f303 	asr.w	r3, sl, r3
 800cb46:	445b      	add	r3, fp
 800cb48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cb4c:	4e9d      	ldr	r6, [pc, #628]	; (800cdc4 <__ieee754_pow+0xa2c>)
 800cb4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cb52:	4116      	asrs	r6, r2
 800cb54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cb58:	2000      	movs	r0, #0
 800cb5a:	ea23 0106 	bic.w	r1, r3, r6
 800cb5e:	f1c2 0214 	rsb	r2, r2, #20
 800cb62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cb66:	fa4a fa02 	asr.w	sl, sl, r2
 800cb6a:	f1bb 0f00 	cmp.w	fp, #0
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	4620      	mov	r0, r4
 800cb74:	4629      	mov	r1, r5
 800cb76:	bfb8      	it	lt
 800cb78:	f1ca 0a00 	rsblt	sl, sl, #0
 800cb7c:	f7f3 fb84 	bl	8000288 <__aeabi_dsub>
 800cb80:	ec41 0b19 	vmov	d9, r0, r1
 800cb84:	4642      	mov	r2, r8
 800cb86:	464b      	mov	r3, r9
 800cb88:	ec51 0b19 	vmov	r0, r1, d9
 800cb8c:	f7f3 fb7e 	bl	800028c <__adddf3>
 800cb90:	2400      	movs	r4, #0
 800cb92:	a379      	add	r3, pc, #484	; (adr r3, 800cd78 <__ieee754_pow+0x9e0>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	4620      	mov	r0, r4
 800cb9a:	460d      	mov	r5, r1
 800cb9c:	f7f3 fd2c 	bl	80005f8 <__aeabi_dmul>
 800cba0:	ec53 2b19 	vmov	r2, r3, d9
 800cba4:	4606      	mov	r6, r0
 800cba6:	460f      	mov	r7, r1
 800cba8:	4620      	mov	r0, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	f7f3 fb6c 	bl	8000288 <__aeabi_dsub>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	4640      	mov	r0, r8
 800cbb6:	4649      	mov	r1, r9
 800cbb8:	f7f3 fb66 	bl	8000288 <__aeabi_dsub>
 800cbbc:	a370      	add	r3, pc, #448	; (adr r3, 800cd80 <__ieee754_pow+0x9e8>)
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fd19 	bl	80005f8 <__aeabi_dmul>
 800cbc6:	a370      	add	r3, pc, #448	; (adr r3, 800cd88 <__ieee754_pow+0x9f0>)
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	4680      	mov	r8, r0
 800cbce:	4689      	mov	r9, r1
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 fd10 	bl	80005f8 <__aeabi_dmul>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4640      	mov	r0, r8
 800cbde:	4649      	mov	r1, r9
 800cbe0:	f7f3 fb54 	bl	800028c <__adddf3>
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	460d      	mov	r5, r1
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	4630      	mov	r0, r6
 800cbee:	4639      	mov	r1, r7
 800cbf0:	f7f3 fb4c 	bl	800028c <__adddf3>
 800cbf4:	4632      	mov	r2, r6
 800cbf6:	463b      	mov	r3, r7
 800cbf8:	4680      	mov	r8, r0
 800cbfa:	4689      	mov	r9, r1
 800cbfc:	f7f3 fb44 	bl	8000288 <__aeabi_dsub>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4620      	mov	r0, r4
 800cc06:	4629      	mov	r1, r5
 800cc08:	f7f3 fb3e 	bl	8000288 <__aeabi_dsub>
 800cc0c:	4642      	mov	r2, r8
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460f      	mov	r7, r1
 800cc12:	464b      	mov	r3, r9
 800cc14:	4640      	mov	r0, r8
 800cc16:	4649      	mov	r1, r9
 800cc18:	f7f3 fcee 	bl	80005f8 <__aeabi_dmul>
 800cc1c:	a35c      	add	r3, pc, #368	; (adr r3, 800cd90 <__ieee754_pow+0x9f8>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	4604      	mov	r4, r0
 800cc24:	460d      	mov	r5, r1
 800cc26:	f7f3 fce7 	bl	80005f8 <__aeabi_dmul>
 800cc2a:	a35b      	add	r3, pc, #364	; (adr r3, 800cd98 <__ieee754_pow+0xa00>)
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	f7f3 fb2a 	bl	8000288 <__aeabi_dsub>
 800cc34:	4622      	mov	r2, r4
 800cc36:	462b      	mov	r3, r5
 800cc38:	f7f3 fcde 	bl	80005f8 <__aeabi_dmul>
 800cc3c:	a358      	add	r3, pc, #352	; (adr r3, 800cda0 <__ieee754_pow+0xa08>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	f7f3 fb23 	bl	800028c <__adddf3>
 800cc46:	4622      	mov	r2, r4
 800cc48:	462b      	mov	r3, r5
 800cc4a:	f7f3 fcd5 	bl	80005f8 <__aeabi_dmul>
 800cc4e:	a356      	add	r3, pc, #344	; (adr r3, 800cda8 <__ieee754_pow+0xa10>)
 800cc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc54:	f7f3 fb18 	bl	8000288 <__aeabi_dsub>
 800cc58:	4622      	mov	r2, r4
 800cc5a:	462b      	mov	r3, r5
 800cc5c:	f7f3 fccc 	bl	80005f8 <__aeabi_dmul>
 800cc60:	a353      	add	r3, pc, #332	; (adr r3, 800cdb0 <__ieee754_pow+0xa18>)
 800cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc66:	f7f3 fb11 	bl	800028c <__adddf3>
 800cc6a:	4622      	mov	r2, r4
 800cc6c:	462b      	mov	r3, r5
 800cc6e:	f7f3 fcc3 	bl	80005f8 <__aeabi_dmul>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4640      	mov	r0, r8
 800cc78:	4649      	mov	r1, r9
 800cc7a:	f7f3 fb05 	bl	8000288 <__aeabi_dsub>
 800cc7e:	4604      	mov	r4, r0
 800cc80:	460d      	mov	r5, r1
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4640      	mov	r0, r8
 800cc88:	4649      	mov	r1, r9
 800cc8a:	f7f3 fcb5 	bl	80005f8 <__aeabi_dmul>
 800cc8e:	2200      	movs	r2, #0
 800cc90:	ec41 0b19 	vmov	d9, r0, r1
 800cc94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc98:	4620      	mov	r0, r4
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	f7f3 faf4 	bl	8000288 <__aeabi_dsub>
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	ec51 0b19 	vmov	r0, r1, d9
 800cca8:	f7f3 fdd0 	bl	800084c <__aeabi_ddiv>
 800ccac:	4632      	mov	r2, r6
 800ccae:	4604      	mov	r4, r0
 800ccb0:	460d      	mov	r5, r1
 800ccb2:	463b      	mov	r3, r7
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	4649      	mov	r1, r9
 800ccb8:	f7f3 fc9e 	bl	80005f8 <__aeabi_dmul>
 800ccbc:	4632      	mov	r2, r6
 800ccbe:	463b      	mov	r3, r7
 800ccc0:	f7f3 fae4 	bl	800028c <__adddf3>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	4620      	mov	r0, r4
 800ccca:	4629      	mov	r1, r5
 800cccc:	f7f3 fadc 	bl	8000288 <__aeabi_dsub>
 800ccd0:	4642      	mov	r2, r8
 800ccd2:	464b      	mov	r3, r9
 800ccd4:	f7f3 fad8 	bl	8000288 <__aeabi_dsub>
 800ccd8:	460b      	mov	r3, r1
 800ccda:	4602      	mov	r2, r0
 800ccdc:	493a      	ldr	r1, [pc, #232]	; (800cdc8 <__ieee754_pow+0xa30>)
 800ccde:	2000      	movs	r0, #0
 800cce0:	f7f3 fad2 	bl	8000288 <__aeabi_dsub>
 800cce4:	e9cd 0100 	strd	r0, r1, [sp]
 800cce8:	9b01      	ldr	r3, [sp, #4]
 800ccea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ccee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccf2:	da2f      	bge.n	800cd54 <__ieee754_pow+0x9bc>
 800ccf4:	4650      	mov	r0, sl
 800ccf6:	ed9d 0b00 	vldr	d0, [sp]
 800ccfa:	f000 fc91 	bl	800d620 <scalbn>
 800ccfe:	ec51 0b10 	vmov	r0, r1, d0
 800cd02:	ec53 2b18 	vmov	r2, r3, d8
 800cd06:	f7ff bbe0 	b.w	800c4ca <__ieee754_pow+0x132>
 800cd0a:	4b30      	ldr	r3, [pc, #192]	; (800cdcc <__ieee754_pow+0xa34>)
 800cd0c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cd10:	429e      	cmp	r6, r3
 800cd12:	f77f af0b 	ble.w	800cb2c <__ieee754_pow+0x794>
 800cd16:	4b2e      	ldr	r3, [pc, #184]	; (800cdd0 <__ieee754_pow+0xa38>)
 800cd18:	440b      	add	r3, r1
 800cd1a:	4303      	orrs	r3, r0
 800cd1c:	d00b      	beq.n	800cd36 <__ieee754_pow+0x99e>
 800cd1e:	a326      	add	r3, pc, #152	; (adr r3, 800cdb8 <__ieee754_pow+0xa20>)
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	ec51 0b18 	vmov	r0, r1, d8
 800cd28:	f7f3 fc66 	bl	80005f8 <__aeabi_dmul>
 800cd2c:	a322      	add	r3, pc, #136	; (adr r3, 800cdb8 <__ieee754_pow+0xa20>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f7ff bbca 	b.w	800c4ca <__ieee754_pow+0x132>
 800cd36:	4622      	mov	r2, r4
 800cd38:	462b      	mov	r3, r5
 800cd3a:	f7f3 faa5 	bl	8000288 <__aeabi_dsub>
 800cd3e:	4642      	mov	r2, r8
 800cd40:	464b      	mov	r3, r9
 800cd42:	f7f3 fedf 	bl	8000b04 <__aeabi_dcmpge>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	f43f aef0 	beq.w	800cb2c <__ieee754_pow+0x794>
 800cd4c:	e7e7      	b.n	800cd1e <__ieee754_pow+0x986>
 800cd4e:	f04f 0a00 	mov.w	sl, #0
 800cd52:	e717      	b.n	800cb84 <__ieee754_pow+0x7ec>
 800cd54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	e7d2      	b.n	800cd02 <__ieee754_pow+0x96a>
 800cd5c:	491a      	ldr	r1, [pc, #104]	; (800cdc8 <__ieee754_pow+0xa30>)
 800cd5e:	2000      	movs	r0, #0
 800cd60:	f7ff bb9e 	b.w	800c4a0 <__ieee754_pow+0x108>
 800cd64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd68:	f7ff bb9a 	b.w	800c4a0 <__ieee754_pow+0x108>
 800cd6c:	9000      	str	r0, [sp, #0]
 800cd6e:	f7ff bb76 	b.w	800c45e <__ieee754_pow+0xc6>
 800cd72:	2100      	movs	r1, #0
 800cd74:	f7ff bb60 	b.w	800c438 <__ieee754_pow+0xa0>
 800cd78:	00000000 	.word	0x00000000
 800cd7c:	3fe62e43 	.word	0x3fe62e43
 800cd80:	fefa39ef 	.word	0xfefa39ef
 800cd84:	3fe62e42 	.word	0x3fe62e42
 800cd88:	0ca86c39 	.word	0x0ca86c39
 800cd8c:	be205c61 	.word	0xbe205c61
 800cd90:	72bea4d0 	.word	0x72bea4d0
 800cd94:	3e663769 	.word	0x3e663769
 800cd98:	c5d26bf1 	.word	0xc5d26bf1
 800cd9c:	3ebbbd41 	.word	0x3ebbbd41
 800cda0:	af25de2c 	.word	0xaf25de2c
 800cda4:	3f11566a 	.word	0x3f11566a
 800cda8:	16bebd93 	.word	0x16bebd93
 800cdac:	3f66c16c 	.word	0x3f66c16c
 800cdb0:	5555553e 	.word	0x5555553e
 800cdb4:	3fc55555 	.word	0x3fc55555
 800cdb8:	c2f8f359 	.word	0xc2f8f359
 800cdbc:	01a56e1f 	.word	0x01a56e1f
 800cdc0:	3fe00000 	.word	0x3fe00000
 800cdc4:	000fffff 	.word	0x000fffff
 800cdc8:	3ff00000 	.word	0x3ff00000
 800cdcc:	4090cbff 	.word	0x4090cbff
 800cdd0:	3f6f3400 	.word	0x3f6f3400
 800cdd4:	652b82fe 	.word	0x652b82fe
 800cdd8:	3c971547 	.word	0x3c971547

0800cddc <__ieee754_sqrt>:
 800cddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde0:	ec55 4b10 	vmov	r4, r5, d0
 800cde4:	4e56      	ldr	r6, [pc, #344]	; (800cf40 <__ieee754_sqrt+0x164>)
 800cde6:	43ae      	bics	r6, r5
 800cde8:	ee10 0a10 	vmov	r0, s0
 800cdec:	ee10 3a10 	vmov	r3, s0
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	d110      	bne.n	800ce18 <__ieee754_sqrt+0x3c>
 800cdf6:	ee10 2a10 	vmov	r2, s0
 800cdfa:	462b      	mov	r3, r5
 800cdfc:	f7f3 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	4620      	mov	r0, r4
 800ce06:	4629      	mov	r1, r5
 800ce08:	f7f3 fa40 	bl	800028c <__adddf3>
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	460d      	mov	r5, r1
 800ce10:	ec45 4b10 	vmov	d0, r4, r5
 800ce14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce18:	2d00      	cmp	r5, #0
 800ce1a:	dc10      	bgt.n	800ce3e <__ieee754_sqrt+0x62>
 800ce1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ce20:	4330      	orrs	r0, r6
 800ce22:	d0f5      	beq.n	800ce10 <__ieee754_sqrt+0x34>
 800ce24:	b15d      	cbz	r5, 800ce3e <__ieee754_sqrt+0x62>
 800ce26:	ee10 2a10 	vmov	r2, s0
 800ce2a:	462b      	mov	r3, r5
 800ce2c:	ee10 0a10 	vmov	r0, s0
 800ce30:	f7f3 fa2a 	bl	8000288 <__aeabi_dsub>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	f7f3 fd08 	bl	800084c <__aeabi_ddiv>
 800ce3c:	e7e6      	b.n	800ce0c <__ieee754_sqrt+0x30>
 800ce3e:	1509      	asrs	r1, r1, #20
 800ce40:	d076      	beq.n	800cf30 <__ieee754_sqrt+0x154>
 800ce42:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ce46:	07ce      	lsls	r6, r1, #31
 800ce48:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ce4c:	bf5e      	ittt	pl
 800ce4e:	0fda      	lsrpl	r2, r3, #31
 800ce50:	005b      	lslpl	r3, r3, #1
 800ce52:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ce56:	0fda      	lsrs	r2, r3, #31
 800ce58:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ce5c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ce60:	2000      	movs	r0, #0
 800ce62:	106d      	asrs	r5, r5, #1
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	f04f 0e16 	mov.w	lr, #22
 800ce6a:	4684      	mov	ip, r0
 800ce6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce70:	eb0c 0401 	add.w	r4, ip, r1
 800ce74:	4294      	cmp	r4, r2
 800ce76:	bfde      	ittt	le
 800ce78:	1b12      	suble	r2, r2, r4
 800ce7a:	eb04 0c01 	addle.w	ip, r4, r1
 800ce7e:	1840      	addle	r0, r0, r1
 800ce80:	0052      	lsls	r2, r2, #1
 800ce82:	f1be 0e01 	subs.w	lr, lr, #1
 800ce86:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ce8a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ce8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce92:	d1ed      	bne.n	800ce70 <__ieee754_sqrt+0x94>
 800ce94:	4671      	mov	r1, lr
 800ce96:	2720      	movs	r7, #32
 800ce98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ce9c:	4562      	cmp	r2, ip
 800ce9e:	eb04 060e 	add.w	r6, r4, lr
 800cea2:	dc02      	bgt.n	800ceaa <__ieee754_sqrt+0xce>
 800cea4:	d113      	bne.n	800cece <__ieee754_sqrt+0xf2>
 800cea6:	429e      	cmp	r6, r3
 800cea8:	d811      	bhi.n	800cece <__ieee754_sqrt+0xf2>
 800ceaa:	2e00      	cmp	r6, #0
 800ceac:	eb06 0e04 	add.w	lr, r6, r4
 800ceb0:	da43      	bge.n	800cf3a <__ieee754_sqrt+0x15e>
 800ceb2:	f1be 0f00 	cmp.w	lr, #0
 800ceb6:	db40      	blt.n	800cf3a <__ieee754_sqrt+0x15e>
 800ceb8:	f10c 0801 	add.w	r8, ip, #1
 800cebc:	eba2 020c 	sub.w	r2, r2, ip
 800cec0:	429e      	cmp	r6, r3
 800cec2:	bf88      	it	hi
 800cec4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800cec8:	1b9b      	subs	r3, r3, r6
 800ceca:	4421      	add	r1, r4
 800cecc:	46c4      	mov	ip, r8
 800cece:	0052      	lsls	r2, r2, #1
 800ced0:	3f01      	subs	r7, #1
 800ced2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ced6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ceda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cede:	d1dd      	bne.n	800ce9c <__ieee754_sqrt+0xc0>
 800cee0:	4313      	orrs	r3, r2
 800cee2:	d006      	beq.n	800cef2 <__ieee754_sqrt+0x116>
 800cee4:	1c4c      	adds	r4, r1, #1
 800cee6:	bf13      	iteet	ne
 800cee8:	3101      	addne	r1, #1
 800ceea:	3001      	addeq	r0, #1
 800ceec:	4639      	moveq	r1, r7
 800ceee:	f021 0101 	bicne.w	r1, r1, #1
 800cef2:	1043      	asrs	r3, r0, #1
 800cef4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cef8:	0849      	lsrs	r1, r1, #1
 800cefa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cefe:	07c2      	lsls	r2, r0, #31
 800cf00:	bf48      	it	mi
 800cf02:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cf06:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	463d      	mov	r5, r7
 800cf0e:	e77f      	b.n	800ce10 <__ieee754_sqrt+0x34>
 800cf10:	0ada      	lsrs	r2, r3, #11
 800cf12:	3815      	subs	r0, #21
 800cf14:	055b      	lsls	r3, r3, #21
 800cf16:	2a00      	cmp	r2, #0
 800cf18:	d0fa      	beq.n	800cf10 <__ieee754_sqrt+0x134>
 800cf1a:	02d7      	lsls	r7, r2, #11
 800cf1c:	d50a      	bpl.n	800cf34 <__ieee754_sqrt+0x158>
 800cf1e:	f1c1 0420 	rsb	r4, r1, #32
 800cf22:	fa23 f404 	lsr.w	r4, r3, r4
 800cf26:	1e4d      	subs	r5, r1, #1
 800cf28:	408b      	lsls	r3, r1
 800cf2a:	4322      	orrs	r2, r4
 800cf2c:	1b41      	subs	r1, r0, r5
 800cf2e:	e788      	b.n	800ce42 <__ieee754_sqrt+0x66>
 800cf30:	4608      	mov	r0, r1
 800cf32:	e7f0      	b.n	800cf16 <__ieee754_sqrt+0x13a>
 800cf34:	0052      	lsls	r2, r2, #1
 800cf36:	3101      	adds	r1, #1
 800cf38:	e7ef      	b.n	800cf1a <__ieee754_sqrt+0x13e>
 800cf3a:	46e0      	mov	r8, ip
 800cf3c:	e7be      	b.n	800cebc <__ieee754_sqrt+0xe0>
 800cf3e:	bf00      	nop
 800cf40:	7ff00000 	.word	0x7ff00000

0800cf44 <__ieee754_powf>:
 800cf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf48:	ee10 5a90 	vmov	r5, s1
 800cf4c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800cf50:	ed2d 8b02 	vpush	{d8}
 800cf54:	eeb0 8a40 	vmov.f32	s16, s0
 800cf58:	eef0 8a60 	vmov.f32	s17, s1
 800cf5c:	f000 8291 	beq.w	800d482 <__ieee754_powf+0x53e>
 800cf60:	ee10 8a10 	vmov	r8, s0
 800cf64:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800cf68:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cf6c:	dc06      	bgt.n	800cf7c <__ieee754_powf+0x38>
 800cf6e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cf72:	dd0a      	ble.n	800cf8a <__ieee754_powf+0x46>
 800cf74:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cf78:	f000 8283 	beq.w	800d482 <__ieee754_powf+0x53e>
 800cf7c:	ecbd 8b02 	vpop	{d8}
 800cf80:	48d8      	ldr	r0, [pc, #864]	; (800d2e4 <__ieee754_powf+0x3a0>)
 800cf82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf86:	f000 bbe5 	b.w	800d754 <nanf>
 800cf8a:	f1b8 0f00 	cmp.w	r8, #0
 800cf8e:	da1f      	bge.n	800cfd0 <__ieee754_powf+0x8c>
 800cf90:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800cf94:	da2e      	bge.n	800cff4 <__ieee754_powf+0xb0>
 800cf96:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cf9a:	f2c0 827b 	blt.w	800d494 <__ieee754_powf+0x550>
 800cf9e:	15fb      	asrs	r3, r7, #23
 800cfa0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cfa4:	fa47 f603 	asr.w	r6, r7, r3
 800cfa8:	fa06 f303 	lsl.w	r3, r6, r3
 800cfac:	42bb      	cmp	r3, r7
 800cfae:	f040 8271 	bne.w	800d494 <__ieee754_powf+0x550>
 800cfb2:	f006 0601 	and.w	r6, r6, #1
 800cfb6:	f1c6 0602 	rsb	r6, r6, #2
 800cfba:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cfbe:	d120      	bne.n	800d002 <__ieee754_powf+0xbe>
 800cfc0:	2d00      	cmp	r5, #0
 800cfc2:	f280 8264 	bge.w	800d48e <__ieee754_powf+0x54a>
 800cfc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cfca:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cfce:	e00d      	b.n	800cfec <__ieee754_powf+0xa8>
 800cfd0:	2600      	movs	r6, #0
 800cfd2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cfd6:	d1f0      	bne.n	800cfba <__ieee754_powf+0x76>
 800cfd8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cfdc:	f000 8251 	beq.w	800d482 <__ieee754_powf+0x53e>
 800cfe0:	dd0a      	ble.n	800cff8 <__ieee754_powf+0xb4>
 800cfe2:	2d00      	cmp	r5, #0
 800cfe4:	f280 8250 	bge.w	800d488 <__ieee754_powf+0x544>
 800cfe8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800d2e8 <__ieee754_powf+0x3a4>
 800cfec:	ecbd 8b02 	vpop	{d8}
 800cff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff4:	2602      	movs	r6, #2
 800cff6:	e7ec      	b.n	800cfd2 <__ieee754_powf+0x8e>
 800cff8:	2d00      	cmp	r5, #0
 800cffa:	daf5      	bge.n	800cfe8 <__ieee754_powf+0xa4>
 800cffc:	eeb1 0a68 	vneg.f32	s0, s17
 800d000:	e7f4      	b.n	800cfec <__ieee754_powf+0xa8>
 800d002:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800d006:	d102      	bne.n	800d00e <__ieee754_powf+0xca>
 800d008:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d00c:	e7ee      	b.n	800cfec <__ieee754_powf+0xa8>
 800d00e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800d012:	eeb0 0a48 	vmov.f32	s0, s16
 800d016:	d108      	bne.n	800d02a <__ieee754_powf+0xe6>
 800d018:	f1b8 0f00 	cmp.w	r8, #0
 800d01c:	db05      	blt.n	800d02a <__ieee754_powf+0xe6>
 800d01e:	ecbd 8b02 	vpop	{d8}
 800d022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d026:	f000 ba4d 	b.w	800d4c4 <__ieee754_sqrtf>
 800d02a:	f000 fb7f 	bl	800d72c <fabsf>
 800d02e:	b124      	cbz	r4, 800d03a <__ieee754_powf+0xf6>
 800d030:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800d034:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d038:	d117      	bne.n	800d06a <__ieee754_powf+0x126>
 800d03a:	2d00      	cmp	r5, #0
 800d03c:	bfbc      	itt	lt
 800d03e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d042:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d046:	f1b8 0f00 	cmp.w	r8, #0
 800d04a:	dacf      	bge.n	800cfec <__ieee754_powf+0xa8>
 800d04c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800d050:	ea54 0306 	orrs.w	r3, r4, r6
 800d054:	d104      	bne.n	800d060 <__ieee754_powf+0x11c>
 800d056:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d05a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d05e:	e7c5      	b.n	800cfec <__ieee754_powf+0xa8>
 800d060:	2e01      	cmp	r6, #1
 800d062:	d1c3      	bne.n	800cfec <__ieee754_powf+0xa8>
 800d064:	eeb1 0a40 	vneg.f32	s0, s0
 800d068:	e7c0      	b.n	800cfec <__ieee754_powf+0xa8>
 800d06a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800d06e:	3801      	subs	r0, #1
 800d070:	ea56 0300 	orrs.w	r3, r6, r0
 800d074:	d104      	bne.n	800d080 <__ieee754_powf+0x13c>
 800d076:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d07a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d07e:	e7b5      	b.n	800cfec <__ieee754_powf+0xa8>
 800d080:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800d084:	dd6b      	ble.n	800d15e <__ieee754_powf+0x21a>
 800d086:	4b99      	ldr	r3, [pc, #612]	; (800d2ec <__ieee754_powf+0x3a8>)
 800d088:	429c      	cmp	r4, r3
 800d08a:	dc06      	bgt.n	800d09a <__ieee754_powf+0x156>
 800d08c:	2d00      	cmp	r5, #0
 800d08e:	daab      	bge.n	800cfe8 <__ieee754_powf+0xa4>
 800d090:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800d2f0 <__ieee754_powf+0x3ac>
 800d094:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d098:	e7a8      	b.n	800cfec <__ieee754_powf+0xa8>
 800d09a:	4b96      	ldr	r3, [pc, #600]	; (800d2f4 <__ieee754_powf+0x3b0>)
 800d09c:	429c      	cmp	r4, r3
 800d09e:	dd02      	ble.n	800d0a6 <__ieee754_powf+0x162>
 800d0a0:	2d00      	cmp	r5, #0
 800d0a2:	dcf5      	bgt.n	800d090 <__ieee754_powf+0x14c>
 800d0a4:	e7a0      	b.n	800cfe8 <__ieee754_powf+0xa4>
 800d0a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d0aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d0ae:	eddf 6a92 	vldr	s13, [pc, #584]	; 800d2f8 <__ieee754_powf+0x3b4>
 800d0b2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d0b6:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d0ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d0be:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d0c2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ca:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800d2fc <__ieee754_powf+0x3b8>
 800d0ce:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800d0d2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d300 <__ieee754_powf+0x3bc>
 800d0d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d0da:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d304 <__ieee754_powf+0x3c0>
 800d0de:	eef0 6a67 	vmov.f32	s13, s15
 800d0e2:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d0e6:	ee16 3a90 	vmov	r3, s13
 800d0ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d0ee:	f023 030f 	bic.w	r3, r3, #15
 800d0f2:	ee00 3a90 	vmov	s1, r3
 800d0f6:	eee0 0a47 	vfms.f32	s1, s0, s14
 800d0fa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d0fe:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d102:	f025 050f 	bic.w	r5, r5, #15
 800d106:	ee07 5a10 	vmov	s14, r5
 800d10a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d10e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d11a:	3e01      	subs	r6, #1
 800d11c:	ea56 0200 	orrs.w	r2, r6, r0
 800d120:	ee07 5a10 	vmov	s14, r5
 800d124:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d128:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d12c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d130:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d134:	ee17 4a10 	vmov	r4, s14
 800d138:	bf08      	it	eq
 800d13a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d13e:	2c00      	cmp	r4, #0
 800d140:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d144:	f340 8184 	ble.w	800d450 <__ieee754_powf+0x50c>
 800d148:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d14c:	f340 80fc 	ble.w	800d348 <__ieee754_powf+0x404>
 800d150:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d2f0 <__ieee754_powf+0x3ac>
 800d154:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d158:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d15c:	e746      	b.n	800cfec <__ieee754_powf+0xa8>
 800d15e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800d162:	bf01      	itttt	eq
 800d164:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800d308 <__ieee754_powf+0x3c4>
 800d168:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d16c:	f06f 0217 	mvneq.w	r2, #23
 800d170:	ee17 4a90 	vmoveq	r4, s15
 800d174:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d178:	bf18      	it	ne
 800d17a:	2200      	movne	r2, #0
 800d17c:	3b7f      	subs	r3, #127	; 0x7f
 800d17e:	4413      	add	r3, r2
 800d180:	4a62      	ldr	r2, [pc, #392]	; (800d30c <__ieee754_powf+0x3c8>)
 800d182:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d186:	4294      	cmp	r4, r2
 800d188:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d18c:	dd06      	ble.n	800d19c <__ieee754_powf+0x258>
 800d18e:	4a60      	ldr	r2, [pc, #384]	; (800d310 <__ieee754_powf+0x3cc>)
 800d190:	4294      	cmp	r4, r2
 800d192:	f340 80a4 	ble.w	800d2de <__ieee754_powf+0x39a>
 800d196:	3301      	adds	r3, #1
 800d198:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d19c:	2400      	movs	r4, #0
 800d19e:	4a5d      	ldr	r2, [pc, #372]	; (800d314 <__ieee754_powf+0x3d0>)
 800d1a0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d1a4:	ee07 1a90 	vmov	s15, r1
 800d1a8:	ed92 7a00 	vldr	s14, [r2]
 800d1ac:	4a5a      	ldr	r2, [pc, #360]	; (800d318 <__ieee754_powf+0x3d4>)
 800d1ae:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d1b2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d1b6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d1ba:	1049      	asrs	r1, r1, #1
 800d1bc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d1c0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d1c4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d1c8:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d1cc:	ee06 1a10 	vmov	s12, r1
 800d1d0:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d1d4:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d1d8:	ee14 7a90 	vmov	r7, s9
 800d1dc:	4017      	ands	r7, r2
 800d1de:	ee05 7a90 	vmov	s11, r7
 800d1e2:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d1e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1ea:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d31c <__ieee754_powf+0x3d8>
 800d1ee:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d1f2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d1f6:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d1fa:	eddf 6a49 	vldr	s13, [pc, #292]	; 800d320 <__ieee754_powf+0x3dc>
 800d1fe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d202:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d324 <__ieee754_powf+0x3e0>
 800d206:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d20a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800d2f8 <__ieee754_powf+0x3b4>
 800d20e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d212:	eddf 6a45 	vldr	s13, [pc, #276]	; 800d328 <__ieee754_powf+0x3e4>
 800d216:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d21a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d32c <__ieee754_powf+0x3e8>
 800d21e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d222:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d226:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d22a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d22e:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d232:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d236:	eef0 7a45 	vmov.f32	s15, s10
 800d23a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d242:	ee17 1a90 	vmov	r1, s15
 800d246:	4011      	ands	r1, r2
 800d248:	ee07 1a90 	vmov	s15, r1
 800d24c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d250:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d254:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d258:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d25c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d260:	eeb0 6a47 	vmov.f32	s12, s14
 800d264:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d268:	ee16 1a10 	vmov	r1, s12
 800d26c:	4011      	ands	r1, r2
 800d26e:	ee06 1a90 	vmov	s13, r1
 800d272:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d276:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800d330 <__ieee754_powf+0x3ec>
 800d27a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d334 <__ieee754_powf+0x3f0>
 800d27e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d282:	ee06 1a10 	vmov	s12, r1
 800d286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d28a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d338 <__ieee754_powf+0x3f4>
 800d28e:	492b      	ldr	r1, [pc, #172]	; (800d33c <__ieee754_powf+0x3f8>)
 800d290:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d294:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d298:	edd1 7a00 	vldr	s15, [r1]
 800d29c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d2a0:	ee07 3a90 	vmov	s15, r3
 800d2a4:	4b26      	ldr	r3, [pc, #152]	; (800d340 <__ieee754_powf+0x3fc>)
 800d2a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d2aa:	eef0 7a47 	vmov.f32	s15, s14
 800d2ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d2b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d2b6:	edd4 0a00 	vldr	s1, [r4]
 800d2ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2c2:	ee17 3a90 	vmov	r3, s15
 800d2c6:	4013      	ands	r3, r2
 800d2c8:	ee07 3a90 	vmov	s15, r3
 800d2cc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d2d0:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d2d4:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d2d8:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d2dc:	e70f      	b.n	800d0fe <__ieee754_powf+0x1ba>
 800d2de:	2401      	movs	r4, #1
 800d2e0:	e75d      	b.n	800d19e <__ieee754_powf+0x25a>
 800d2e2:	bf00      	nop
 800d2e4:	0800e485 	.word	0x0800e485
 800d2e8:	00000000 	.word	0x00000000
 800d2ec:	3f7ffff7 	.word	0x3f7ffff7
 800d2f0:	7149f2ca 	.word	0x7149f2ca
 800d2f4:	3f800007 	.word	0x3f800007
 800d2f8:	3eaaaaab 	.word	0x3eaaaaab
 800d2fc:	3fb8aa3b 	.word	0x3fb8aa3b
 800d300:	36eca570 	.word	0x36eca570
 800d304:	3fb8aa00 	.word	0x3fb8aa00
 800d308:	4b800000 	.word	0x4b800000
 800d30c:	001cc471 	.word	0x001cc471
 800d310:	005db3d6 	.word	0x005db3d6
 800d314:	0800e4e8 	.word	0x0800e4e8
 800d318:	fffff000 	.word	0xfffff000
 800d31c:	3e6c3255 	.word	0x3e6c3255
 800d320:	3e53f142 	.word	0x3e53f142
 800d324:	3e8ba305 	.word	0x3e8ba305
 800d328:	3edb6db7 	.word	0x3edb6db7
 800d32c:	3f19999a 	.word	0x3f19999a
 800d330:	3f76384f 	.word	0x3f76384f
 800d334:	3f763800 	.word	0x3f763800
 800d338:	369dc3a0 	.word	0x369dc3a0
 800d33c:	0800e4f8 	.word	0x0800e4f8
 800d340:	0800e4f0 	.word	0x0800e4f0
 800d344:	3338aa3c 	.word	0x3338aa3c
 800d348:	f040 8092 	bne.w	800d470 <__ieee754_powf+0x52c>
 800d34c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d344 <__ieee754_powf+0x400>
 800d350:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d354:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d358:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d360:	f73f aef6 	bgt.w	800d150 <__ieee754_powf+0x20c>
 800d364:	15db      	asrs	r3, r3, #23
 800d366:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d36a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d36e:	4103      	asrs	r3, r0
 800d370:	4423      	add	r3, r4
 800d372:	4949      	ldr	r1, [pc, #292]	; (800d498 <__ieee754_powf+0x554>)
 800d374:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d378:	3a7f      	subs	r2, #127	; 0x7f
 800d37a:	4111      	asrs	r1, r2
 800d37c:	ea23 0101 	bic.w	r1, r3, r1
 800d380:	ee07 1a10 	vmov	s14, r1
 800d384:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d38c:	f1c2 0217 	rsb	r2, r2, #23
 800d390:	4110      	asrs	r0, r2
 800d392:	2c00      	cmp	r4, #0
 800d394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d398:	bfb8      	it	lt
 800d39a:	4240      	neglt	r0, r0
 800d39c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d3a0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800d49c <__ieee754_powf+0x558>
 800d3a4:	ee17 3a10 	vmov	r3, s14
 800d3a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d3ac:	f023 030f 	bic.w	r3, r3, #15
 800d3b0:	ee07 3a10 	vmov	s14, r3
 800d3b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3b8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d3bc:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d4a0 <__ieee754_powf+0x55c>
 800d3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3c4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d3c8:	eddf 6a36 	vldr	s13, [pc, #216]	; 800d4a4 <__ieee754_powf+0x560>
 800d3cc:	eeb0 0a67 	vmov.f32	s0, s15
 800d3d0:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d3d4:	eeb0 6a40 	vmov.f32	s12, s0
 800d3d8:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d3dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d3e0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d3e4:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d4a8 <__ieee754_powf+0x564>
 800d3e8:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800d4ac <__ieee754_powf+0x568>
 800d3ec:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d3f0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d4b0 <__ieee754_powf+0x56c>
 800d3f4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d3f8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800d4b4 <__ieee754_powf+0x570>
 800d3fc:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d400:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800d4b8 <__ieee754_powf+0x574>
 800d404:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d408:	eeb0 6a40 	vmov.f32	s12, s0
 800d40c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d410:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d414:	eeb0 7a46 	vmov.f32	s14, s12
 800d418:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d41c:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d420:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d424:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d42c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d430:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d434:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d438:	ee10 3a10 	vmov	r3, s0
 800d43c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d440:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d444:	da1a      	bge.n	800d47c <__ieee754_powf+0x538>
 800d446:	f000 f9e7 	bl	800d818 <scalbnf>
 800d44a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d44e:	e5cd      	b.n	800cfec <__ieee754_powf+0xa8>
 800d450:	4a1a      	ldr	r2, [pc, #104]	; (800d4bc <__ieee754_powf+0x578>)
 800d452:	4293      	cmp	r3, r2
 800d454:	dd02      	ble.n	800d45c <__ieee754_powf+0x518>
 800d456:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800d4c0 <__ieee754_powf+0x57c>
 800d45a:	e67b      	b.n	800d154 <__ieee754_powf+0x210>
 800d45c:	d108      	bne.n	800d470 <__ieee754_powf+0x52c>
 800d45e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d462:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d46a:	f6ff af7b 	blt.w	800d364 <__ieee754_powf+0x420>
 800d46e:	e7f2      	b.n	800d456 <__ieee754_powf+0x512>
 800d470:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d474:	f73f af76 	bgt.w	800d364 <__ieee754_powf+0x420>
 800d478:	2000      	movs	r0, #0
 800d47a:	e78f      	b.n	800d39c <__ieee754_powf+0x458>
 800d47c:	ee00 3a10 	vmov	s0, r3
 800d480:	e7e3      	b.n	800d44a <__ieee754_powf+0x506>
 800d482:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d486:	e5b1      	b.n	800cfec <__ieee754_powf+0xa8>
 800d488:	eeb0 0a68 	vmov.f32	s0, s17
 800d48c:	e5ae      	b.n	800cfec <__ieee754_powf+0xa8>
 800d48e:	eeb0 0a48 	vmov.f32	s0, s16
 800d492:	e5ab      	b.n	800cfec <__ieee754_powf+0xa8>
 800d494:	2600      	movs	r6, #0
 800d496:	e590      	b.n	800cfba <__ieee754_powf+0x76>
 800d498:	007fffff 	.word	0x007fffff
 800d49c:	3f317218 	.word	0x3f317218
 800d4a0:	35bfbe8c 	.word	0x35bfbe8c
 800d4a4:	3f317200 	.word	0x3f317200
 800d4a8:	3331bb4c 	.word	0x3331bb4c
 800d4ac:	b5ddea0e 	.word	0xb5ddea0e
 800d4b0:	388ab355 	.word	0x388ab355
 800d4b4:	bb360b61 	.word	0xbb360b61
 800d4b8:	3e2aaaab 	.word	0x3e2aaaab
 800d4bc:	43160000 	.word	0x43160000
 800d4c0:	0da24260 	.word	0x0da24260

0800d4c4 <__ieee754_sqrtf>:
 800d4c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d4c8:	4770      	bx	lr

0800d4ca <fabs>:
 800d4ca:	ec51 0b10 	vmov	r0, r1, d0
 800d4ce:	ee10 2a10 	vmov	r2, s0
 800d4d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4d6:	ec43 2b10 	vmov	d0, r2, r3
 800d4da:	4770      	bx	lr

0800d4dc <finite>:
 800d4dc:	b082      	sub	sp, #8
 800d4de:	ed8d 0b00 	vstr	d0, [sp]
 800d4e2:	9801      	ldr	r0, [sp, #4]
 800d4e4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d4e8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d4ec:	0fc0      	lsrs	r0, r0, #31
 800d4ee:	b002      	add	sp, #8
 800d4f0:	4770      	bx	lr
 800d4f2:	0000      	movs	r0, r0
 800d4f4:	0000      	movs	r0, r0
	...

0800d4f8 <nan>:
 800d4f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d500 <nan+0x8>
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	00000000 	.word	0x00000000
 800d504:	7ff80000 	.word	0x7ff80000

0800d508 <rint>:
 800d508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d50a:	ec51 0b10 	vmov	r0, r1, d0
 800d50e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d512:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d516:	2e13      	cmp	r6, #19
 800d518:	ee10 4a10 	vmov	r4, s0
 800d51c:	460b      	mov	r3, r1
 800d51e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d522:	dc58      	bgt.n	800d5d6 <rint+0xce>
 800d524:	2e00      	cmp	r6, #0
 800d526:	da2b      	bge.n	800d580 <rint+0x78>
 800d528:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d52c:	4302      	orrs	r2, r0
 800d52e:	d023      	beq.n	800d578 <rint+0x70>
 800d530:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d534:	4302      	orrs	r2, r0
 800d536:	4254      	negs	r4, r2
 800d538:	4314      	orrs	r4, r2
 800d53a:	0c4b      	lsrs	r3, r1, #17
 800d53c:	0b24      	lsrs	r4, r4, #12
 800d53e:	045b      	lsls	r3, r3, #17
 800d540:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d544:	ea44 0103 	orr.w	r1, r4, r3
 800d548:	4b32      	ldr	r3, [pc, #200]	; (800d614 <rint+0x10c>)
 800d54a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d54e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	4630      	mov	r0, r6
 800d558:	4639      	mov	r1, r7
 800d55a:	f7f2 fe97 	bl	800028c <__adddf3>
 800d55e:	e9cd 0100 	strd	r0, r1, [sp]
 800d562:	463b      	mov	r3, r7
 800d564:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d568:	4632      	mov	r2, r6
 800d56a:	f7f2 fe8d 	bl	8000288 <__aeabi_dsub>
 800d56e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d572:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d576:	4639      	mov	r1, r7
 800d578:	ec41 0b10 	vmov	d0, r0, r1
 800d57c:	b003      	add	sp, #12
 800d57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d580:	4a25      	ldr	r2, [pc, #148]	; (800d618 <rint+0x110>)
 800d582:	4132      	asrs	r2, r6
 800d584:	ea01 0702 	and.w	r7, r1, r2
 800d588:	4307      	orrs	r7, r0
 800d58a:	d0f5      	beq.n	800d578 <rint+0x70>
 800d58c:	0851      	lsrs	r1, r2, #1
 800d58e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800d592:	4314      	orrs	r4, r2
 800d594:	d00c      	beq.n	800d5b0 <rint+0xa8>
 800d596:	ea23 0201 	bic.w	r2, r3, r1
 800d59a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d59e:	2e13      	cmp	r6, #19
 800d5a0:	fa43 f606 	asr.w	r6, r3, r6
 800d5a4:	bf0c      	ite	eq
 800d5a6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d5aa:	2400      	movne	r4, #0
 800d5ac:	ea42 0306 	orr.w	r3, r2, r6
 800d5b0:	4918      	ldr	r1, [pc, #96]	; (800d614 <rint+0x10c>)
 800d5b2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d5b6:	4622      	mov	r2, r4
 800d5b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7f2 fe64 	bl	800028c <__adddf3>
 800d5c4:	e9cd 0100 	strd	r0, r1, [sp]
 800d5c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5cc:	4622      	mov	r2, r4
 800d5ce:	462b      	mov	r3, r5
 800d5d0:	f7f2 fe5a 	bl	8000288 <__aeabi_dsub>
 800d5d4:	e7d0      	b.n	800d578 <rint+0x70>
 800d5d6:	2e33      	cmp	r6, #51	; 0x33
 800d5d8:	dd07      	ble.n	800d5ea <rint+0xe2>
 800d5da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d5de:	d1cb      	bne.n	800d578 <rint+0x70>
 800d5e0:	ee10 2a10 	vmov	r2, s0
 800d5e4:	f7f2 fe52 	bl	800028c <__adddf3>
 800d5e8:	e7c6      	b.n	800d578 <rint+0x70>
 800d5ea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d5ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d5f2:	40d6      	lsrs	r6, r2
 800d5f4:	4230      	tst	r0, r6
 800d5f6:	d0bf      	beq.n	800d578 <rint+0x70>
 800d5f8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800d5fc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800d600:	bf1f      	itttt	ne
 800d602:	ea24 0101 	bicne.w	r1, r4, r1
 800d606:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d60a:	fa44 f202 	asrne.w	r2, r4, r2
 800d60e:	ea41 0402 	orrne.w	r4, r1, r2
 800d612:	e7cd      	b.n	800d5b0 <rint+0xa8>
 800d614:	0800e500 	.word	0x0800e500
 800d618:	000fffff 	.word	0x000fffff
 800d61c:	00000000 	.word	0x00000000

0800d620 <scalbn>:
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	ec55 4b10 	vmov	r4, r5, d0
 800d626:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d62a:	4606      	mov	r6, r0
 800d62c:	462b      	mov	r3, r5
 800d62e:	b99a      	cbnz	r2, 800d658 <scalbn+0x38>
 800d630:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d634:	4323      	orrs	r3, r4
 800d636:	d036      	beq.n	800d6a6 <scalbn+0x86>
 800d638:	4b39      	ldr	r3, [pc, #228]	; (800d720 <scalbn+0x100>)
 800d63a:	4629      	mov	r1, r5
 800d63c:	ee10 0a10 	vmov	r0, s0
 800d640:	2200      	movs	r2, #0
 800d642:	f7f2 ffd9 	bl	80005f8 <__aeabi_dmul>
 800d646:	4b37      	ldr	r3, [pc, #220]	; (800d724 <scalbn+0x104>)
 800d648:	429e      	cmp	r6, r3
 800d64a:	4604      	mov	r4, r0
 800d64c:	460d      	mov	r5, r1
 800d64e:	da10      	bge.n	800d672 <scalbn+0x52>
 800d650:	a32b      	add	r3, pc, #172	; (adr r3, 800d700 <scalbn+0xe0>)
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	e03a      	b.n	800d6ce <scalbn+0xae>
 800d658:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d65c:	428a      	cmp	r2, r1
 800d65e:	d10c      	bne.n	800d67a <scalbn+0x5a>
 800d660:	ee10 2a10 	vmov	r2, s0
 800d664:	4620      	mov	r0, r4
 800d666:	4629      	mov	r1, r5
 800d668:	f7f2 fe10 	bl	800028c <__adddf3>
 800d66c:	4604      	mov	r4, r0
 800d66e:	460d      	mov	r5, r1
 800d670:	e019      	b.n	800d6a6 <scalbn+0x86>
 800d672:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d676:	460b      	mov	r3, r1
 800d678:	3a36      	subs	r2, #54	; 0x36
 800d67a:	4432      	add	r2, r6
 800d67c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d680:	428a      	cmp	r2, r1
 800d682:	dd08      	ble.n	800d696 <scalbn+0x76>
 800d684:	2d00      	cmp	r5, #0
 800d686:	a120      	add	r1, pc, #128	; (adr r1, 800d708 <scalbn+0xe8>)
 800d688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d68c:	da1c      	bge.n	800d6c8 <scalbn+0xa8>
 800d68e:	a120      	add	r1, pc, #128	; (adr r1, 800d710 <scalbn+0xf0>)
 800d690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d694:	e018      	b.n	800d6c8 <scalbn+0xa8>
 800d696:	2a00      	cmp	r2, #0
 800d698:	dd08      	ble.n	800d6ac <scalbn+0x8c>
 800d69a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d69e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d6a6:	ec45 4b10 	vmov	d0, r4, r5
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
 800d6ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d6b0:	da19      	bge.n	800d6e6 <scalbn+0xc6>
 800d6b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d6b6:	429e      	cmp	r6, r3
 800d6b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d6bc:	dd0a      	ble.n	800d6d4 <scalbn+0xb4>
 800d6be:	a112      	add	r1, pc, #72	; (adr r1, 800d708 <scalbn+0xe8>)
 800d6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1e2      	bne.n	800d68e <scalbn+0x6e>
 800d6c8:	a30f      	add	r3, pc, #60	; (adr r3, 800d708 <scalbn+0xe8>)
 800d6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ce:	f7f2 ff93 	bl	80005f8 <__aeabi_dmul>
 800d6d2:	e7cb      	b.n	800d66c <scalbn+0x4c>
 800d6d4:	a10a      	add	r1, pc, #40	; (adr r1, 800d700 <scalbn+0xe0>)
 800d6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d0b8      	beq.n	800d650 <scalbn+0x30>
 800d6de:	a10e      	add	r1, pc, #56	; (adr r1, 800d718 <scalbn+0xf8>)
 800d6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6e4:	e7b4      	b.n	800d650 <scalbn+0x30>
 800d6e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6ea:	3236      	adds	r2, #54	; 0x36
 800d6ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <scalbn+0x108>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	e7e8      	b.n	800d6ce <scalbn+0xae>
 800d6fc:	f3af 8000 	nop.w
 800d700:	c2f8f359 	.word	0xc2f8f359
 800d704:	01a56e1f 	.word	0x01a56e1f
 800d708:	8800759c 	.word	0x8800759c
 800d70c:	7e37e43c 	.word	0x7e37e43c
 800d710:	8800759c 	.word	0x8800759c
 800d714:	fe37e43c 	.word	0xfe37e43c
 800d718:	c2f8f359 	.word	0xc2f8f359
 800d71c:	81a56e1f 	.word	0x81a56e1f
 800d720:	43500000 	.word	0x43500000
 800d724:	ffff3cb0 	.word	0xffff3cb0
 800d728:	3c900000 	.word	0x3c900000

0800d72c <fabsf>:
 800d72c:	ee10 3a10 	vmov	r3, s0
 800d730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d734:	ee00 3a10 	vmov	s0, r3
 800d738:	4770      	bx	lr

0800d73a <finitef>:
 800d73a:	b082      	sub	sp, #8
 800d73c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d740:	9801      	ldr	r0, [sp, #4]
 800d742:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d746:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d74a:	bfac      	ite	ge
 800d74c:	2000      	movge	r0, #0
 800d74e:	2001      	movlt	r0, #1
 800d750:	b002      	add	sp, #8
 800d752:	4770      	bx	lr

0800d754 <nanf>:
 800d754:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d75c <nanf+0x8>
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	7fc00000 	.word	0x7fc00000

0800d760 <rintf>:
 800d760:	ee10 2a10 	vmov	r2, s0
 800d764:	b513      	push	{r0, r1, r4, lr}
 800d766:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d76a:	397f      	subs	r1, #127	; 0x7f
 800d76c:	2916      	cmp	r1, #22
 800d76e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d772:	dc47      	bgt.n	800d804 <rintf+0xa4>
 800d774:	b32b      	cbz	r3, 800d7c2 <rintf+0x62>
 800d776:	2900      	cmp	r1, #0
 800d778:	ee10 3a10 	vmov	r3, s0
 800d77c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800d780:	da21      	bge.n	800d7c6 <rintf+0x66>
 800d782:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800d786:	425b      	negs	r3, r3
 800d788:	4921      	ldr	r1, [pc, #132]	; (800d810 <rintf+0xb0>)
 800d78a:	0a5b      	lsrs	r3, r3, #9
 800d78c:	0d12      	lsrs	r2, r2, #20
 800d78e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d792:	0512      	lsls	r2, r2, #20
 800d794:	4313      	orrs	r3, r2
 800d796:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800d79a:	ee07 3a90 	vmov	s15, r3
 800d79e:	edd1 6a00 	vldr	s13, [r1]
 800d7a2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800d7a6:	ed8d 7a01 	vstr	s14, [sp, #4]
 800d7aa:	eddd 7a01 	vldr	s15, [sp, #4]
 800d7ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d7b2:	ee17 3a90 	vmov	r3, s15
 800d7b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7ba:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800d7be:	ee00 3a10 	vmov	s0, r3
 800d7c2:	b002      	add	sp, #8
 800d7c4:	bd10      	pop	{r4, pc}
 800d7c6:	4a13      	ldr	r2, [pc, #76]	; (800d814 <rintf+0xb4>)
 800d7c8:	410a      	asrs	r2, r1
 800d7ca:	4213      	tst	r3, r2
 800d7cc:	d0f9      	beq.n	800d7c2 <rintf+0x62>
 800d7ce:	0854      	lsrs	r4, r2, #1
 800d7d0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800d7d4:	d006      	beq.n	800d7e4 <rintf+0x84>
 800d7d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d7da:	ea23 0304 	bic.w	r3, r3, r4
 800d7de:	fa42 f101 	asr.w	r1, r2, r1
 800d7e2:	430b      	orrs	r3, r1
 800d7e4:	4a0a      	ldr	r2, [pc, #40]	; (800d810 <rintf+0xb0>)
 800d7e6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d7ea:	ed90 7a00 	vldr	s14, [r0]
 800d7ee:	ee07 3a90 	vmov	s15, r3
 800d7f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7f6:	edcd 7a01 	vstr	s15, [sp, #4]
 800d7fa:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d7fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d802:	e7de      	b.n	800d7c2 <rintf+0x62>
 800d804:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d808:	d3db      	bcc.n	800d7c2 <rintf+0x62>
 800d80a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d80e:	e7d8      	b.n	800d7c2 <rintf+0x62>
 800d810:	0800e510 	.word	0x0800e510
 800d814:	007fffff 	.word	0x007fffff

0800d818 <scalbnf>:
 800d818:	ee10 3a10 	vmov	r3, s0
 800d81c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d820:	d025      	beq.n	800d86e <scalbnf+0x56>
 800d822:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d826:	d302      	bcc.n	800d82e <scalbnf+0x16>
 800d828:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d82c:	4770      	bx	lr
 800d82e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d832:	d122      	bne.n	800d87a <scalbnf+0x62>
 800d834:	4b2a      	ldr	r3, [pc, #168]	; (800d8e0 <scalbnf+0xc8>)
 800d836:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d8e4 <scalbnf+0xcc>
 800d83a:	4298      	cmp	r0, r3
 800d83c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d840:	db16      	blt.n	800d870 <scalbnf+0x58>
 800d842:	ee10 3a10 	vmov	r3, s0
 800d846:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d84a:	3a19      	subs	r2, #25
 800d84c:	4402      	add	r2, r0
 800d84e:	2afe      	cmp	r2, #254	; 0xfe
 800d850:	dd15      	ble.n	800d87e <scalbnf+0x66>
 800d852:	ee10 3a10 	vmov	r3, s0
 800d856:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d8e8 <scalbnf+0xd0>
 800d85a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d8ec <scalbnf+0xd4>
 800d85e:	2b00      	cmp	r3, #0
 800d860:	eeb0 7a67 	vmov.f32	s14, s15
 800d864:	bfb8      	it	lt
 800d866:	eef0 7a66 	vmovlt.f32	s15, s13
 800d86a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d86e:	4770      	bx	lr
 800d870:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d8f0 <scalbnf+0xd8>
 800d874:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d878:	4770      	bx	lr
 800d87a:	0dd2      	lsrs	r2, r2, #23
 800d87c:	e7e6      	b.n	800d84c <scalbnf+0x34>
 800d87e:	2a00      	cmp	r2, #0
 800d880:	dd06      	ble.n	800d890 <scalbnf+0x78>
 800d882:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d886:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d88a:	ee00 3a10 	vmov	s0, r3
 800d88e:	4770      	bx	lr
 800d890:	f112 0f16 	cmn.w	r2, #22
 800d894:	da1a      	bge.n	800d8cc <scalbnf+0xb4>
 800d896:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d89a:	4298      	cmp	r0, r3
 800d89c:	ee10 3a10 	vmov	r3, s0
 800d8a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8a4:	dd0a      	ble.n	800d8bc <scalbnf+0xa4>
 800d8a6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d8e8 <scalbnf+0xd0>
 800d8aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d8ec <scalbnf+0xd4>
 800d8ae:	eef0 7a40 	vmov.f32	s15, s0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	bf18      	it	ne
 800d8b6:	eeb0 0a47 	vmovne.f32	s0, s14
 800d8ba:	e7db      	b.n	800d874 <scalbnf+0x5c>
 800d8bc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d8f0 <scalbnf+0xd8>
 800d8c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d8f4 <scalbnf+0xdc>
 800d8c4:	eef0 7a40 	vmov.f32	s15, s0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	e7f3      	b.n	800d8b4 <scalbnf+0x9c>
 800d8cc:	3219      	adds	r2, #25
 800d8ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d8d6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d8f8 <scalbnf+0xe0>
 800d8da:	ee07 3a10 	vmov	s14, r3
 800d8de:	e7c4      	b.n	800d86a <scalbnf+0x52>
 800d8e0:	ffff3cb0 	.word	0xffff3cb0
 800d8e4:	4c000000 	.word	0x4c000000
 800d8e8:	7149f2ca 	.word	0x7149f2ca
 800d8ec:	f149f2ca 	.word	0xf149f2ca
 800d8f0:	0da24260 	.word	0x0da24260
 800d8f4:	8da24260 	.word	0x8da24260
 800d8f8:	33000000 	.word	0x33000000

0800d8fc <_init>:
 800d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fe:	bf00      	nop
 800d900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d902:	bc08      	pop	{r3}
 800d904:	469e      	mov	lr, r3
 800d906:	4770      	bx	lr

0800d908 <_fini>:
 800d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90a:	bf00      	nop
 800d90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d90e:	bc08      	pop	{r3}
 800d910:	469e      	mov	lr, r3
 800d912:	4770      	bx	lr
