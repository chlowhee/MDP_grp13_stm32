
MDP_grp13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b30  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc0  08007bc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ee4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f58  20004f58  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018034  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003136  00000000  00000000  000380d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0003b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001188  00000000  00000000  0003c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ef  00000000  00000000  0003d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138c7  00000000  00000000  00040c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2aaf  00000000  00000000  0005451e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00126fcd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005360  00000000  00000000  00127020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007070 	.word	0x08007070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007070 	.word	0x08007070

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	0000      	movs	r0, r0
	...

08000b88 <motorControl>:
int16_t diffl = 0, diffr = 0, avg = 0;
int32_t tick = 0;
uint8_t display[20];

//Master function for all motor functions
int motorControl(int speedL, int speedR, char dirL, char dirR, int turn, int time, int dist){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	4611      	mov	r1, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	460b      	mov	r3, r1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	71bb      	strb	r3, [r7, #6]

	//declaration
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		//left encoder(MotorA) start
 8000b9e:	213c      	movs	r1, #60	; 0x3c
 8000ba0:	4895      	ldr	r0, [pc, #596]	; (8000df8 <motorControl+0x270>)
 8000ba2:	f002 f85b 	bl	8002c5c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		//right encoder(MotorB) start
 8000ba6:	213c      	movs	r1, #60	; 0x3c
 8000ba8:	4894      	ldr	r0, [pc, #592]	; (8000dfc <motorControl+0x274>)
 8000baa:	f002 f857 	bl	8002c5c <HAL_TIM_Encoder_Start>
	int cntl1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000bae:	4b92      	ldr	r3, [pc, #584]	; (8000df8 <motorControl+0x270>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	61bb      	str	r3, [r7, #24]
	int cntr1 = __HAL_TIM_GET_COUNTER(&htim3);
 8000bb6:	4b91      	ldr	r3, [pc, #580]	; (8000dfc <motorControl+0x274>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbc:	617b      	str	r3, [r7, #20]
	tick = HAL_GetTick();
 8000bbe:	f000 ff1f 	bl	8001a00 <HAL_GetTick>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b8e      	ldr	r3, [pc, #568]	; (8000e00 <motorControl+0x278>)
 8000bc8:	601a      	str	r2, [r3, #0]
	int encDist = dist * 75;
 8000bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	011a      	lsls	r2, r3, #4
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	613b      	str	r3, [r7, #16]
	speedR = speedR *0.92;
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f7ff fdc5 	bl	8000768 <__aeabi_i2d>
 8000bde:	a384      	add	r3, pc, #528	; (adr r3, 8000df0 <motorControl+0x268>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff fb44 	bl	8000270 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f7ff fe24 	bl	800083c <__aeabi_d2iz>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60bb      	str	r3, [r7, #8]

	int currTime = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]

	//Select direction of motor//

	switch(dirL){
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b46      	cmp	r3, #70	; 0x46
 8000c00:	d002      	beq.n	8000c08 <motorControl+0x80>
 8000c02:	2b52      	cmp	r3, #82	; 0x52
 8000c04:	d00b      	beq.n	8000c1e <motorControl+0x96>
 8000c06:	e015      	b.n	8000c34 <motorControl+0xac>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	487d      	ldr	r0, [pc, #500]	; (8000e04 <motorControl+0x27c>)
 8000c0e:	f001 f9a9 	bl	8001f64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2104      	movs	r1, #4
 8000c16:	487b      	ldr	r0, [pc, #492]	; (8000e04 <motorControl+0x27c>)
 8000c18:	f001 f9a4 	bl	8001f64 <HAL_GPIO_WritePin>
			break;
 8000c1c:	e00a      	b.n	8000c34 <motorControl+0xac>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2108      	movs	r1, #8
 8000c22:	4878      	ldr	r0, [pc, #480]	; (8000e04 <motorControl+0x27c>)
 8000c24:	f001 f99e 	bl	8001f64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4875      	ldr	r0, [pc, #468]	; (8000e04 <motorControl+0x27c>)
 8000c2e:	f001 f999 	bl	8001f64 <HAL_GPIO_WritePin>
			break;
 8000c32:	bf00      	nop
	}

	switch(dirR){
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b46      	cmp	r3, #70	; 0x46
 8000c38:	d002      	beq.n	8000c40 <motorControl+0xb8>
 8000c3a:	2b52      	cmp	r3, #82	; 0x52
 8000c3c:	d00b      	beq.n	8000c56 <motorControl+0xce>
 8000c3e:	e015      	b.n	8000c6c <motorControl+0xe4>
		case 'F':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	486f      	ldr	r0, [pc, #444]	; (8000e04 <motorControl+0x27c>)
 8000c46:	f001 f98d 	bl	8001f64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	486d      	ldr	r0, [pc, #436]	; (8000e04 <motorControl+0x27c>)
 8000c50:	f001 f988 	bl	8001f64 <HAL_GPIO_WritePin>
			break;
 8000c54:	e00a      	b.n	8000c6c <motorControl+0xe4>

		case 'R':
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	486a      	ldr	r0, [pc, #424]	; (8000e04 <motorControl+0x27c>)
 8000c5c:	f001 f982 	bl	8001f64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2120      	movs	r1, #32
 8000c64:	4867      	ldr	r0, [pc, #412]	; (8000e04 <motorControl+0x27c>)
 8000c66:	f001 f97d 	bl	8001f64 <HAL_GPIO_WritePin>
			break;
 8000c6a:	bf00      	nop
	}
	//End of motor direction selection//

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8000c6c:	4b66      	ldr	r3, [pc, #408]	; (8000e08 <motorControl+0x280>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 8000c74:	4b64      	ldr	r3, [pc, #400]	; (8000e08 <motorControl+0x280>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38


	while(currTime<time){
 8000c7c:	e0dc      	b.n	8000e38 <motorControl+0x2b0>
		if(HAL_GetTick()-tick > 100L){
 8000c7e:	f000 febf 	bl	8001a00 <HAL_GetTick>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a5e      	ldr	r2, [pc, #376]	; (8000e00 <motorControl+0x278>)
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	2b64      	cmp	r3, #100	; 0x64
 8000c8c:	d969      	bls.n	8000d62 <motorControl+0x1da>
				cntl2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c8e:	4b5a      	ldr	r3, [pc, #360]	; (8000df8 <motorControl+0x270>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	4b5d      	ldr	r3, [pc, #372]	; (8000e0c <motorControl+0x284>)
 8000c98:	801a      	strh	r2, [r3, #0]
				cntr2 = __HAL_TIM_GET_COUNTER(&htim3);
 8000c9a:	4b58      	ldr	r3, [pc, #352]	; (8000dfc <motorControl+0x274>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	4b5b      	ldr	r3, [pc, #364]	; (8000e10 <motorControl+0x288>)
 8000ca4:	801a      	strh	r2, [r3, #0]
				if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8000ca6:	4b54      	ldr	r3, [pc, #336]	; (8000df8 <motorControl+0x270>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	2b10      	cmp	r3, #16
 8000cb2:	d10b      	bne.n	8000ccc <motorControl+0x144>
					diffl = cntl1 - cntl2;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <motorControl+0x284>)
 8000cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b53      	ldr	r3, [pc, #332]	; (8000e14 <motorControl+0x28c>)
 8000cc8:	801a      	strh	r2, [r3, #0]
 8000cca:	e00a      	b.n	8000ce2 <motorControl+0x15a>
				else
					diffl = cntl2 - cntl1;
 8000ccc:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <motorControl+0x284>)
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <motorControl+0x28c>)
 8000ce0:	801a      	strh	r2, [r3, #0]
				if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <motorControl+0x274>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b10      	cmp	r3, #16
 8000cee:	d10b      	bne.n	8000d08 <motorControl+0x180>
					diffr = cntr1 - cntr2;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <motorControl+0x288>)
 8000cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	4b45      	ldr	r3, [pc, #276]	; (8000e18 <motorControl+0x290>)
 8000d04:	801a      	strh	r2, [r3, #0]
 8000d06:	e00a      	b.n	8000d1e <motorControl+0x196>
				else
					diffr = cntr2 - cntr1;
 8000d08:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <motorControl+0x288>)
 8000d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <motorControl+0x290>)
 8000d1c:	801a      	strh	r2, [r3, #0]
				avg = (diffl+diffr)/2;
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <motorControl+0x28c>)
 8000d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <motorControl+0x290>)
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	0fda      	lsrs	r2, r3, #31
 8000d30:	4413      	add	r3, r2
 8000d32:	105b      	asrs	r3, r3, #1
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <motorControl+0x294>)
 8000d38:	801a      	strh	r2, [r3, #0]
				sprintf(display,"Distance:%5d\0", avg/75);
 8000d3a:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <motorControl+0x294>)
 8000d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d40:	4a37      	ldr	r2, [pc, #220]	; (8000e20 <motorControl+0x298>)
 8000d42:	fb82 1203 	smull	r1, r2, r2, r3
 8000d46:	10d2      	asrs	r2, r2, #3
 8000d48:	17db      	asrs	r3, r3, #31
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4934      	ldr	r1, [pc, #208]	; (8000e24 <motorControl+0x29c>)
 8000d52:	4835      	ldr	r0, [pc, #212]	; (8000e28 <motorControl+0x2a0>)
 8000d54:	f005 fd6c 	bl	8006830 <siprintf>
				OLED_ShowString(10,20,display);
 8000d58:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <motorControl+0x2a0>)
 8000d5a:	2114      	movs	r1, #20
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f005 fc69 	bl	8006634 <OLED_ShowString>

			}

			if(diffl>diffr&&turn==0){
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <motorControl+0x28c>)
 8000d64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <motorControl+0x290>)
 8000d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dd10      	ble.n	8000d94 <motorControl+0x20c>
 8000d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10d      	bne.n	8000d94 <motorControl+0x20c>
				speedL = (speedL-100);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3b64      	subs	r3, #100	; 0x64
 8000d7c:	60fb      	str	r3, [r7, #12]
				speedR = (speedR+100);
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	3364      	adds	r3, #100	; 0x64
 8000d82:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <motorControl+0x280>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <motorControl+0x280>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if(diffl<diffr&&turn==0){
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <motorControl+0x28c>)
 8000d96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <motorControl+0x290>)
 8000d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	da10      	bge.n	8000dc6 <motorControl+0x23e>
 8000da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10d      	bne.n	8000dc6 <motorControl+0x23e>
				speedL = (speedL+100);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3364      	adds	r3, #100	; 0x64
 8000dae:	60fb      	str	r3, [r7, #12]
				speedR = (speedR-100);
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	3b64      	subs	r3, #100	; 0x64
 8000db4:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, speedL);
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <motorControl+0x280>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, speedR);
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <motorControl+0x280>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	639a      	str	r2, [r3, #56]	; 0x38
			}
			if(avg>=encDist){
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <motorControl+0x294>)
 8000dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	dc2b      	bgt.n	8000e2c <motorControl+0x2a4>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <motorControl+0x280>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <motorControl+0x280>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
				osDelay(500);
 8000de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de8:	f002 fe3e 	bl	8003a68 <osDelay>
				break;
 8000dec:	e029      	b.n	8000e42 <motorControl+0x2ba>
 8000dee:	bf00      	nop
 8000df0:	d70a3d71 	.word	0xd70a3d71
 8000df4:	3fed70a3 	.word	0x3fed70a3
 8000df8:	20004abc 	.word	0x20004abc
 8000dfc:	20004a28 	.word	0x20004a28
 8000e00:	20000098 	.word	0x20000098
 8000e04:	40020000 	.word	0x40020000
 8000e08:	200049bc 	.word	0x200049bc
 8000e0c:	20004a10 	.word	0x20004a10
 8000e10:	200049b8 	.word	0x200049b8
 8000e14:	20000090 	.word	0x20000090
 8000e18:	20000092 	.word	0x20000092
 8000e1c:	20000094 	.word	0x20000094
 8000e20:	1b4e81b5 	.word	0x1b4e81b5
 8000e24:	080070a0 	.word	0x080070a0
 8000e28:	20004a14 	.word	0x20004a14
			}
		currTime++;
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
		osDelay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f002 fe18 	bl	8003a68 <osDelay>
	while(currTime<time){
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f6ff af1e 	blt.w	8000c7e <motorControl+0xf6>
		}
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <motorControl+0x300>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <motorControl+0x300>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	639a      	str	r2, [r3, #56]	; 0x38
		speedL=speedR=tick=diffl=diffr=0;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <motorControl+0x304>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	801a      	strh	r2, [r3, #0]
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <motorControl+0x304>)
 8000e5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <motorControl+0x308>)
 8000e60:	801a      	strh	r2, [r3, #0]
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <motorControl+0x308>)
 8000e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <motorControl+0x30c>)
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <motorControl+0x30c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60fb      	str	r3, [r7, #12]
		OLED_Refresh_Gram();
 8000e78:	f005 fa68 	bl	800634c <OLED_Refresh_Gram>
}
 8000e7c:	bf00      	nop
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200049bc 	.word	0x200049bc
 8000e8c:	20000092 	.word	0x20000092
 8000e90:	20000090 	.word	0x20000090
 8000e94:	20000098 	.word	0x20000098

08000e98 <left>:

void left(int deg){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	6078      	str	r0, [r7, #4]
	int dist = 0.4*deg;
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fc61 	bl	8000768 <__aeabi_i2d>
 8000ea6:	a315      	add	r3, pc, #84	; (adr r3, 8000efc <left+0x64>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff f9e0 	bl	8000270 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fcc0 	bl	800083c <__aeabi_d2iz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60fb      	str	r3, [r7, #12]
	htim1.Instance->CCR4 = 56;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <left+0x60>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2238      	movs	r2, #56	; 0x38
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8000ec8:	2064      	movs	r0, #100	; 0x64
 8000eca:	f002 fdcd 	bl	8003a68 <osDelay>
	motorControl(0, 5000, 'F', 'F', 1, 1000, dist);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2346      	movs	r3, #70	; 0x46
 8000ede:	2246      	movs	r2, #70	; 0x46
 8000ee0:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fe4f 	bl	8000b88 <motorControl>
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	20004a70 	.word	0x20004a70
 8000efc:	9999999a 	.word	0x9999999a
 8000f00:	3fd99999 	.word	0x3fd99999

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f000 fd14 	bl	8001934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f82c 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 fa5c 	bl	80013cc <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f14:	f000 f9ce 	bl	80012b4 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f18:	f000 f924 	bl	8001164 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1c:	f000 f882 	bl	8001024 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f20:	f000 f974 	bl	800120c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f24:	f002 fcc4 	bl	80038b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED_Toggle */
  LED_ToggleHandle = osThreadNew(StartDefaultTask, NULL, &LED_Toggle_attributes);
 8000f28:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <main+0x4c>)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <main+0x50>)
 8000f2e:	f002 fd09 	bl	8003944 <osThreadNew>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <main+0x54>)
 8000f36:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <main+0x58>)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <main+0x5c>)
 8000f3e:	f002 fd01 	bl	8003944 <osThreadNew>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <main+0x60>)
 8000f46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f48:	f002 fcd6 	bl	80038f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <main+0x48>
 8000f4e:	bf00      	nop
 8000f50:	080070c8 	.word	0x080070c8
 8000f54:	080014b9 	.word	0x080014b9
 8000f58:	20004a08 	.word	0x20004a08
 8000f5c:	080070ec 	.word	0x080070ec
 8000f60:	080014dd 	.word	0x080014dd
 8000f64:	20004a0c 	.word	0x20004a0c

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	; 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2230      	movs	r2, #48	; 0x30
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fc52 	bl	8006820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemClock_Config+0xb4>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <SystemClock_Config+0xb4>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemClock_Config+0xb4>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <SystemClock_Config+0xb8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <SystemClock_Config+0xb8>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <SystemClock_Config+0xb8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 f81f 	bl	800201c <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fe4:	f000 faa0 	bl	8001528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fa82 	bl	800250c <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800100e:	f000 fa8b 	bl	8001528 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	; 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b096      	sub	sp, #88	; 0x58
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2220      	movs	r2, #32
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f005 fbdf 	bl	8006820 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001062:	4b3e      	ldr	r3, [pc, #248]	; (800115c <MX_TIM1_Init+0x138>)
 8001064:	4a3e      	ldr	r2, [pc, #248]	; (8001160 <MX_TIM1_Init+0x13c>)
 8001066:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320;
 8001068:	4b3c      	ldr	r3, [pc, #240]	; (800115c <MX_TIM1_Init+0x138>)
 800106a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800106e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b3a      	ldr	r3, [pc, #232]	; (800115c <MX_TIM1_Init+0x138>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001076:	4b39      	ldr	r3, [pc, #228]	; (800115c <MX_TIM1_Init+0x138>)
 8001078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <MX_TIM1_Init+0x138>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001084:	4b35      	ldr	r3, [pc, #212]	; (800115c <MX_TIM1_Init+0x138>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800108a:	4b34      	ldr	r3, [pc, #208]	; (800115c <MX_TIM1_Init+0x138>)
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001090:	4832      	ldr	r0, [pc, #200]	; (800115c <MX_TIM1_Init+0x138>)
 8001092:	f001 fbd7 	bl	8002844 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800109c:	f000 fa44 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010aa:	4619      	mov	r1, r3
 80010ac:	482b      	ldr	r0, [pc, #172]	; (800115c <MX_TIM1_Init+0x138>)
 80010ae:	f001 ff25 	bl	8002efc <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010b8:	f000 fa36 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010bc:	4827      	ldr	r0, [pc, #156]	; (800115c <MX_TIM1_Init+0x138>)
 80010be:	f001 fc10 	bl	80028e2 <HAL_TIM_PWM_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010c8:	f000 fa2e 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d8:	4619      	mov	r1, r3
 80010da:	4820      	ldr	r0, [pc, #128]	; (800115c <MX_TIM1_Init+0x138>)
 80010dc:	f002 fae6 	bl	80036ac <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80010e6:	f000 fa1f 	bl	8001528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	220c      	movs	r2, #12
 8001108:	4619      	mov	r1, r3
 800110a:	4814      	ldr	r0, [pc, #80]	; (800115c <MX_TIM1_Init+0x138>)
 800110c:	f001 fe34 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001116:	f000 fa07 	bl	8001528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001132:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <MX_TIM1_Init+0x138>)
 800113e:	f002 fb31 	bl	80037a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001148:	f000 f9ee 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <MX_TIM1_Init+0x138>)
 800114e:	f000 fb21 	bl	8001794 <HAL_TIM_MspPostInit>

}
 8001152:	bf00      	nop
 8001154:	3758      	adds	r7, #88	; 0x58
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20004a70 	.word	0x20004a70
 8001160:	40010000 	.word	0x40010000

08001164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2224      	movs	r2, #36	; 0x24
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fb54 	bl	8006820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_TIM2_Init+0xa4>)
 8001182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_TIM2_Init+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_TIM2_Init+0xa4>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_TIM2_Init+0xa4>)
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM2_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011a8:	2303      	movs	r3, #3
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011b8:	230a      	movs	r3, #10
 80011ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80011c8:	230a      	movs	r3, #10
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0xa4>)
 80011d4:	f001 fc9c 	bl	8002b10 <HAL_TIM_Encoder_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011de:	f000 f9a3 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM2_Init+0xa4>)
 80011f0:	f002 fa5c 	bl	80036ac <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011fa:	f000 f995 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	; 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20004abc 	.word	0x20004abc

0800120c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2224      	movs	r2, #36	; 0x24
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f005 fb00 	bl	8006820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_TIM3_Init+0xa0>)
 800122a:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <MX_TIM3_Init+0xa4>)
 800122c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_TIM3_Init+0xa0>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM3_Init+0xa0>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_TIM3_Init+0xa0>)
 800123c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_TIM3_Init+0xa0>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_TIM3_Init+0xa0>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124e:	2303      	movs	r3, #3
 8001250:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800125e:	230a      	movs	r3, #10
 8001260:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001266:	2301      	movs	r3, #1
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800126e:	230a      	movs	r3, #10
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <MX_TIM3_Init+0xa0>)
 800127a:	f001 fc49 	bl	8002b10 <HAL_TIM_Encoder_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001284:	f000 f950 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_TIM3_Init+0xa0>)
 8001296:	f002 fa09 	bl	80036ac <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012a0:	f000 f942 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3730      	adds	r7, #48	; 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20004a28 	.word	0x20004a28
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b092      	sub	sp, #72	; 0x48
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2220      	movs	r2, #32
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f005 fa9e 	bl	8006820 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <MX_TIM8_Init+0x110>)
 80012e6:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <MX_TIM8_Init+0x114>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <MX_TIM8_Init+0x110>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <MX_TIM8_Init+0x110>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_TIM8_Init+0x110>)
 80012f8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80012fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <MX_TIM8_Init+0x110>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <MX_TIM8_Init+0x110>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MX_TIM8_Init+0x110>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001310:	482c      	ldr	r0, [pc, #176]	; (80013c4 <MX_TIM8_Init+0x110>)
 8001312:	f001 fae6 	bl	80028e2 <HAL_TIM_PWM_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800131c:	f000 f904 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001328:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800132c:	4619      	mov	r1, r3
 800132e:	4825      	ldr	r0, [pc, #148]	; (80013c4 <MX_TIM8_Init+0x110>)
 8001330:	f002 f9bc 	bl	80036ac <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800133a:	f000 f8f5 	bl	8001528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133e:	2360      	movs	r3, #96	; 0x60
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	2200      	movs	r2, #0
 8001360:	4619      	mov	r1, r3
 8001362:	4818      	ldr	r0, [pc, #96]	; (80013c4 <MX_TIM8_Init+0x110>)
 8001364:	f001 fd08 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800136e:	f000 f8db 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	2204      	movs	r2, #4
 8001378:	4619      	mov	r1, r3
 800137a:	4812      	ldr	r0, [pc, #72]	; (80013c4 <MX_TIM8_Init+0x110>)
 800137c:	f001 fcfc 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001386:	f000 f8cf 	bl	8001528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800139e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM8_Init+0x110>)
 80013ae:	f002 f9f9 	bl	80037a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80013b8:	f000 f8b6 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3748      	adds	r7, #72	; 0x48
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200049bc 	.word	0x200049bc
 80013c8:	40010400 	.word	0x40010400

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <MX_GPIO_Init+0xe0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <MX_GPIO_Init+0xe0>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <MX_GPIO_Init+0xe0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a29      	ldr	r2, [pc, #164]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_GPIO_Init+0xe0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_GPIO_Init+0xe0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001458:	4815      	ldr	r0, [pc, #84]	; (80014b0 <MX_GPIO_Init+0xe4>)
 800145a:	f000 fd83 	bl	8001f64 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	213c      	movs	r1, #60	; 0x3c
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_GPIO_Init+0xe8>)
 8001464:	f000 fd7e 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001468:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 800146c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_GPIO_Init+0xe4>)
 8001482:	f000 fbd3 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001486:	233c      	movs	r3, #60	; 0x3c
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_GPIO_Init+0xe8>)
 800149e:	f000 fbc5 	bl	8001c2c <HAL_GPIO_Init>

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40020000 	.word	0x40020000

080014b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  OLED_Refresh_Gram();
 80014c0:	f004 ff44 	bl	800634c <OLED_Refresh_Gram>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <StartDefaultTask+0x20>)
 80014ca:	f000 fd64 	bl	8001f96 <HAL_GPIO_TogglePin>
	  osDelay(5000);
 80014ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80014d2:	f002 fac9 	bl	8003a68 <osDelay>
	  OLED_Refresh_Gram();
 80014d6:	e7f3      	b.n	80014c0 <StartDefaultTask+0x8>
 80014d8:	40021000 	.word	0x40021000

080014dc <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	OLED_Init();
 80014e4:	f005 f8d8 	bl	8006698 <OLED_Init>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80014e8:	2100      	movs	r1, #0
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <motor+0x44>)
 80014ec:	f001 fa48 	bl	8002980 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80014f0:	2104      	movs	r1, #4
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <motor+0x44>)
 80014f4:	f001 fa44 	bl	8002980 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014f8:	210c      	movs	r1, #12
 80014fa:	480a      	ldr	r0, [pc, #40]	; (8001524 <motor+0x48>)
 80014fc:	f001 fa40 	bl	8002980 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = 74;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <motor+0x48>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	224a      	movs	r2, #74	; 0x4a
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(500);
 8001508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150c:	f002 faac 	bl	8003a68 <osDelay>
	//motorControl(5000, 5000, 'F', 'F', 'S', 10000, 130);
	left(180);
 8001510:	20b4      	movs	r0, #180	; 0xb4
 8001512:	f7ff fcc1 	bl	8000e98 <left>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200049bc 	.word	0x200049bc
 8001524:	20004a70 	.word	0x20004a70

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_MspInit+0x54>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a11      	ldr	r2, [pc, #68]	; (8001588 <HAL_MspInit+0x54>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_MspInit+0x54>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_MspInit+0x54>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_MspInit+0x54>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_MspInit+0x54>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	210f      	movs	r1, #15
 8001576:	f06f 0001 	mvn.w	r0, #1
 800157a:	f000 fb2e 	bl	8001bda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_TIM_Base_MspInit+0x3c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10d      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_TIM_Base_MspInit+0x40>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_TIM_Base_MspInit+0x40>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_TIM_Base_MspInit+0x40>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40010000 	.word	0x40010000
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d14b      	bne.n	800168a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b3c      	ldr	r3, [pc, #240]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a37      	ldr	r2, [pc, #220]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a30      	ldr	r2, [pc, #192]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001658:	2301      	movs	r3, #1
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4825      	ldr	r0, [pc, #148]	; (80016f8 <HAL_TIM_Encoder_MspInit+0x128>)
 8001664:	f000 fae2 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001668:	2308      	movs	r3, #8
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001678:	2301      	movs	r3, #1
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	481e      	ldr	r0, [pc, #120]	; (80016fc <HAL_TIM_Encoder_MspInit+0x12c>)
 8001684:	f000 fad2 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001688:	e030      	b.n	80016ec <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_TIM_Encoder_MspInit+0x130>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d12b      	bne.n	80016ec <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016cc:	23c0      	movs	r3, #192	; 0xc0
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016dc:	2302      	movs	r3, #2
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <HAL_TIM_Encoder_MspInit+0x128>)
 80016e8:	f000 faa0 	bl	8001c2c <HAL_GPIO_Init>
}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40000400 	.word	0x40000400

08001704 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_TIM_PWM_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_TIM_PWM_MspInit+0x88>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_TIM_PWM_MspInit+0x88>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_TIM_PWM_MspInit+0x88>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_TIM_PWM_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_TIM_PWM_MspInit+0x88>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_TIM_PWM_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800175e:	23c0      	movs	r3, #192	; 0xc0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800176e:	2303      	movs	r3, #3
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_TIM_PWM_MspInit+0x8c>)
 800177a:	f000 fa57 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40010400 	.word	0x40010400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020800 	.word	0x40020800

08001794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <HAL_TIM_MspPostInit+0x68>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11e      	bne.n	80017f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_TIM_MspPostInit+0x6c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_TIM_MspPostInit+0x6c>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_TIM_MspPostInit+0x6c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_TIM_MspPostInit+0x70>)
 80017f0:	f000 fa1c 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40010000 	.word	0x40010000
 8001800:	40023800 	.word	0x40023800
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 f8ce 	bl	80019d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800183c:	f003 fd22 	bl	8005284 <xTaskGetSchedulerState>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	d001      	beq.n	800184a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001846:	f004 fb07 	bl	8005e58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f004 ff96 	bl	80067b0 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20020000 	.word	0x20020000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	2000009c 	.word	0x2000009c
 80018b8:	20004f58 	.word	0x20004f58

080018bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001918 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018e6:	490e      	ldr	r1, [pc, #56]	; (8001920 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e8:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018fc:	4c0b      	ldr	r4, [pc, #44]	; (800192c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800190a:	f7ff ffd7 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190e:	f004 ff55 	bl	80067bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7ff faf7 	bl	8000f04 <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001924:	08007bc8 	.word	0x08007bc8
  ldr r2, =_sbss
 8001928:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800192c:	20004f58 	.word	0x20004f58

08001930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC_IRQHandler>
	...

08001934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_Init+0x40>)
 800193e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_Init+0x40>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_Init+0x40>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 f931 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	200f      	movs	r0, #15
 8001964:	f000 f808 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fde4 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_InitTick+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f93b 	bl	8001c12 <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f000 f911 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <HAL_InitTick+0x5c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000008 	.word	0x20000008
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20004b04 	.word	0x20004b04

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20004b04 	.word	0x20004b04

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff8e 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff47 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff5c 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff8e 	bl	8001b18 <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5d 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffb0 	bl	8001b80 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e16b      	b.n	8001f20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 815a 	bne.w	8001f1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80b4 	beq.w	8001f1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b60      	ldr	r3, [pc, #384]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a5f      	ldr	r2, [pc, #380]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a5b      	ldr	r2, [pc, #364]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_GPIO_Init+0x314>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02b      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a51      	ldr	r2, [pc, #324]	; (8001f44 <HAL_GPIO_Init+0x318>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d025      	beq.n	8001e4e <HAL_GPIO_Init+0x222>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a50      	ldr	r2, [pc, #320]	; (8001f48 <HAL_GPIO_Init+0x31c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <HAL_GPIO_Init+0x21e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <HAL_GPIO_Init+0x320>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d019      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <HAL_GPIO_Init+0x328>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4c      	ldr	r2, [pc, #304]	; (8001f58 <HAL_GPIO_Init+0x32c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4b      	ldr	r2, [pc, #300]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_GPIO_Init+0x20a>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00e      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e00c      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	e00a      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e3e:	2305      	movs	r3, #5
 8001e40:	e008      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e42:	2304      	movs	r3, #4
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e52:	2300      	movs	r3, #0
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4093      	lsls	r3, r2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e64:	4935      	ldr	r1, [pc, #212]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e96:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e9c:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec0:	4a27      	ldr	r2, [pc, #156]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_GPIO_Init+0x334>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f ae90 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40013800 	.word	0x40013800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40021400 	.word	0x40021400
 8001f58:	40021800 	.word	0x40021800
 8001f5c:	40021c00 	.word	0x40021c00
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa8:	887a      	ldrh	r2, [r7, #2]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	041a      	lsls	r2, r3, #16
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_PWR_EnableBkUpAccess+0x20>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	420e0020 	.word	0x420e0020
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_PWR_DisableBkUpAccess+0x20>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_PWR_DisableBkUpAccess+0x24>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002006:	687b      	ldr	r3, [r7, #4]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	420e0020 	.word	0x420e0020
 8002018:	40007000 	.word	0x40007000

0800201c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e264      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d075      	beq.n	8002126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203a:	4ba3      	ldr	r3, [pc, #652]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d00c      	beq.n	8002060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	4ba0      	ldr	r3, [pc, #640]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204e:	2b08      	cmp	r3, #8
 8002050:	d112      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b9d      	ldr	r3, [pc, #628]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4b99      	ldr	r3, [pc, #612]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d05b      	beq.n	8002124 <HAL_RCC_OscConfig+0x108>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d157      	bne.n	8002124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e23f      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x74>
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a90      	ldr	r2, [pc, #576]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x98>
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a8a      	ldr	r2, [pc, #552]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a87      	ldr	r2, [pc, #540]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 80020b4:	4b84      	ldr	r3, [pc, #528]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a83      	ldr	r2, [pc, #524]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a80      	ldr	r2, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc94 	bl	8001a00 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fc90 	bl	8001a00 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e204      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xc0>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fc80 	bl	8001a00 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fc7c 	bl	8001a00 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1f0      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b6c      	ldr	r3, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0xe8>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b62      	ldr	r3, [pc, #392]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002146:	2b08      	cmp	r3, #8
 8002148:	d11c      	bne.n	8002184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b5f      	ldr	r3, [pc, #380]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x152>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1c4      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4952      	ldr	r1, [pc, #328]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	e03a      	b.n	80021fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCC_OscConfig+0x2b0>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7ff fc35 	bl	8001a00 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff fc31 	bl	8001a00 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1a5      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4940      	ldr	r1, [pc, #256]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_OscConfig+0x2b0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff fc14 	bl	8001a00 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021dc:	f7ff fc10 	bl	8001a00 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e184      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d030      	beq.n	8002268 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCC_OscConfig+0x2b4>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7ff fbf4 	bl	8001a00 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fbf0 	bl	8001a00 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e164      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x200>
 800223a:	e015      	b.n	8002268 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_OscConfig+0x2b4>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7ff fbdd 	bl	8001a00 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224a:	f7ff fbd9 	bl	8001a00 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e14d      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a0 	beq.w	80023b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_OscConfig+0x2b8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d121      	bne.n	80022f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_RCC_OscConfig+0x2b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_RCC_OscConfig+0x2b8>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7ff fb9f 	bl	8001a00 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e011      	b.n	80022ea <HAL_RCC_OscConfig+0x2ce>
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470000 	.word	0x42470000
 80022d0:	42470e80 	.word	0x42470e80
 80022d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7ff fb92 	bl	8001a00 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e106      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b85      	ldr	r3, [pc, #532]	; (8002500 <HAL_RCC_OscConfig+0x4e4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x2f0>
 80022fe:	4b81      	ldr	r3, [pc, #516]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a80      	ldr	r2, [pc, #512]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	e01c      	b.n	8002346 <HAL_RCC_OscConfig+0x32a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d10c      	bne.n	800232e <HAL_RCC_OscConfig+0x312>
 8002314:	4b7b      	ldr	r3, [pc, #492]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a7a      	ldr	r2, [pc, #488]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	4b78      	ldr	r3, [pc, #480]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a77      	ldr	r2, [pc, #476]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
 800232c:	e00b      	b.n	8002346 <HAL_RCC_OscConfig+0x32a>
 800232e:	4b75      	ldr	r3, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a74      	ldr	r2, [pc, #464]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	4b72      	ldr	r3, [pc, #456]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a71      	ldr	r2, [pc, #452]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d015      	beq.n	800237a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7ff fb57 	bl	8001a00 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7ff fb53 	bl	8001a00 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0c5      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	4b65      	ldr	r3, [pc, #404]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RCC_OscConfig+0x33a>
 8002378:	e014      	b.n	80023a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7ff fb41 	bl	8001a00 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff fb3d 	bl	8001a00 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0af      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b56      	ldr	r3, [pc, #344]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a55      	ldr	r2, [pc, #340]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 809b 	beq.w	80024f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c0:	4b50      	ldr	r3, [pc, #320]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d05c      	beq.n	8002486 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d141      	bne.n	8002458 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_RCC_OscConfig+0x4ec>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7ff fb11 	bl	8001a00 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e2:	f7ff fb0d 	bl	8001a00 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e081      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	019b      	lsls	r3, r3, #6
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	4937      	ldr	r1, [pc, #220]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <HAL_RCC_OscConfig+0x4ec>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff fae6 	bl	8001a00 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002438:	f7ff fae2 	bl	8001a00 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e056      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x41c>
 8002456:	e04e      	b.n	80024f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_RCC_OscConfig+0x4ec>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff facf 	bl	8001a00 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff facb 	bl	8001a00 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e03f      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x44a>
 8002484:	e037      	b.n	80024f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e032      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d028      	beq.n	80024f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d121      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d11a      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c2:	4013      	ands	r3, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d111      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	3b01      	subs	r3, #1
 80024dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40007000 	.word	0x40007000
 8002504:	40023800 	.word	0x40023800
 8002508:	42470060 	.word	0x42470060

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0cc      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d90c      	bls.n	8002548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d044      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e067      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4934      	ldr	r1, [pc, #208]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7ff fa00 	bl	8001a00 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7ff f9fc 	bl	8001a00 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e04f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d20c      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002692:	f000 f821 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002696:	4602      	mov	r2, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	5ccb      	ldrb	r3, [r1, r3]
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f960 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08007110 	.word	0x08007110
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026de:	2100      	movs	r1, #0
 80026e0:	6079      	str	r1, [r7, #4]
 80026e2:	2100      	movs	r1, #0
 80026e4:	60f9      	str	r1, [r7, #12]
 80026e6:	2100      	movs	r1, #0
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026ea:	2100      	movs	r1, #0
 80026ec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ee:	4952      	ldr	r1, [pc, #328]	; (8002838 <HAL_RCC_GetSysClockFreq+0x160>)
 80026f0:	6889      	ldr	r1, [r1, #8]
 80026f2:	f001 010c 	and.w	r1, r1, #12
 80026f6:	2908      	cmp	r1, #8
 80026f8:	d00d      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x3e>
 80026fa:	2908      	cmp	r1, #8
 80026fc:	f200 8094 	bhi.w	8002828 <HAL_RCC_GetSysClockFreq+0x150>
 8002700:	2900      	cmp	r1, #0
 8002702:	d002      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x32>
 8002704:	2904      	cmp	r1, #4
 8002706:	d003      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x38>
 8002708:	e08e      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_GetSysClockFreq+0x164>)
 800270c:	60bb      	str	r3, [r7, #8]
       break;
 800270e:	e08e      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002710:	4b4b      	ldr	r3, [pc, #300]	; (8002840 <HAL_RCC_GetSysClockFreq+0x168>)
 8002712:	60bb      	str	r3, [r7, #8]
      break;
 8002714:	e08b      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002716:	4948      	ldr	r1, [pc, #288]	; (8002838 <HAL_RCC_GetSysClockFreq+0x160>)
 8002718:	6849      	ldr	r1, [r1, #4]
 800271a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800271e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002720:	4945      	ldr	r1, [pc, #276]	; (8002838 <HAL_RCC_GetSysClockFreq+0x160>)
 8002722:	6849      	ldr	r1, [r1, #4]
 8002724:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002728:	2900      	cmp	r1, #0
 800272a:	d024      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272c:	4942      	ldr	r1, [pc, #264]	; (8002838 <HAL_RCC_GetSysClockFreq+0x160>)
 800272e:	6849      	ldr	r1, [r1, #4]
 8002730:	0989      	lsrs	r1, r1, #6
 8002732:	4608      	mov	r0, r1
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	f240 14ff 	movw	r4, #511	; 0x1ff
 800273c:	f04f 0500 	mov.w	r5, #0
 8002740:	ea00 0204 	and.w	r2, r0, r4
 8002744:	ea01 0305 	and.w	r3, r1, r5
 8002748:	493d      	ldr	r1, [pc, #244]	; (8002840 <HAL_RCC_GetSysClockFreq+0x168>)
 800274a:	fb01 f003 	mul.w	r0, r1, r3
 800274e:	2100      	movs	r1, #0
 8002750:	fb01 f102 	mul.w	r1, r1, r2
 8002754:	1844      	adds	r4, r0, r1
 8002756:	493a      	ldr	r1, [pc, #232]	; (8002840 <HAL_RCC_GetSysClockFreq+0x168>)
 8002758:	fba2 0101 	umull	r0, r1, r2, r1
 800275c:	1863      	adds	r3, r4, r1
 800275e:	4619      	mov	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	461a      	mov	r2, r3
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	f7fe f890 	bl	800088c <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e04a      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_RCC_GetSysClockFreq+0x160>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	461a      	mov	r2, r3
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	ea02 0400 	and.w	r4, r2, r0
 800278e:	ea03 0501 	and.w	r5, r3, r1
 8002792:	4620      	mov	r0, r4
 8002794:	4629      	mov	r1, r5
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	014b      	lsls	r3, r1, #5
 80027a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027a4:	0142      	lsls	r2, r0, #5
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	1b00      	subs	r0, r0, r4
 80027ac:	eb61 0105 	sbc.w	r1, r1, r5
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	018b      	lsls	r3, r1, #6
 80027ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027be:	0182      	lsls	r2, r0, #6
 80027c0:	1a12      	subs	r2, r2, r0
 80027c2:	eb63 0301 	sbc.w	r3, r3, r1
 80027c6:	f04f 0000 	mov.w	r0, #0
 80027ca:	f04f 0100 	mov.w	r1, #0
 80027ce:	00d9      	lsls	r1, r3, #3
 80027d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027d4:	00d0      	lsls	r0, r2, #3
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	1912      	adds	r2, r2, r4
 80027dc:	eb45 0303 	adc.w	r3, r5, r3
 80027e0:	f04f 0000 	mov.w	r0, #0
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	0299      	lsls	r1, r3, #10
 80027ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027ee:	0290      	lsls	r0, r2, #10
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f7fe f844 	bl	800088c <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_RCC_GetSysClockFreq+0x160>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	60bb      	str	r3, [r7, #8]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_RCC_GetSysClockFreq+0x164>)
 800282a:	60bb      	str	r3, [r7, #8]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	68bb      	ldr	r3, [r7, #8]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bdb0      	pop	{r4, r5, r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	00f42400 	.word	0x00f42400
 8002840:	017d7840 	.word	0x017d7840

08002844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e041      	b.n	80028da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fe8e 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f000 fc02 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e041      	b.n	8002978 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7fe fefb 	bl	8001704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f000 fbb3 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_TIM_PWM_Start+0x24>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e022      	b.n	80029ea <HAL_TIM_PWM_Start+0x6a>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d109      	bne.n	80029be <HAL_TIM_PWM_Start+0x3e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	e015      	b.n	80029ea <HAL_TIM_PWM_Start+0x6a>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d109      	bne.n	80029d8 <HAL_TIM_PWM_Start+0x58>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e008      	b.n	80029ea <HAL_TIM_PWM_Start+0x6a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07c      	b.n	8002aec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d104      	bne.n	8002a02 <HAL_TIM_PWM_Start+0x82>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a00:	e013      	b.n	8002a2a <HAL_TIM_PWM_Start+0xaa>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d104      	bne.n	8002a12 <HAL_TIM_PWM_Start+0x92>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a10:	e00b      	b.n	8002a2a <HAL_TIM_PWM_Start+0xaa>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_PWM_Start+0xa2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	e003      	b.n	8002a2a <HAL_TIM_PWM_Start+0xaa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fe14 	bl	8003660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2d      	ldr	r2, [pc, #180]	; (8002af4 <HAL_TIM_PWM_Start+0x174>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_TIM_PWM_Start+0xcc>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2c      	ldr	r2, [pc, #176]	; (8002af8 <HAL_TIM_PWM_Start+0x178>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_TIM_PWM_Start+0xd0>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_TIM_PWM_Start+0xd2>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <HAL_TIM_PWM_Start+0x174>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x136>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d01d      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x136>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_TIM_PWM_Start+0x17c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d018      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x136>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_TIM_PWM_Start+0x180>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x136>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_TIM_PWM_Start+0x184>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00e      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x136>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_TIM_PWM_Start+0x178>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x136>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_TIM_PWM_Start+0x188>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x136>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a16      	ldr	r2, [pc, #88]	; (8002b0c <HAL_TIM_PWM_Start+0x18c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d111      	bne.n	8002ada <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d010      	beq.n	8002aea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	e007      	b.n	8002aea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40010400 	.word	0x40010400
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40001800 	.word	0x40001800

08002b10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e097      	b.n	8002c54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe fd49 	bl	80015d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b54:	f023 0307 	bic.w	r3, r3, #7
 8002b58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f000 fa91 	bl	800308c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002bb0:	f023 030c 	bic.w	r3, r3, #12
 8002bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	011a      	lsls	r2, r3, #4
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	031b      	lsls	r3, r3, #12
 8002be0:	4313      	orrs	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	4313      	orrs	r3, r2
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d110      	bne.n	8002cae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c92:	7b7b      	ldrb	r3, [r7, #13]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d001      	beq.n	8002c9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e069      	b.n	8002d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cac:	e031      	b.n	8002d12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d110      	bne.n	8002cd6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cba:	7b3b      	ldrb	r3, [r7, #12]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d001      	beq.n	8002cc4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e055      	b.n	8002d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd4:	e01d      	b.n	8002d12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d108      	bne.n	8002cee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ce2:	7b7b      	ldrb	r3, [r7, #13]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d102      	bne.n	8002cee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ce8:	7b3b      	ldrb	r3, [r7, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e03e      	b.n	8002d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_TIM_Encoder_Start+0xc4>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d008      	beq.n	8002d30 <HAL_TIM_Encoder_Start+0xd4>
 8002d1e:	e00f      	b.n	8002d40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fc99 	bl	8003660 <TIM_CCxChannelCmd>
      break;
 8002d2e:	e016      	b.n	8002d5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2201      	movs	r2, #1
 8002d36:	2104      	movs	r1, #4
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fc91 	bl	8003660 <TIM_CCxChannelCmd>
      break;
 8002d3e:	e00e      	b.n	8002d5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fc89 	bl	8003660 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	2104      	movs	r1, #4
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fc82 	bl	8003660 <TIM_CCxChannelCmd>
      break;
 8002d5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e0ae      	b.n	8002ef4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	f200 809f 	bhi.w	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002ee5 	.word	0x08002ee5
 8002db4:	08002ee5 	.word	0x08002ee5
 8002db8:	08002ee5 	.word	0x08002ee5
 8002dbc:	08002e21 	.word	0x08002e21
 8002dc0:	08002ee5 	.word	0x08002ee5
 8002dc4:	08002ee5 	.word	0x08002ee5
 8002dc8:	08002ee5 	.word	0x08002ee5
 8002dcc:	08002e63 	.word	0x08002e63
 8002dd0:	08002ee5 	.word	0x08002ee5
 8002dd4:	08002ee5 	.word	0x08002ee5
 8002dd8:	08002ee5 	.word	0x08002ee5
 8002ddc:	08002ea3 	.word	0x08002ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f9f0 	bl	80031cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0208 	orr.w	r2, r2, #8
 8002dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0204 	bic.w	r2, r2, #4
 8002e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6999      	ldr	r1, [r3, #24]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	619a      	str	r2, [r3, #24]
      break;
 8002e1e:	e064      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fa40 	bl	80032ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6999      	ldr	r1, [r3, #24]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	021a      	lsls	r2, r3, #8
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	619a      	str	r2, [r3, #24]
      break;
 8002e60:	e043      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fa95 	bl	8003398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0208 	orr.w	r2, r2, #8
 8002e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0204 	bic.w	r2, r2, #4
 8002e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69d9      	ldr	r1, [r3, #28]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	61da      	str	r2, [r3, #28]
      break;
 8002ea0:	e023      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fae9 	bl	8003480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69d9      	ldr	r1, [r3, #28]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	021a      	lsls	r2, r3, #8
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	61da      	str	r2, [r3, #28]
      break;
 8002ee2:	e002      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIM_ConfigClockSource+0x1c>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e0b4      	b.n	8003082 <HAL_TIM_ConfigClockSource+0x186>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f50:	d03e      	beq.n	8002fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f56:	f200 8087 	bhi.w	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5e:	f000 8086 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x172>
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f66:	d87f      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b70      	cmp	r3, #112	; 0x70
 8002f6a:	d01a      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8002f6c:	2b70      	cmp	r3, #112	; 0x70
 8002f6e:	d87b      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b60      	cmp	r3, #96	; 0x60
 8002f72:	d050      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x11a>
 8002f74:	2b60      	cmp	r3, #96	; 0x60
 8002f76:	d877      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b50      	cmp	r3, #80	; 0x50
 8002f7a:	d03c      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8002f7c:	2b50      	cmp	r3, #80	; 0x50
 8002f7e:	d873      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d058      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x13a>
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	d86f      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b30      	cmp	r3, #48	; 0x30
 8002f8a:	d064      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15a>
 8002f8c:	2b30      	cmp	r3, #48	; 0x30
 8002f8e:	d86b      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d060      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15a>
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d867      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d05c      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15a>
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d05a      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa0:	e062      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f000 fb35 	bl	8003620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	609a      	str	r2, [r3, #8]
      break;
 8002fce:	e04f      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6899      	ldr	r1, [r3, #8]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f000 fb1e 	bl	8003620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ff2:	609a      	str	r2, [r3, #8]
      break;
 8002ff4:	e03c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	461a      	mov	r2, r3
 8003004:	f000 fa92 	bl	800352c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2150      	movs	r1, #80	; 0x50
 800300e:	4618      	mov	r0, r3
 8003010:	f000 faeb 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 8003014:	e02c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	461a      	mov	r2, r3
 8003024:	f000 fab1 	bl	800358a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2160      	movs	r1, #96	; 0x60
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fadb 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 8003034:	e01c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	461a      	mov	r2, r3
 8003044:	f000 fa72 	bl	800352c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2140      	movs	r1, #64	; 0x40
 800304e:	4618      	mov	r0, r3
 8003050:	f000 facb 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 8003054:	e00c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f000 fac2 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 8003066:	e003      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      break;
 800306c:	e000      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800306e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a40      	ldr	r2, [pc, #256]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030aa:	d00f      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <TIM_Base_SetConfig+0x118>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00b      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a3c      	ldr	r2, [pc, #240]	; (80031a8 <TIM_Base_SetConfig+0x11c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d007      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <TIM_Base_SetConfig+0x120>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a3a      	ldr	r2, [pc, #232]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d108      	bne.n	80030de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2f      	ldr	r2, [pc, #188]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d027      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a2c      	ldr	r2, [pc, #176]	; (80031a4 <TIM_Base_SetConfig+0x118>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d023      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <TIM_Base_SetConfig+0x11c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01f      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <TIM_Base_SetConfig+0x120>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d017      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <TIM_Base_SetConfig+0x128>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <TIM_Base_SetConfig+0x12c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00f      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a26      	ldr	r2, [pc, #152]	; (80031bc <TIM_Base_SetConfig+0x130>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <TIM_Base_SetConfig+0x134>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <TIM_Base_SetConfig+0x138>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <TIM_Base_SetConfig+0x13c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <TIM_Base_SetConfig+0x114>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0xf8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <TIM_Base_SetConfig+0x124>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d103      	bne.n	800318c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	615a      	str	r2, [r3, #20]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40010400 	.word	0x40010400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800
 80031c0:	40001800 	.word	0x40001800
 80031c4:	40001c00 	.word	0x40001c00
 80031c8:	40002000 	.word	0x40002000

080031cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0303 	bic.w	r3, r3, #3
 8003202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 0302 	bic.w	r3, r3, #2
 8003214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <TIM_OC1_SetConfig+0xd8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_OC1_SetConfig+0x64>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <TIM_OC1_SetConfig+0xdc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d10c      	bne.n	800324a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f023 0308 	bic.w	r3, r3, #8
 8003236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 0304 	bic.w	r3, r3, #4
 8003248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <TIM_OC1_SetConfig+0xd8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_OC1_SetConfig+0x8e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <TIM_OC1_SetConfig+0xdc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d111      	bne.n	800327e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40010400 	.word	0x40010400

080032ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0210 	bic.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0320 	bic.w	r3, r3, #32
 80032f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a22      	ldr	r2, [pc, #136]	; (8003390 <TIM_OC2_SetConfig+0xe4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC2_SetConfig+0x68>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <TIM_OC2_SetConfig+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10d      	bne.n	8003330 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <TIM_OC2_SetConfig+0xe4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_OC2_SetConfig+0x94>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a16      	ldr	r2, [pc, #88]	; (8003394 <TIM_OC2_SetConfig+0xe8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d113      	bne.n	8003368 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40010400 	.word	0x40010400

08003398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a21      	ldr	r2, [pc, #132]	; (8003478 <TIM_OC3_SetConfig+0xe0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_OC3_SetConfig+0x66>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a20      	ldr	r2, [pc, #128]	; (800347c <TIM_OC3_SetConfig+0xe4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10d      	bne.n	800341a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <TIM_OC3_SetConfig+0xe0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_OC3_SetConfig+0x92>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a15      	ldr	r2, [pc, #84]	; (800347c <TIM_OC3_SetConfig+0xe4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d113      	bne.n	8003452 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40010000 	.word	0x40010000
 800347c:	40010400 	.word	0x40010400

08003480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	031b      	lsls	r3, r3, #12
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <TIM_OC4_SetConfig+0xa4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <TIM_OC4_SetConfig+0x68>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a11      	ldr	r2, [pc, #68]	; (8003528 <TIM_OC4_SetConfig+0xa8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d109      	bne.n	80034fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	621a      	str	r2, [r3, #32]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000
 8003528:	40010400 	.word	0x40010400

0800352c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0201 	bic.w	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f023 030a 	bic.w	r3, r3, #10
 8003568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800358a:	b480      	push	{r7}
 800358c:	b087      	sub	sp, #28
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0210 	bic.w	r2, r3, #16
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	031b      	lsls	r3, r3, #12
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	f043 0307 	orr.w	r3, r3, #7
 800360c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800363a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	021a      	lsls	r2, r3, #8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	431a      	orrs	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	609a      	str	r2, [r3, #8]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2201      	movs	r2, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1a      	ldr	r2, [r3, #32]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e05a      	b.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003710:	d01d      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a17      	ldr	r2, [pc, #92]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10c      	bne.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40010000 	.word	0x40010000
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40000c00 	.word	0x40000c00
 8003798:	40010400 	.word	0x40010400
 800379c:	40014000 	.word	0x40014000
 80037a0:	40001800 	.word	0x40001800

080037a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037bc:	2302      	movs	r3, #2
 80037be:	e03d      	b.n	800383c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <__NVIC_SetPriority>:
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	; (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038a0:	2100      	movs	r1, #0
 80038a2:	f06f 0004 	mvn.w	r0, #4
 80038a6:	f7ff ffcf 	bl	8003848 <__NVIC_SetPriority>
#endif
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b6:	f3ef 8305 	mrs	r3, IPSR
 80038ba:	603b      	str	r3, [r7, #0]
  return(result);
 80038bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80038c2:	f06f 0305 	mvn.w	r3, #5
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	e00c      	b.n	80038e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <osKernelInitialize+0x44>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <osKernelInitialize+0x44>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038d8:	2300      	movs	r3, #0
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	e002      	b.n	80038e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038e4:	687b      	ldr	r3, [r7, #4]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	200000a0 	.word	0x200000a0

080038f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038fe:	f3ef 8305 	mrs	r3, IPSR
 8003902:	603b      	str	r3, [r7, #0]
  return(result);
 8003904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800390a:	f06f 0305 	mvn.w	r3, #5
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	e010      	b.n	8003934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <osKernelStart+0x48>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d109      	bne.n	800392e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800391a:	f7ff ffbf 	bl	800389c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <osKernelStart+0x48>)
 8003920:	2202      	movs	r2, #2
 8003922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003924:	f001 f866 	bl	80049f4 <vTaskStartScheduler>
      stat = osOK;
 8003928:	2300      	movs	r3, #0
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	e002      	b.n	8003934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003934:	687b      	ldr	r3, [r7, #4]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200000a0 	.word	0x200000a0

08003944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af04      	add	r7, sp, #16
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003954:	f3ef 8305 	mrs	r3, IPSR
 8003958:	617b      	str	r3, [r7, #20]
  return(result);
 800395a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800395c:	2b00      	cmp	r3, #0
 800395e:	d17e      	bne.n	8003a5e <osThreadNew+0x11a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d07b      	beq.n	8003a5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800396a:	2318      	movs	r3, #24
 800396c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295
 8003976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d045      	beq.n	8003a0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <osThreadNew+0x48>
        name = attr->name;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <osThreadNew+0x6e>
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b38      	cmp	r3, #56	; 0x38
 80039a4:	d805      	bhi.n	80039b2 <osThreadNew+0x6e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <osThreadNew+0x72>
        return (NULL);
 80039b2:	2300      	movs	r3, #0
 80039b4:	e054      	b.n	8003a60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00e      	beq.n	80039ec <osThreadNew+0xa8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b5b      	cmp	r3, #91	; 0x5b
 80039d4:	d90a      	bls.n	80039ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d006      	beq.n	80039ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <osThreadNew+0xa8>
        mem = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	e010      	b.n	8003a0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10c      	bne.n	8003a0e <osThreadNew+0xca>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d108      	bne.n	8003a0e <osThreadNew+0xca>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <osThreadNew+0xca>
          mem = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e001      	b.n	8003a0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d110      	bne.n	8003a36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a1c:	9202      	str	r2, [sp, #8]
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6a3a      	ldr	r2, [r7, #32]
 8003a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fe0c 	bl	8004648 <xTaskCreateStatic>
 8003a30:	4603      	mov	r3, r0
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e013      	b.n	8003a5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d110      	bne.n	8003a5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fe57 	bl	8004702 <xTaskCreate>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <osThreadNew+0x11a>
            hTask = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a5e:	693b      	ldr	r3, [r7, #16]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3728      	adds	r7, #40	; 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a70:	f3ef 8305 	mrs	r3, IPSR
 8003a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <osDelay+0x1c>
    stat = osErrorISR;
 8003a7c:	f06f 0305 	mvn.w	r3, #5
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e007      	b.n	8003a94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 ff7c 	bl	800498c <vTaskDelay>
    }
  }

  return (stat);
 8003a94:	68fb      	ldr	r3, [r7, #12]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a07      	ldr	r2, [pc, #28]	; (8003acc <vApplicationGetIdleTaskMemory+0x2c>)
 8003ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4a06      	ldr	r2, [pc, #24]	; (8003ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8003ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	200000a4 	.word	0x200000a4
 8003ad0:	20000100 	.word	0x20000100

08003ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4a06      	ldr	r2, [pc, #24]	; (8003b04 <vApplicationGetTimerTaskMemory+0x30>)
 8003aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af2:	601a      	str	r2, [r3, #0]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	20000300 	.word	0x20000300
 8003b04:	2000035c 	.word	0x2000035c

08003b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f103 0208 	add.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f103 0208 	add.w	r2, r3, #8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f103 0208 	add.w	r2, r3, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d103      	bne.n	8003bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e00c      	b.n	8003be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e002      	b.n	8003bd8 <vListInsert+0x2e>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d2f6      	bcs.n	8003bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	601a      	str	r2, [r3, #0]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6892      	ldr	r2, [r2, #8]
 8003c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6852      	ldr	r2, [r2, #4]
 8003c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d103      	bne.n	8003c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	1e5a      	subs	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c9a:	f002 f84b 	bl	8005d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	441a      	add	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	441a      	add	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	22ff      	movs	r2, #255	; 0xff
 8003cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	22ff      	movs	r2, #255	; 0xff
 8003ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d114      	bne.n	8003d1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01a      	beq.n	8003d2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 f903 	bl	8004f08 <xTaskRemoveFromEventList>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <xQueueGenericReset+0xcc>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	e009      	b.n	8003d2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3310      	adds	r3, #16
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fef2 	bl	8003b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3324      	adds	r3, #36	; 0x24
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff feed 	bl	8003b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d2e:	f002 f831 	bl	8005d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d32:	2301      	movs	r3, #1
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	e000ed04 	.word	0xe000ed04

08003d40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08e      	sub	sp, #56	; 0x38
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <xQueueGenericCreateStatic+0x52>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <xQueueGenericCreateStatic+0x56>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <xQueueGenericCreateStatic+0x58>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	623b      	str	r3, [r7, #32]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <xQueueGenericCreateStatic+0x7e>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <xQueueGenericCreateStatic+0x82>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <xQueueGenericCreateStatic+0x84>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	61fb      	str	r3, [r7, #28]
}
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dde:	2350      	movs	r3, #80	; 0x50
 8003de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b50      	cmp	r3, #80	; 0x50
 8003de6:	d00a      	beq.n	8003dfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	61bb      	str	r3, [r7, #24]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f805 	bl	8003e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3730      	adds	r7, #48	; 0x30
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e5e:	2101      	movs	r1, #1
 8003e60:	69b8      	ldr	r0, [r7, #24]
 8003e62:	f7ff ff05 	bl	8003c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08e      	sub	sp, #56	; 0x38
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e86:	2300      	movs	r3, #0
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <xQueueGenericSend+0x32>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d103      	bne.n	8003eb8 <xQueueGenericSend+0x40>
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <xQueueGenericSend+0x44>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <xQueueGenericSend+0x46>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <xQueueGenericSend+0x60>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d103      	bne.n	8003ee6 <xQueueGenericSend+0x6e>
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <xQueueGenericSend+0x72>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <xQueueGenericSend+0x74>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <xQueueGenericSend+0x8e>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	623b      	str	r3, [r7, #32]
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f06:	f001 f9bd 	bl	8005284 <xTaskGetSchedulerState>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <xQueueGenericSend+0x9e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <xQueueGenericSend+0xa2>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <xQueueGenericSend+0xa4>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xQueueGenericSend+0xbe>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	61fb      	str	r3, [r7, #28]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f36:	f001 fefd 	bl	8005d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <xQueueGenericSend+0xd4>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d129      	bne.n	8003fa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f52:	f000 fa0b 	bl	800436c <prvCopyDataToQueue>
 8003f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d010      	beq.n	8003f82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	3324      	adds	r3, #36	; 0x24
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 ffcf 	bl	8004f08 <xTaskRemoveFromEventList>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f70:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <xQueueGenericSend+0x1f8>)
 8003f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	e00a      	b.n	8003f98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f88:	4b39      	ldr	r3, [pc, #228]	; (8004070 <xQueueGenericSend+0x1f8>)
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f98:	f001 fefc 	bl	8005d94 <vPortExitCritical>
				return pdPASS;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e063      	b.n	8004068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fa6:	f001 fef5 	bl	8005d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e05c      	b.n	8004068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 f809 	bl	8004fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fc2:	f001 fee7 	bl	8005d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fc6:	f000 fd7b 	bl	8004ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fca:	f001 feb3 	bl	8005d34 <vPortEnterCritical>
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d103      	bne.n	8003fe4 <xQueueGenericSend+0x16c>
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d103      	bne.n	8003ffa <xQueueGenericSend+0x182>
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ffa:	f001 fecb 	bl	8005d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ffe:	1d3a      	adds	r2, r7, #4
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fff8 	bl	8004ffc <xTaskCheckForTimeOut>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d124      	bne.n	800405c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004014:	f000 faa2 	bl	800455c <prvIsQueueFull>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d018      	beq.n	8004050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	3310      	adds	r3, #16
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ff1e 	bl	8004e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800402c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800402e:	f000 fa2d 	bl	800448c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004032:	f000 fd53 	bl	8004adc <xTaskResumeAll>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	f47f af7c 	bne.w	8003f36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <xQueueGenericSend+0x1f8>)
 8004040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	e772      	b.n	8003f36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004052:	f000 fa1b 	bl	800448c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004056:	f000 fd41 	bl	8004adc <xTaskResumeAll>
 800405a:	e76c      	b.n	8003f36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800405c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800405e:	f000 fa15 	bl	800448c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004062:	f000 fd3b 	bl	8004adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004068:	4618      	mov	r0, r3
 800406a:	3738      	adds	r7, #56	; 0x38
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b090      	sub	sp, #64	; 0x40
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <xQueueGenericSendFromISR+0x3c>
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <xQueueGenericSendFromISR+0x40>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <xQueueGenericSendFromISR+0x42>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040cc:	bf00      	nop
 80040ce:	e7fe      	b.n	80040ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d103      	bne.n	80040de <xQueueGenericSendFromISR+0x6a>
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <xQueueGenericSendFromISR+0x6e>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <xQueueGenericSendFromISR+0x70>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	623b      	str	r3, [r7, #32]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040fe:	f001 fefb 	bl	8005ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004102:	f3ef 8211 	mrs	r2, BASEPRI
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	61fa      	str	r2, [r7, #28]
 8004118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800411a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <xQueueGenericSendFromISR+0xbc>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d12f      	bne.n	8004190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004146:	f000 f911 	bl	800436c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800414a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d112      	bne.n	800417a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	2b00      	cmp	r3, #0
 800415a:	d016      	beq.n	800418a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	3324      	adds	r3, #36	; 0x24
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fed1 	bl	8004f08 <xTaskRemoveFromEventList>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00e      	beq.n	800418a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e007      	b.n	800418a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800417a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800417e:	3301      	adds	r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	b25a      	sxtb	r2, r3
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800418a:	2301      	movs	r3, #1
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800418e:	e001      	b.n	8004194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004196:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800419e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3740      	adds	r7, #64	; 0x40
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <xQueueReceive+0x30>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	623b      	str	r3, [r7, #32]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <xQueueReceive+0x3e>
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <xQueueReceive+0x42>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <xQueueReceive+0x44>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <xQueueReceive+0x5e>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	61fb      	str	r3, [r7, #28]
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800420a:	f001 f83b 	bl	8005284 <xTaskGetSchedulerState>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <xQueueReceive+0x6e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <xQueueReceive+0x72>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <xQueueReceive+0x74>
 800421e:	2300      	movs	r3, #0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <xQueueReceive+0x8e>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	61bb      	str	r3, [r7, #24]
}
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800423a:	f001 fd7b 	bl	8005d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01f      	beq.n	800428a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424e:	f000 f8f7 	bl	8004440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00f      	beq.n	8004282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	3310      	adds	r3, #16
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fe4e 	bl	8004f08 <xTaskRemoveFromEventList>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004272:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <xQueueReceive+0x1bc>)
 8004274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004282:	f001 fd87 	bl	8005d94 <vPortExitCritical>
				return pdPASS;
 8004286:	2301      	movs	r3, #1
 8004288:	e069      	b.n	800435e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004290:	f001 fd80 	bl	8005d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004294:	2300      	movs	r3, #0
 8004296:	e062      	b.n	800435e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800429e:	f107 0310 	add.w	r3, r7, #16
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fe94 	bl	8004fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042ac:	f001 fd72 	bl	8005d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042b0:	f000 fc06 	bl	8004ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042b4:	f001 fd3e 	bl	8005d34 <vPortEnterCritical>
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d103      	bne.n	80042ce <xQueueReceive+0x122>
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d103      	bne.n	80042e4 <xQueueReceive+0x138>
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e4:	f001 fd56 	bl	8005d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042e8:	1d3a      	adds	r2, r7, #4
 80042ea:	f107 0310 	add.w	r3, r7, #16
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fe83 	bl	8004ffc <xTaskCheckForTimeOut>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d123      	bne.n	8004344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042fe:	f000 f917 	bl	8004530 <prvIsQueueEmpty>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d017      	beq.n	8004338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	3324      	adds	r3, #36	; 0x24
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fda9 	bl	8004e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004318:	f000 f8b8 	bl	800448c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800431c:	f000 fbde 	bl	8004adc <xTaskResumeAll>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d189      	bne.n	800423a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <xQueueReceive+0x1bc>)
 8004328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	e780      	b.n	800423a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800433a:	f000 f8a7 	bl	800448c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800433e:	f000 fbcd 	bl	8004adc <xTaskResumeAll>
 8004342:	e77a      	b.n	800423a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004346:	f000 f8a1 	bl	800448c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800434a:	f000 fbc7 	bl	8004adc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800434e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004350:	f000 f8ee 	bl	8004530 <prvIsQueueEmpty>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	f43f af6f 	beq.w	800423a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800435c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800435e:	4618      	mov	r0, r3
 8004360:	3730      	adds	r7, #48	; 0x30
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10d      	bne.n	80043a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d14d      	bne.n	800442e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 ff92 	bl	80052c0 <xTaskPriorityDisinherit>
 800439c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	e043      	b.n	800442e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d119      	bne.n	80043e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6858      	ldr	r0, [r3, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	461a      	mov	r2, r3
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	f002 fa24 	bl	8006804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	441a      	add	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d32b      	bcc.n	800442e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	e026      	b.n	800442e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	68d8      	ldr	r0, [r3, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	461a      	mov	r2, r3
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	f002 fa0a 	bl	8006804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	425b      	negs	r3, r3
 80043fa:	441a      	add	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d207      	bcs.n	800441c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	425b      	negs	r3, r3
 8004416:	441a      	add	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d105      	bne.n	800442e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	3b01      	subs	r3, #1
 800442c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004436:	697b      	ldr	r3, [r7, #20]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	d303      	bcc.n	8004474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68d9      	ldr	r1, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	461a      	mov	r2, r3
 800447e:	6838      	ldr	r0, [r7, #0]
 8004480:	f002 f9c0 	bl	8006804 <memcpy>
	}
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004494:	f001 fc4e 	bl	8005d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800449e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044a0:	e011      	b.n	80044c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d012      	beq.n	80044d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3324      	adds	r3, #36	; 0x24
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fd2a 	bl	8004f08 <xTaskRemoveFromEventList>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044ba:	f000 fe01 	bl	80050c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	dce9      	bgt.n	80044a2 <prvUnlockQueue+0x16>
 80044ce:	e000      	b.n	80044d2 <prvUnlockQueue+0x46>
					break;
 80044d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	22ff      	movs	r2, #255	; 0xff
 80044d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044da:	f001 fc5b 	bl	8005d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044de:	f001 fc29 	bl	8005d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044ea:	e011      	b.n	8004510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d012      	beq.n	800451a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3310      	adds	r3, #16
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fd05 	bl	8004f08 <xTaskRemoveFromEventList>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004504:	f000 fddc 	bl	80050c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004508:	7bbb      	ldrb	r3, [r7, #14]
 800450a:	3b01      	subs	r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004514:	2b00      	cmp	r3, #0
 8004516:	dce9      	bgt.n	80044ec <prvUnlockQueue+0x60>
 8004518:	e000      	b.n	800451c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800451a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	22ff      	movs	r2, #255	; 0xff
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004524:	f001 fc36 	bl	8005d94 <vPortExitCritical>
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004538:	f001 fbfc 	bl	8005d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e001      	b.n	800454e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800454e:	f001 fc21 	bl	8005d94 <vPortExitCritical>

	return xReturn;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004564:	f001 fbe6 	bl	8005d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	429a      	cmp	r2, r3
 8004572:	d102      	bne.n	800457a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004574:	2301      	movs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e001      	b.n	800457e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800457e:	f001 fc09 	bl	8005d94 <vPortExitCritical>

	return xReturn;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e014      	b.n	80045c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800459c:	4a0f      	ldr	r2, [pc, #60]	; (80045dc <vQueueAddToRegistry+0x50>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045a8:	490c      	ldr	r1, [pc, #48]	; (80045dc <vQueueAddToRegistry+0x50>)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <vQueueAddToRegistry+0x50>)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045be:	e006      	b.n	80045ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b07      	cmp	r3, #7
 80045ca:	d9e7      	bls.n	800459c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20004b08 	.word	0x20004b08

080045e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045f0:	f001 fba0 	bl	8005d34 <vPortEnterCritical>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d103      	bne.n	800460a <vQueueWaitForMessageRestricted+0x2a>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004610:	b25b      	sxtb	r3, r3
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d103      	bne.n	8004620 <vQueueWaitForMessageRestricted+0x40>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004620:	f001 fbb8 	bl	8005d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3324      	adds	r3, #36	; 0x24
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fc3b 	bl	8004eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7ff ff26 	bl	800448c <prvUnlockQueue>
	}
 8004640:	bf00      	nop
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08e      	sub	sp, #56	; 0x38
 800464c:	af04      	add	r7, sp, #16
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xTaskCreateStatic+0x2a>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	623b      	str	r3, [r7, #32]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xTaskCreateStatic+0x46>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	61fb      	str	r3, [r7, #28]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800468e:	235c      	movs	r3, #92	; 0x5c
 8004690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b5c      	cmp	r3, #92	; 0x5c
 8004696:	d00a      	beq.n	80046ae <xTaskCreateStatic+0x66>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	61bb      	str	r3, [r7, #24]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01e      	beq.n	80046f4 <xTaskCreateStatic+0xac>
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01b      	beq.n	80046f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046ce:	2300      	movs	r3, #0
 80046d0:	9303      	str	r3, [sp, #12]
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	9302      	str	r3, [sp, #8]
 80046d6:	f107 0314 	add.w	r3, r7, #20
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f850 	bl	800478c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ee:	f000 f8dd 	bl	80048ac <prvAddNewTaskToReadyList>
 80046f2:	e001      	b.n	80046f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046f8:	697b      	ldr	r3, [r7, #20]
	}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004702:	b580      	push	{r7, lr}
 8004704:	b08c      	sub	sp, #48	; 0x30
 8004706:	af04      	add	r7, sp, #16
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4618      	mov	r0, r3
 8004718:	f001 fc2e 	bl	8005f78 <pvPortMalloc>
 800471c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00e      	beq.n	8004742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004724:	205c      	movs	r0, #92	; 0x5c
 8004726:	f001 fc27 	bl	8005f78 <pvPortMalloc>
 800472a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
 8004738:	e005      	b.n	8004746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	f001 fce8 	bl	8006110 <vPortFree>
 8004740:	e001      	b.n	8004746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d017      	beq.n	800477c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004754:	88fa      	ldrh	r2, [r7, #6]
 8004756:	2300      	movs	r3, #0
 8004758:	9303      	str	r3, [sp, #12]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	9302      	str	r3, [sp, #8]
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f80e 	bl	800478c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004770:	69f8      	ldr	r0, [r7, #28]
 8004772:	f000 f89b 	bl	80048ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004776:	2301      	movs	r3, #1
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	e002      	b.n	8004782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
 8004780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004782:	69bb      	ldr	r3, [r7, #24]
	}
 8004784:	4618      	mov	r0, r3
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	461a      	mov	r2, r3
 80047a4:	21a5      	movs	r1, #165	; 0xa5
 80047a6:	f002 f83b 	bl	8006820 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047b4:	3b01      	subs	r3, #1
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f023 0307 	bic.w	r3, r3, #7
 80047c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	617b      	str	r3, [r7, #20]
}
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01f      	beq.n	800482a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e012      	b.n	8004816 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	7819      	ldrb	r1, [r3, #0]
 80047f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	3334      	adds	r3, #52	; 0x34
 8004800:	460a      	mov	r2, r1
 8004802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d9e9      	bls.n	80047f0 <prvInitialiseNewTask+0x64>
 800481c:	e000      	b.n	8004820 <prvInitialiseNewTask+0x94>
			{
				break;
 800481e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004828:	e003      	b.n	8004832 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	2b37      	cmp	r3, #55	; 0x37
 8004836:	d901      	bls.n	800483c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004838:	2337      	movs	r3, #55	; 0x37
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	2200      	movs	r2, #0
 800484c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	3304      	adds	r3, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f978 	bl	8003b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	3318      	adds	r3, #24
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff f973 	bl	8003b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	2200      	movs	r2, #0
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	69b8      	ldr	r0, [r7, #24]
 800488c:	f001 f928 	bl	8005ae0 <pxPortInitialiseStack>
 8004890:	4602      	mov	r2, r0
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a2:	bf00      	nop
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048b4:	f001 fa3e 	bl	8005d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048c2:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048ca:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048d0:	4b27      	ldr	r3, [pc, #156]	; (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d110      	bne.n	80048fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048d8:	f000 fc16 	bl	8005108 <prvInitialiseTaskLists>
 80048dc:	e00d      	b.n	80048fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <prvAddNewTaskToReadyList+0xcc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d802      	bhi.n	80048fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048f4:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <prvAddNewTaskToReadyList+0xd0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	4a1e      	ldr	r2, [pc, #120]	; (800497c <prvAddNewTaskToReadyList+0xd0>)
 8004902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004904:	4b1d      	ldr	r3, [pc, #116]	; (800497c <prvAddNewTaskToReadyList+0xd0>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <prvAddNewTaskToReadyList+0xd4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d903      	bls.n	8004920 <prvAddNewTaskToReadyList+0x74>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4a18      	ldr	r2, [pc, #96]	; (8004980 <prvAddNewTaskToReadyList+0xd4>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <prvAddNewTaskToReadyList+0xd8>)
 800492e:	441a      	add	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7ff f913 	bl	8003b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800493c:	f001 fa2a 	bl	8005d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <prvAddNewTaskToReadyList+0xcc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00e      	beq.n	8004966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <prvAddNewTaskToReadyList+0xc8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	429a      	cmp	r2, r3
 8004954:	d207      	bcs.n	8004966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <prvAddNewTaskToReadyList+0xdc>)
 8004958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000c30 	.word	0x20000c30
 8004974:	2000075c 	.word	0x2000075c
 8004978:	20000c3c 	.word	0x20000c3c
 800497c:	20000c4c 	.word	0x20000c4c
 8004980:	20000c38 	.word	0x20000c38
 8004984:	20000760 	.word	0x20000760
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d017      	beq.n	80049ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <vTaskDelay+0x60>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <vTaskDelay+0x30>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
}
 80049b8:	bf00      	nop
 80049ba:	e7fe      	b.n	80049ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049bc:	f000 f880 	bl	8004ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049c0:	2100      	movs	r1, #0
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fcea 	bl	800539c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049c8:	f000 f888 	bl	8004adc <xTaskResumeAll>
 80049cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <vTaskDelay+0x64>)
 80049d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000c58 	.word	0x20000c58
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a02:	463a      	mov	r2, r7
 8004a04:	1d39      	adds	r1, r7, #4
 8004a06:	f107 0308 	add.w	r3, r7, #8
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff f848 	bl	8003aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	9202      	str	r2, [sp, #8]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	460a      	mov	r2, r1
 8004a22:	4921      	ldr	r1, [pc, #132]	; (8004aa8 <vTaskStartScheduler+0xb4>)
 8004a24:	4821      	ldr	r0, [pc, #132]	; (8004aac <vTaskStartScheduler+0xb8>)
 8004a26:	f7ff fe0f 	bl	8004648 <xTaskCreateStatic>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <vTaskStartScheduler+0xbc>)
 8004a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a30:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <vTaskStartScheduler+0xbc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e001      	b.n	8004a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d102      	bne.n	8004a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a48:	f000 fcfc 	bl	8005444 <xTimerCreateTimerTask>
 8004a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d116      	bne.n	8004a82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	613b      	str	r3, [r7, #16]
}
 8004a66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <vTaskStartScheduler+0xc0>)
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <vTaskStartScheduler+0xc4>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <vTaskStartScheduler+0xc8>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a7c:	f001 f8b8 	bl	8005bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a80:	e00e      	b.n	8004aa0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d10a      	bne.n	8004aa0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60fb      	str	r3, [r7, #12]
}
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <vTaskStartScheduler+0xaa>
}
 8004aa0:	bf00      	nop
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	080070b0 	.word	0x080070b0
 8004aac:	080050d9 	.word	0x080050d9
 8004ab0:	20000c54 	.word	0x20000c54
 8004ab4:	20000c50 	.word	0x20000c50
 8004ab8:	20000c3c 	.word	0x20000c3c
 8004abc:	20000c34 	.word	0x20000c34

08004ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <vTaskSuspendAll+0x18>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <vTaskSuspendAll+0x18>)
 8004acc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ace:	bf00      	nop
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20000c58 	.word	0x20000c58

08004adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004aea:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <xTaskResumeAll+0x118>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <xTaskResumeAll+0x2c>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	603b      	str	r3, [r7, #0]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b08:	f001 f914 	bl	8005d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b0c:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <xTaskResumeAll+0x118>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <xTaskResumeAll+0x118>)
 8004b14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b16:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <xTaskResumeAll+0x118>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d162      	bne.n	8004be4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b1e:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <xTaskResumeAll+0x11c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d05e      	beq.n	8004be4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b26:	e02f      	b.n	8004b88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b28:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <xTaskResumeAll+0x120>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3318      	adds	r3, #24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f871 	bl	8003c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff f86c 	bl	8003c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b2d      	ldr	r3, [pc, #180]	; (8004c00 <xTaskResumeAll+0x124>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <xTaskResumeAll+0x7c>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <xTaskResumeAll+0x124>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <xTaskResumeAll+0x128>)
 8004b66:	441a      	add	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f7fe fff7 	bl	8003b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <xTaskResumeAll+0x12c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <xTaskResumeAll+0x130>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b88:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <xTaskResumeAll+0x120>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1cb      	bne.n	8004b28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b96:	f000 fb55 	bl	8005244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <xTaskResumeAll+0x134>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ba6:	f000 f847 	bl	8004c38 <xTaskIncrementTick>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004bb0:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <xTaskResumeAll+0x130>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f1      	bne.n	8004ba6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <xTaskResumeAll+0x134>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <xTaskResumeAll+0x130>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <xTaskResumeAll+0x138>)
 8004bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004be4:	f001 f8d6 	bl	8005d94 <vPortExitCritical>

	return xAlreadyYielded;
 8004be8:	68bb      	ldr	r3, [r7, #8]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000c58 	.word	0x20000c58
 8004bf8:	20000c30 	.word	0x20000c30
 8004bfc:	20000bf0 	.word	0x20000bf0
 8004c00:	20000c38 	.word	0x20000c38
 8004c04:	20000760 	.word	0x20000760
 8004c08:	2000075c 	.word	0x2000075c
 8004c0c:	20000c44 	.word	0x20000c44
 8004c10:	20000c40 	.word	0x20000c40
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <xTaskGetTickCount+0x1c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c24:	687b      	ldr	r3, [r7, #4]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000c34 	.word	0x20000c34

08004c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c42:	4b4f      	ldr	r3, [pc, #316]	; (8004d80 <xTaskIncrementTick+0x148>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 808f 	bne.w	8004d6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c4c:	4b4d      	ldr	r3, [pc, #308]	; (8004d84 <xTaskIncrementTick+0x14c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c54:	4a4b      	ldr	r2, [pc, #300]	; (8004d84 <xTaskIncrementTick+0x14c>)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d120      	bne.n	8004ca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c60:	4b49      	ldr	r3, [pc, #292]	; (8004d88 <xTaskIncrementTick+0x150>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	603b      	str	r3, [r7, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <xTaskIncrementTick+0x46>
 8004c80:	4b41      	ldr	r3, [pc, #260]	; (8004d88 <xTaskIncrementTick+0x150>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <xTaskIncrementTick+0x154>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	; (8004d88 <xTaskIncrementTick+0x150>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4a3f      	ldr	r2, [pc, #252]	; (8004d8c <xTaskIncrementTick+0x154>)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <xTaskIncrementTick+0x158>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a3d      	ldr	r2, [pc, #244]	; (8004d90 <xTaskIncrementTick+0x158>)
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	f000 fad1 	bl	8005244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ca2:	4b3c      	ldr	r3, [pc, #240]	; (8004d94 <xTaskIncrementTick+0x15c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d349      	bcc.n	8004d40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cac:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <xTaskIncrementTick+0x150>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb6:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <xTaskIncrementTick+0x15c>)
 8004cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbc:	601a      	str	r2, [r3, #0]
					break;
 8004cbe:	e03f      	b.n	8004d40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc0:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <xTaskIncrementTick+0x150>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d203      	bcs.n	8004ce0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cd8:	4a2e      	ldr	r2, [pc, #184]	; (8004d94 <xTaskIncrementTick+0x15c>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cde:	e02f      	b.n	8004d40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe ff99 	bl	8003c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	3318      	adds	r3, #24
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe ff90 	bl	8003c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <xTaskIncrementTick+0x160>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d903      	bls.n	8004d10 <xTaskIncrementTick+0xd8>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <xTaskIncrementTick+0x160>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <xTaskIncrementTick+0x164>)
 8004d1e:	441a      	add	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f7fe ff1b 	bl	8003b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <xTaskIncrementTick+0x168>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d3b8      	bcc.n	8004cac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d3e:	e7b5      	b.n	8004cac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d40:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <xTaskIncrementTick+0x168>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	4915      	ldr	r1, [pc, #84]	; (8004d9c <xTaskIncrementTick+0x164>)
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d901      	bls.n	8004d5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <xTaskIncrementTick+0x16c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e004      	b.n	8004d74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <xTaskIncrementTick+0x170>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <xTaskIncrementTick+0x170>)
 8004d72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d74:	697b      	ldr	r3, [r7, #20]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000c58 	.word	0x20000c58
 8004d84:	20000c34 	.word	0x20000c34
 8004d88:	20000be8 	.word	0x20000be8
 8004d8c:	20000bec 	.word	0x20000bec
 8004d90:	20000c48 	.word	0x20000c48
 8004d94:	20000c50 	.word	0x20000c50
 8004d98:	20000c38 	.word	0x20000c38
 8004d9c:	20000760 	.word	0x20000760
 8004da0:	2000075c 	.word	0x2000075c
 8004da4:	20000c44 	.word	0x20000c44
 8004da8:	20000c40 	.word	0x20000c40

08004dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004db2:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <vTaskSwitchContext+0xa8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dba:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <vTaskSwitchContext+0xac>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dc0:	e041      	b.n	8004e46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004dc2:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <vTaskSwitchContext+0xac>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc8:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <vTaskSwitchContext+0xb0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e010      	b.n	8004df2 <vTaskSwitchContext+0x46>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <vTaskSwitchContext+0x40>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	607b      	str	r3, [r7, #4]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <vTaskSwitchContext+0x3e>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	491b      	ldr	r1, [pc, #108]	; (8004e60 <vTaskSwitchContext+0xb4>)
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0e4      	beq.n	8004dd0 <vTaskSwitchContext+0x24>
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <vTaskSwitchContext+0xb4>)
 8004e12:	4413      	add	r3, r2
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	3308      	adds	r3, #8
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d104      	bne.n	8004e36 <vTaskSwitchContext+0x8a>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	605a      	str	r2, [r3, #4]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <vTaskSwitchContext+0xb8>)
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <vTaskSwitchContext+0xb0>)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6013      	str	r3, [r2, #0]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000c58 	.word	0x20000c58
 8004e58:	20000c44 	.word	0x20000c44
 8004e5c:	20000c38 	.word	0x20000c38
 8004e60:	20000760 	.word	0x20000760
 8004e64:	2000075c 	.word	0x2000075c

08004e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	60fb      	str	r3, [r7, #12]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <vTaskPlaceOnEventList+0x44>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3318      	adds	r3, #24
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fe fe87 	bl	8003baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	6838      	ldr	r0, [r7, #0]
 8004ea0:	f000 fa7c 	bl	800539c <prvAddCurrentTaskToDelayedList>
}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	2000075c 	.word	0x2000075c

08004eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	617b      	str	r3, [r7, #20]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3318      	adds	r3, #24
 8004ede:	4619      	mov	r1, r3
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7fe fe3e 	bl	8003b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	68b8      	ldr	r0, [r7, #8]
 8004ef6:	f000 fa51 	bl	800539c <prvAddCurrentTaskToDelayedList>
	}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	2000075c 	.word	0x2000075c

08004f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	60fb      	str	r3, [r7, #12]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	3318      	adds	r3, #24
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe fe6f 	bl	8003c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <xTaskRemoveFromEventList+0xb0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d11d      	bne.n	8004f82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe fe66 	bl	8003c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <xTaskRemoveFromEventList+0xb4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d903      	bls.n	8004f64 <xTaskRemoveFromEventList+0x5c>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <xTaskRemoveFromEventList+0xb4>)
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <xTaskRemoveFromEventList+0xb8>)
 8004f72:	441a      	add	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fe fdf1 	bl	8003b62 <vListInsertEnd>
 8004f80:	e005      	b.n	8004f8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3318      	adds	r3, #24
 8004f86:	4619      	mov	r1, r3
 8004f88:	480e      	ldr	r0, [pc, #56]	; (8004fc4 <xTaskRemoveFromEventList+0xbc>)
 8004f8a:	f7fe fdea 	bl	8003b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <xTaskRemoveFromEventList+0xc0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d905      	bls.n	8004fa8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <xTaskRemoveFromEventList+0xc4>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e001      	b.n	8004fac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004fac:	697b      	ldr	r3, [r7, #20]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000c58 	.word	0x20000c58
 8004fbc:	20000c38 	.word	0x20000c38
 8004fc0:	20000760 	.word	0x20000760
 8004fc4:	20000bf0 	.word	0x20000bf0
 8004fc8:	2000075c 	.word	0x2000075c
 8004fcc:	20000c44 	.word	0x20000c44

08004fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <vTaskInternalSetTimeOutState+0x24>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <vTaskInternalSetTimeOutState+0x28>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	605a      	str	r2, [r3, #4]
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	20000c48 	.word	0x20000c48
 8004ff8:	20000c34 	.word	0x20000c34

08004ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	613b      	str	r3, [r7, #16]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	60fb      	str	r3, [r7, #12]
}
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800503e:	f000 fe79 	bl	8005d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <xTaskCheckForTimeOut+0xbc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d102      	bne.n	8005062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e023      	b.n	80050aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4b15      	ldr	r3, [pc, #84]	; (80050bc <xTaskCheckForTimeOut+0xc0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d007      	beq.n	800507e <xTaskCheckForTimeOut+0x82>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	61fb      	str	r3, [r7, #28]
 800507c:	e015      	b.n	80050aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	429a      	cmp	r2, r3
 8005086:	d20b      	bcs.n	80050a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff ff9b 	bl	8004fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e004      	b.n	80050aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050aa:	f000 fe73 	bl	8005d94 <vPortExitCritical>

	return xReturn;
 80050ae:	69fb      	ldr	r3, [r7, #28]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000c34 	.word	0x20000c34
 80050bc:	20000c48 	.word	0x20000c48

080050c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <vTaskMissedYield+0x14>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	20000c44 	.word	0x20000c44

080050d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050e0:	f000 f852 	bl	8005188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <prvIdleTask+0x28>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d9f9      	bls.n	80050e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050ec:	4b05      	ldr	r3, [pc, #20]	; (8005104 <prvIdleTask+0x2c>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050fc:	e7f0      	b.n	80050e0 <prvIdleTask+0x8>
 80050fe:	bf00      	nop
 8005100:	20000760 	.word	0x20000760
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800510e:	2300      	movs	r3, #0
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	e00c      	b.n	800512e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4a12      	ldr	r2, [pc, #72]	; (8005168 <prvInitialiseTaskLists+0x60>)
 8005120:	4413      	add	r3, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fcf0 	bl	8003b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3301      	adds	r3, #1
 800512c:	607b      	str	r3, [r7, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b37      	cmp	r3, #55	; 0x37
 8005132:	d9ef      	bls.n	8005114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005134:	480d      	ldr	r0, [pc, #52]	; (800516c <prvInitialiseTaskLists+0x64>)
 8005136:	f7fe fce7 	bl	8003b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800513a:	480d      	ldr	r0, [pc, #52]	; (8005170 <prvInitialiseTaskLists+0x68>)
 800513c:	f7fe fce4 	bl	8003b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005140:	480c      	ldr	r0, [pc, #48]	; (8005174 <prvInitialiseTaskLists+0x6c>)
 8005142:	f7fe fce1 	bl	8003b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005146:	480c      	ldr	r0, [pc, #48]	; (8005178 <prvInitialiseTaskLists+0x70>)
 8005148:	f7fe fcde 	bl	8003b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800514c:	480b      	ldr	r0, [pc, #44]	; (800517c <prvInitialiseTaskLists+0x74>)
 800514e:	f7fe fcdb 	bl	8003b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <prvInitialiseTaskLists+0x78>)
 8005154:	4a05      	ldr	r2, [pc, #20]	; (800516c <prvInitialiseTaskLists+0x64>)
 8005156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <prvInitialiseTaskLists+0x7c>)
 800515a:	4a05      	ldr	r2, [pc, #20]	; (8005170 <prvInitialiseTaskLists+0x68>)
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000760 	.word	0x20000760
 800516c:	20000bc0 	.word	0x20000bc0
 8005170:	20000bd4 	.word	0x20000bd4
 8005174:	20000bf0 	.word	0x20000bf0
 8005178:	20000c04 	.word	0x20000c04
 800517c:	20000c1c 	.word	0x20000c1c
 8005180:	20000be8 	.word	0x20000be8
 8005184:	20000bec 	.word	0x20000bec

08005188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800518e:	e019      	b.n	80051c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005190:	f000 fdd0 	bl	8005d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <prvCheckTasksWaitingTermination+0x50>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fe fd3b 	bl	8003c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <prvCheckTasksWaitingTermination+0x54>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	4a0b      	ldr	r2, [pc, #44]	; (80051dc <prvCheckTasksWaitingTermination+0x54>)
 80051ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <prvCheckTasksWaitingTermination+0x58>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <prvCheckTasksWaitingTermination+0x58>)
 80051b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051ba:	f000 fdeb 	bl	8005d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f810 	bl	80051e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <prvCheckTasksWaitingTermination+0x58>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e1      	bne.n	8005190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000c04 	.word	0x20000c04
 80051dc:	20000c30 	.word	0x20000c30
 80051e0:	20000c18 	.word	0x20000c18

080051e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d108      	bne.n	8005208 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 ff88 	bl	8006110 <vPortFree>
				vPortFree( pxTCB );
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 ff85 	bl	8006110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005206:	e018      	b.n	800523a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800520e:	2b01      	cmp	r3, #1
 8005210:	d103      	bne.n	800521a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 ff7c 	bl	8006110 <vPortFree>
	}
 8005218:	e00f      	b.n	800523a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005220:	2b02      	cmp	r3, #2
 8005222:	d00a      	beq.n	800523a <prvDeleteTCB+0x56>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60fb      	str	r3, [r7, #12]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <prvDeleteTCB+0x54>
	}
 800523a:	bf00      	nop
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <prvResetNextTaskUnblockTime+0x38>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d104      	bne.n	800525e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <prvResetNextTaskUnblockTime+0x3c>)
 8005256:	f04f 32ff 	mov.w	r2, #4294967295
 800525a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800525c:	e008      	b.n	8005270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <prvResetNextTaskUnblockTime+0x38>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a04      	ldr	r2, [pc, #16]	; (8005280 <prvResetNextTaskUnblockTime+0x3c>)
 800526e:	6013      	str	r3, [r2, #0]
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	20000be8 	.word	0x20000be8
 8005280:	20000c50 	.word	0x20000c50

08005284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <xTaskGetSchedulerState+0x34>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005292:	2301      	movs	r3, #1
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	e008      	b.n	80052aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005298:	4b08      	ldr	r3, [pc, #32]	; (80052bc <xTaskGetSchedulerState+0x38>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d102      	bne.n	80052a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052a0:	2302      	movs	r3, #2
 80052a2:	607b      	str	r3, [r7, #4]
 80052a4:	e001      	b.n	80052aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052a6:	2300      	movs	r3, #0
 80052a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052aa:	687b      	ldr	r3, [r7, #4]
	}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000c3c 	.word	0x20000c3c
 80052bc:	20000c58 	.word	0x20000c58

080052c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d056      	beq.n	8005384 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <xTaskPriorityDisinherit+0xd0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d00a      	beq.n	80052f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	60bb      	str	r3, [r7, #8]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005318:	1e5a      	subs	r2, r3, #1
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	429a      	cmp	r2, r3
 8005328:	d02c      	beq.n	8005384 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	2b00      	cmp	r3, #0
 8005330:	d128      	bne.n	8005384 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fc70 	bl	8003c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <xTaskPriorityDisinherit+0xd4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d903      	bls.n	8005364 <xTaskPriorityDisinherit+0xa4>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <xTaskPriorityDisinherit+0xd4>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a09      	ldr	r2, [pc, #36]	; (8005398 <xTaskPriorityDisinherit+0xd8>)
 8005372:	441a      	add	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7fe fbf1 	bl	8003b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005384:	697b      	ldr	r3, [r7, #20]
	}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	2000075c 	.word	0x2000075c
 8005394:	20000c38 	.word	0x20000c38
 8005398:	20000760 	.word	0x20000760

0800539c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <prvAddCurrentTaskToDelayedList+0x90>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ac:	4b20      	ldr	r3, [pc, #128]	; (8005430 <prvAddCurrentTaskToDelayedList+0x94>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe fc32 	bl	8003c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d10a      	bne.n	80053d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <prvAddCurrentTaskToDelayedList+0x94>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	4819      	ldr	r0, [pc, #100]	; (8005434 <prvAddCurrentTaskToDelayedList+0x98>)
 80053d0:	f7fe fbc7 	bl	8003b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053d4:	e026      	b.n	8005424 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4413      	add	r3, r2
 80053dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <prvAddCurrentTaskToDelayedList+0x94>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d209      	bcs.n	8005402 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <prvAddCurrentTaskToDelayedList+0x9c>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <prvAddCurrentTaskToDelayedList+0x94>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f7fe fbd5 	bl	8003baa <vListInsert>
}
 8005400:	e010      	b.n	8005424 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005402:	4b0e      	ldr	r3, [pc, #56]	; (800543c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <prvAddCurrentTaskToDelayedList+0x94>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3304      	adds	r3, #4
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f7fe fbcb 	bl	8003baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	d202      	bcs.n	8005424 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000c34 	.word	0x20000c34
 8005430:	2000075c 	.word	0x2000075c
 8005434:	20000c1c 	.word	0x20000c1c
 8005438:	20000bec 	.word	0x20000bec
 800543c:	20000be8 	.word	0x20000be8
 8005440:	20000c50 	.word	0x20000c50

08005444 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800544e:	f000 fb07 	bl	8005a60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <xTimerCreateTimerTask+0x80>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d021      	beq.n	800549e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005462:	1d3a      	adds	r2, r7, #4
 8005464:	f107 0108 	add.w	r1, r7, #8
 8005468:	f107 030c 	add.w	r3, r7, #12
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fb31 	bl	8003ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	9202      	str	r2, [sp, #8]
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	2302      	movs	r3, #2
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2300      	movs	r3, #0
 8005482:	460a      	mov	r2, r1
 8005484:	4910      	ldr	r1, [pc, #64]	; (80054c8 <xTimerCreateTimerTask+0x84>)
 8005486:	4811      	ldr	r0, [pc, #68]	; (80054cc <xTimerCreateTimerTask+0x88>)
 8005488:	f7ff f8de 	bl	8004648 <xTaskCreateStatic>
 800548c:	4603      	mov	r3, r0
 800548e:	4a10      	ldr	r2, [pc, #64]	; (80054d0 <xTimerCreateTimerTask+0x8c>)
 8005490:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005492:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <xTimerCreateTimerTask+0x8c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800549a:	2301      	movs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	613b      	str	r3, [r7, #16]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054ba:	697b      	ldr	r3, [r7, #20]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000c8c 	.word	0x20000c8c
 80054c8:	080070b8 	.word	0x080070b8
 80054cc:	08005609 	.word	0x08005609
 80054d0:	20000c90 	.word	0x20000c90

080054d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xTimerGenericCommand+0x2e>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	623b      	str	r3, [r7, #32]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005502:	4b1a      	ldr	r3, [pc, #104]	; (800556c <xTimerGenericCommand+0x98>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d02a      	beq.n	8005560 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b05      	cmp	r3, #5
 800551a:	dc18      	bgt.n	800554e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800551c:	f7ff feb2 	bl	8005284 <xTaskGetSchedulerState>
 8005520:	4603      	mov	r3, r0
 8005522:	2b02      	cmp	r3, #2
 8005524:	d109      	bne.n	800553a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <xTimerGenericCommand+0x98>)
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f107 0110 	add.w	r1, r7, #16
 800552e:	2300      	movs	r3, #0
 8005530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005532:	f7fe fca1 	bl	8003e78 <xQueueGenericSend>
 8005536:	6278      	str	r0, [r7, #36]	; 0x24
 8005538:	e012      	b.n	8005560 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <xTimerGenericCommand+0x98>)
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	f107 0110 	add.w	r1, r7, #16
 8005542:	2300      	movs	r3, #0
 8005544:	2200      	movs	r2, #0
 8005546:	f7fe fc97 	bl	8003e78 <xQueueGenericSend>
 800554a:	6278      	str	r0, [r7, #36]	; 0x24
 800554c:	e008      	b.n	8005560 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800554e:	4b07      	ldr	r3, [pc, #28]	; (800556c <xTimerGenericCommand+0x98>)
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	f107 0110 	add.w	r1, r7, #16
 8005556:	2300      	movs	r3, #0
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	f7fe fd8b 	bl	8004074 <xQueueGenericSendFromISR>
 800555e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005562:	4618      	mov	r0, r3
 8005564:	3728      	adds	r7, #40	; 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000c8c 	.word	0x20000c8c

08005570 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af02      	add	r7, sp, #8
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800557a:	4b22      	ldr	r3, [pc, #136]	; (8005604 <prvProcessExpiredTimer+0x94>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	3304      	adds	r3, #4
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fb47 	bl	8003c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d022      	beq.n	80055e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	18d1      	adds	r1, r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	6978      	ldr	r0, [r7, #20]
 80055aa:	f000 f8d1 	bl	8005750 <prvInsertTimerInActiveList>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01f      	beq.n	80055f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055b4:	2300      	movs	r3, #0
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	2100      	movs	r1, #0
 80055be:	6978      	ldr	r0, [r7, #20]
 80055c0:	f7ff ff88 	bl	80054d4 <xTimerGenericCommand>
 80055c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d113      	bne.n	80055f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60fb      	str	r3, [r7, #12]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	6978      	ldr	r0, [r7, #20]
 80055fa:	4798      	blx	r3
}
 80055fc:	bf00      	nop
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000c84 	.word	0x20000c84

08005608 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f857 	bl	80056c8 <prvGetNextExpireTime>
 800561a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4619      	mov	r1, r3
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f803 	bl	800562c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005626:	f000 f8d5 	bl	80057d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800562a:	e7f1      	b.n	8005610 <prvTimerTask+0x8>

0800562c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005636:	f7ff fa43 	bl	8004ac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800563a:	f107 0308 	add.w	r3, r7, #8
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f866 	bl	8005710 <prvSampleTimeNow>
 8005644:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d130      	bne.n	80056ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <prvProcessTimerOrBlockTask+0x3c>
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	429a      	cmp	r2, r3
 8005658:	d806      	bhi.n	8005668 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800565a:	f7ff fa3f 	bl	8004adc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800565e:	68f9      	ldr	r1, [r7, #12]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ff85 	bl	8005570 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005666:	e024      	b.n	80056b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <prvProcessTimerOrBlockTask+0x90>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <prvProcessTimerOrBlockTask+0x50>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <prvProcessTimerOrBlockTask+0x52>
 800567c:	2300      	movs	r3, #0
 800567e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <prvProcessTimerOrBlockTask+0x94>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	4619      	mov	r1, r3
 800568e:	f7fe ffa7 	bl	80045e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005692:	f7ff fa23 	bl	8004adc <xTaskResumeAll>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <prvProcessTimerOrBlockTask+0x98>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
}
 80056ac:	e001      	b.n	80056b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056ae:	f7ff fa15 	bl	8004adc <xTaskResumeAll>
}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000c88 	.word	0x20000c88
 80056c0:	20000c8c 	.word	0x20000c8c
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056d0:	4b0e      	ldr	r3, [pc, #56]	; (800570c <prvGetNextExpireTime+0x44>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <prvGetNextExpireTime+0x16>
 80056da:	2201      	movs	r2, #1
 80056dc:	e000      	b.n	80056e0 <prvGetNextExpireTime+0x18>
 80056de:	2200      	movs	r2, #0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <prvGetNextExpireTime+0x44>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e001      	b.n	80056fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056fc:	68fb      	ldr	r3, [r7, #12]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20000c84 	.word	0x20000c84

08005710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005718:	f7ff fa7e 	bl	8004c18 <xTaskGetTickCount>
 800571c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <prvSampleTimeNow+0x3c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	429a      	cmp	r2, r3
 8005726:	d205      	bcs.n	8005734 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005728:	f000 f936 	bl	8005998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e002      	b.n	800573a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800573a:	4a04      	ldr	r2, [pc, #16]	; (800574c <prvSampleTimeNow+0x3c>)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000c94 	.word	0x20000c94

08005750 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	d812      	bhi.n	800579c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e01b      	b.n	80057c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <prvInsertTimerInActiveList+0x7c>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f7fe fa08 	bl	8003baa <vListInsert>
 800579a:	e012      	b.n	80057c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d206      	bcs.n	80057b2 <prvInsertTimerInActiveList+0x62>
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d302      	bcc.n	80057b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e007      	b.n	80057c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <prvInsertTimerInActiveList+0x80>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3304      	adds	r3, #4
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f7fe f9f4 	bl	8003baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057c2:	697b      	ldr	r3, [r7, #20]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20000c88 	.word	0x20000c88
 80057d0:	20000c84 	.word	0x20000c84

080057d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08e      	sub	sp, #56	; 0x38
 80057d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057da:	e0ca      	b.n	8005972 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da18      	bge.n	8005814 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057e2:	1d3b      	adds	r3, r7, #4
 80057e4:	3304      	adds	r3, #4
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	61fb      	str	r3, [r7, #28]
}
 8005800:	bf00      	nop
 8005802:	e7fe      	b.n	8005802 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580a:	6850      	ldr	r0, [r2, #4]
 800580c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580e:	6892      	ldr	r2, [r2, #8]
 8005810:	4611      	mov	r1, r2
 8005812:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f2c0 80aa 	blt.w	8005970 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	3304      	adds	r3, #4
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe f9f5 	bl	8003c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005832:	463b      	mov	r3, r7
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ff6b 	bl	8005710 <prvSampleTimeNow>
 800583a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b09      	cmp	r3, #9
 8005840:	f200 8097 	bhi.w	8005972 <prvProcessReceivedCommands+0x19e>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <prvProcessReceivedCommands+0x78>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005875 	.word	0x08005875
 8005850:	08005875 	.word	0x08005875
 8005854:	08005875 	.word	0x08005875
 8005858:	080058e9 	.word	0x080058e9
 800585c:	080058fd 	.word	0x080058fd
 8005860:	08005947 	.word	0x08005947
 8005864:	08005875 	.word	0x08005875
 8005868:	08005875 	.word	0x08005875
 800586c:	080058e9 	.word	0x080058e9
 8005870:	080058fd 	.word	0x080058fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	b2da      	uxtb	r2, r3
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	18d1      	adds	r1, r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005894:	f7ff ff5c 	bl	8005750 <prvInsertTimerInActiveList>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d069      	beq.n	8005972 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d05e      	beq.n	8005972 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	441a      	add	r2, r3
 80058bc:	2300      	movs	r3, #0
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	2300      	movs	r3, #0
 80058c2:	2100      	movs	r1, #0
 80058c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c6:	f7ff fe05 	bl	80054d4 <xTimerGenericCommand>
 80058ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d14f      	bne.n	8005972 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	61bb      	str	r3, [r7, #24]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80058fa:	e03a      	b.n	8005972 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	b2da      	uxtb	r2, r3
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	617b      	str	r3, [r7, #20]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	18d1      	adds	r1, r2, r3
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005940:	f7ff ff06 	bl	8005750 <prvInsertTimerInActiveList>
					break;
 8005944:	e015      	b.n	8005972 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d103      	bne.n	800595c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005956:	f000 fbdb 	bl	8006110 <vPortFree>
 800595a:	e00a      	b.n	8005972 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800596e:	e000      	b.n	8005972 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005970:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <prvProcessReceivedCommands+0x1c0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	1d39      	adds	r1, r7, #4
 8005978:	2200      	movs	r2, #0
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe fc16 	bl	80041ac <xQueueReceive>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	f47f af2a 	bne.w	80057dc <prvProcessReceivedCommands+0x8>
	}
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	3730      	adds	r7, #48	; 0x30
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000c8c 	.word	0x20000c8c

08005998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800599e:	e048      	b.n	8005a32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059a0:	4b2d      	ldr	r3, [pc, #180]	; (8005a58 <prvSwitchTimerLists+0xc0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059aa:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <prvSwitchTimerLists+0xc0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe f92f 	bl	8003c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02e      	beq.n	8005a32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4413      	add	r3, r2
 80059dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d90e      	bls.n	8005a04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059f2:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <prvSwitchTimerLists+0xc0>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f7fe f8d4 	bl	8003baa <vListInsert>
 8005a02:	e016      	b.n	8005a32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a04:	2300      	movs	r3, #0
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff fd60 	bl	80054d4 <xTimerGenericCommand>
 8005a14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	603b      	str	r3, [r7, #0]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <prvSwitchTimerLists+0xc0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1b1      	bne.n	80059a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <prvSwitchTimerLists+0xc0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <prvSwitchTimerLists+0xc4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <prvSwitchTimerLists+0xc0>)
 8005a48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a4a:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <prvSwitchTimerLists+0xc4>)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	6013      	str	r3, [r2, #0]
}
 8005a50:	bf00      	nop
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000c84 	.word	0x20000c84
 8005a5c:	20000c88 	.word	0x20000c88

08005a60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a66:	f000 f965 	bl	8005d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <prvCheckForValidListAndQueue+0x60>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d120      	bne.n	8005ab4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a72:	4814      	ldr	r0, [pc, #80]	; (8005ac4 <prvCheckForValidListAndQueue+0x64>)
 8005a74:	f7fe f848 	bl	8003b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a78:	4813      	ldr	r0, [pc, #76]	; (8005ac8 <prvCheckForValidListAndQueue+0x68>)
 8005a7a:	f7fe f845 	bl	8003b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <prvCheckForValidListAndQueue+0x6c>)
 8005a80:	4a10      	ldr	r2, [pc, #64]	; (8005ac4 <prvCheckForValidListAndQueue+0x64>)
 8005a82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a84:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <prvCheckForValidListAndQueue+0x70>)
 8005a86:	4a10      	ldr	r2, [pc, #64]	; (8005ac8 <prvCheckForValidListAndQueue+0x68>)
 8005a88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <prvCheckForValidListAndQueue+0x74>)
 8005a90:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <prvCheckForValidListAndQueue+0x78>)
 8005a92:	2110      	movs	r1, #16
 8005a94:	200a      	movs	r0, #10
 8005a96:	f7fe f953 	bl	8003d40 <xQueueGenericCreateStatic>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4a08      	ldr	r2, [pc, #32]	; (8005ac0 <prvCheckForValidListAndQueue+0x60>)
 8005a9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <prvCheckForValidListAndQueue+0x60>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <prvCheckForValidListAndQueue+0x60>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	490b      	ldr	r1, [pc, #44]	; (8005adc <prvCheckForValidListAndQueue+0x7c>)
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fd6c 	bl	800458c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ab4:	f000 f96e 	bl	8005d94 <vPortExitCritical>
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000c8c 	.word	0x20000c8c
 8005ac4:	20000c5c 	.word	0x20000c5c
 8005ac8:	20000c70 	.word	0x20000c70
 8005acc:	20000c84 	.word	0x20000c84
 8005ad0:	20000c88 	.word	0x20000c88
 8005ad4:	20000d38 	.word	0x20000d38
 8005ad8:	20000c98 	.word	0x20000c98
 8005adc:	080070c0 	.word	0x080070c0

08005ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3b04      	subs	r3, #4
 8005af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b04      	subs	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3b04      	subs	r3, #4
 8005b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b10:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <pxPortInitialiseStack+0x64>)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b14      	subs	r3, #20
 8005b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3b04      	subs	r3, #4
 8005b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f06f 0202 	mvn.w	r2, #2
 8005b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3b20      	subs	r3, #32
 8005b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	08005b49 	.word	0x08005b49

08005b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <prvTaskExitError+0x54>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d00a      	beq.n	8005b72 <prvTaskExitError+0x2a>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	60fb      	str	r3, [r7, #12]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <prvTaskExitError+0x28>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60bb      	str	r3, [r7, #8]
}
 8005b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b86:	bf00      	nop
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0fc      	beq.n	8005b88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	2000000c 	.word	0x2000000c

08005ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <pxCurrentTCBConst2>)
 8005ba2:	6819      	ldr	r1, [r3, #0]
 8005ba4:	6808      	ldr	r0, [r1, #0]
 8005ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005baa:	f380 8809 	msr	PSP, r0
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f380 8811 	msr	BASEPRI, r0
 8005bba:	4770      	bx	lr
 8005bbc:	f3af 8000 	nop.w

08005bc0 <pxCurrentTCBConst2>:
 8005bc0:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop

08005bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bc8:	4808      	ldr	r0, [pc, #32]	; (8005bec <prvPortStartFirstTask+0x24>)
 8005bca:	6800      	ldr	r0, [r0, #0]
 8005bcc:	6800      	ldr	r0, [r0, #0]
 8005bce:	f380 8808 	msr	MSP, r0
 8005bd2:	f04f 0000 	mov.w	r0, #0
 8005bd6:	f380 8814 	msr	CONTROL, r0
 8005bda:	b662      	cpsie	i
 8005bdc:	b661      	cpsie	f
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	df00      	svc	0
 8005be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bea:	bf00      	nop
 8005bec:	e000ed08 	.word	0xe000ed08

08005bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005bf6:	4b46      	ldr	r3, [pc, #280]	; (8005d10 <xPortStartScheduler+0x120>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a46      	ldr	r2, [pc, #280]	; (8005d14 <xPortStartScheduler+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10a      	bne.n	8005c16 <xPortStartScheduler+0x26>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	613b      	str	r3, [r7, #16]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c16:	4b3e      	ldr	r3, [pc, #248]	; (8005d10 <xPortStartScheduler+0x120>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a3f      	ldr	r2, [pc, #252]	; (8005d18 <xPortStartScheduler+0x128>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10a      	bne.n	8005c36 <xPortStartScheduler+0x46>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	60fb      	str	r3, [r7, #12]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c36:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <xPortStartScheduler+0x12c>)
 8005c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	22ff      	movs	r2, #255	; 0xff
 8005c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <xPortStartScheduler+0x130>)
 8005c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c5e:	4b31      	ldr	r3, [pc, #196]	; (8005d24 <xPortStartScheduler+0x134>)
 8005c60:	2207      	movs	r2, #7
 8005c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c64:	e009      	b.n	8005c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c66:	4b2f      	ldr	r3, [pc, #188]	; (8005d24 <xPortStartScheduler+0x134>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <xPortStartScheduler+0x134>)
 8005c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d0ef      	beq.n	8005c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c86:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <xPortStartScheduler+0x134>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f1c3 0307 	rsb	r3, r3, #7
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d00a      	beq.n	8005ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	60bb      	str	r3, [r7, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ca8:	4b1e      	ldr	r3, [pc, #120]	; (8005d24 <xPortStartScheduler+0x134>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	4a1d      	ldr	r2, [pc, #116]	; (8005d24 <xPortStartScheduler+0x134>)
 8005cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <xPortStartScheduler+0x134>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cba:	4a1a      	ldr	r2, [pc, #104]	; (8005d24 <xPortStartScheduler+0x134>)
 8005cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cc6:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <xPortStartScheduler+0x138>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <xPortStartScheduler+0x138>)
 8005ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cd2:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <xPortStartScheduler+0x138>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <xPortStartScheduler+0x138>)
 8005cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cde:	f000 f8dd 	bl	8005e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <xPortStartScheduler+0x13c>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ce8:	f000 f8fc 	bl	8005ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cec:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <xPortStartScheduler+0x140>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a0f      	ldr	r2, [pc, #60]	; (8005d30 <xPortStartScheduler+0x140>)
 8005cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cf8:	f7ff ff66 	bl	8005bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cfc:	f7ff f856 	bl	8004dac <vTaskSwitchContext>
	prvTaskExitError();
 8005d00:	f7ff ff22 	bl	8005b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	e000ed00 	.word	0xe000ed00
 8005d14:	410fc271 	.word	0x410fc271
 8005d18:	410fc270 	.word	0x410fc270
 8005d1c:	e000e400 	.word	0xe000e400
 8005d20:	20000d88 	.word	0x20000d88
 8005d24:	20000d8c 	.word	0x20000d8c
 8005d28:	e000ed20 	.word	0xe000ed20
 8005d2c:	2000000c 	.word	0x2000000c
 8005d30:	e000ef34 	.word	0xe000ef34

08005d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	607b      	str	r3, [r7, #4]
}
 8005d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <vPortEnterCritical+0x58>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3301      	adds	r3, #1
 8005d54:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <vPortEnterCritical+0x58>)
 8005d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <vPortEnterCritical+0x58>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10f      	bne.n	8005d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <vPortEnterCritical+0x5c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	603b      	str	r3, [r7, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <vPortEnterCritical+0x4a>
	}
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	2000000c 	.word	0x2000000c
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d9a:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <vPortExitCritical+0x50>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10a      	bne.n	8005db8 <vPortExitCritical+0x24>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	607b      	str	r3, [r7, #4]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <vPortExitCritical+0x50>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	4a09      	ldr	r2, [pc, #36]	; (8005de4 <vPortExitCritical+0x50>)
 8005dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dc2:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <vPortExitCritical+0x50>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d105      	bne.n	8005dd6 <vPortExitCritical+0x42>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f383 8811 	msr	BASEPRI, r3
}
 8005dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	2000000c 	.word	0x2000000c
	...

08005df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005df0:	f3ef 8009 	mrs	r0, PSP
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <pxCurrentTCBConst>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	f01e 0f10 	tst.w	lr, #16
 8005e00:	bf08      	it	eq
 8005e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	6010      	str	r0, [r2, #0]
 8005e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e14:	f380 8811 	msr	BASEPRI, r0
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f7fe ffc4 	bl	8004dac <vTaskSwitchContext>
 8005e24:	f04f 0000 	mov.w	r0, #0
 8005e28:	f380 8811 	msr	BASEPRI, r0
 8005e2c:	bc09      	pop	{r0, r3}
 8005e2e:	6819      	ldr	r1, [r3, #0]
 8005e30:	6808      	ldr	r0, [r1, #0]
 8005e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e36:	f01e 0f10 	tst.w	lr, #16
 8005e3a:	bf08      	it	eq
 8005e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e40:	f380 8809 	msr	PSP, r0
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	f3af 8000 	nop.w

08005e50 <pxCurrentTCBConst>:
 8005e50:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop

08005e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	607b      	str	r3, [r7, #4]
}
 8005e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e72:	f7fe fee1 	bl	8004c38 <xTaskIncrementTick>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <xPortSysTickHandler+0x40>)
 8005e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	2300      	movs	r3, #0
 8005e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f383 8811 	msr	BASEPRI, r3
}
 8005e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <vPortSetupTimerInterrupt+0x34>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <vPortSetupTimerInterrupt+0x38>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <vPortSetupTimerInterrupt+0x3c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <vPortSetupTimerInterrupt+0x40>)
 8005eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	4a09      	ldr	r2, [pc, #36]	; (8005ee0 <vPortSetupTimerInterrupt+0x44>)
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ebe:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <vPortSetupTimerInterrupt+0x34>)
 8005ec0:	2207      	movs	r2, #7
 8005ec2:	601a      	str	r2, [r3, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	e000e010 	.word	0xe000e010
 8005ed4:	e000e018 	.word	0xe000e018
 8005ed8:	20000000 	.word	0x20000000
 8005edc:	10624dd3 	.word	0x10624dd3
 8005ee0:	e000e014 	.word	0xe000e014

08005ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ef4 <vPortEnableVFP+0x10>
 8005ee8:	6801      	ldr	r1, [r0, #0]
 8005eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005eee:	6001      	str	r1, [r0, #0]
 8005ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ef2:	bf00      	nop
 8005ef4:	e000ed88 	.word	0xe000ed88

08005ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005efe:	f3ef 8305 	mrs	r3, IPSR
 8005f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	d914      	bls.n	8005f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f0a:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <vPortValidateInterruptPriority+0x70>)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f14:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <vPortValidateInterruptPriority+0x74>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	7afa      	ldrb	r2, [r7, #11]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d20a      	bcs.n	8005f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	607b      	str	r3, [r7, #4]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <vPortValidateInterruptPriority+0x78>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <vPortValidateInterruptPriority+0x7c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d90a      	bls.n	8005f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	603b      	str	r3, [r7, #0]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <vPortValidateInterruptPriority+0x60>
	}
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	e000e3f0 	.word	0xe000e3f0
 8005f6c:	20000d88 	.word	0x20000d88
 8005f70:	e000ed0c 	.word	0xe000ed0c
 8005f74:	20000d8c 	.word	0x20000d8c

08005f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f84:	f7fe fd9c 	bl	8004ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f88:	4b5b      	ldr	r3, [pc, #364]	; (80060f8 <pvPortMalloc+0x180>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f90:	f000 f920 	bl	80061d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f94:	4b59      	ldr	r3, [pc, #356]	; (80060fc <pvPortMalloc+0x184>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f040 8093 	bne.w	80060c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01d      	beq.n	8005fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fa8:	2208      	movs	r2, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f023 0307 	bic.w	r3, r3, #7
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	617b      	str	r3, [r7, #20]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d06e      	beq.n	80060c8 <pvPortMalloc+0x150>
 8005fea:	4b45      	ldr	r3, [pc, #276]	; (8006100 <pvPortMalloc+0x188>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d869      	bhi.n	80060c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ff4:	4b43      	ldr	r3, [pc, #268]	; (8006104 <pvPortMalloc+0x18c>)
 8005ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ff8:	4b42      	ldr	r3, [pc, #264]	; (8006104 <pvPortMalloc+0x18c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ffe:	e004      	b.n	800600a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d903      	bls.n	800601c <pvPortMalloc+0xa4>
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f1      	bne.n	8006000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800601c:	4b36      	ldr	r3, [pc, #216]	; (80060f8 <pvPortMalloc+0x180>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006022:	429a      	cmp	r2, r3
 8006024:	d050      	beq.n	80060c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2208      	movs	r2, #8
 800602c:	4413      	add	r3, r2
 800602e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	2308      	movs	r3, #8
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	429a      	cmp	r2, r3
 8006046:	d91f      	bls.n	8006088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <pvPortMalloc+0xf8>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	613b      	str	r3, [r7, #16]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006082:	69b8      	ldr	r0, [r7, #24]
 8006084:	f000 f908 	bl	8006298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006088:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <pvPortMalloc+0x188>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <pvPortMalloc+0x188>)
 8006094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <pvPortMalloc+0x188>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <pvPortMalloc+0x190>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d203      	bcs.n	80060aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <pvPortMalloc+0x188>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <pvPortMalloc+0x190>)
 80060a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <pvPortMalloc+0x184>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <pvPortMalloc+0x194>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a11      	ldr	r2, [pc, #68]	; (800610c <pvPortMalloc+0x194>)
 80060c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060c8:	f7fe fd08 	bl	8004adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <pvPortMalloc+0x174>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	60fb      	str	r3, [r7, #12]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <pvPortMalloc+0x172>
	return pvReturn;
 80060ec:	69fb      	ldr	r3, [r7, #28]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3728      	adds	r7, #40	; 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20004998 	.word	0x20004998
 80060fc:	200049ac 	.word	0x200049ac
 8006100:	2000499c 	.word	0x2000499c
 8006104:	20004990 	.word	0x20004990
 8006108:	200049a0 	.word	0x200049a0
 800610c:	200049a4 	.word	0x200049a4

08006110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d04d      	beq.n	80061be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006122:	2308      	movs	r3, #8
 8006124:	425b      	negs	r3, r3
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4413      	add	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <vPortFree+0xb8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <vPortFree+0x44>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60fb      	str	r3, [r7, #12]
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <vPortFree+0x62>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	60bb      	str	r3, [r7, #8]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <vPortFree+0xb8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01e      	beq.n	80061be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11a      	bne.n	80061be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <vPortFree+0xb8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	43db      	mvns	r3, r3
 8006192:	401a      	ands	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006198:	f7fe fc92 	bl	8004ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <vPortFree+0xbc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4413      	add	r3, r2
 80061a6:	4a09      	ldr	r2, [pc, #36]	; (80061cc <vPortFree+0xbc>)
 80061a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061aa:	6938      	ldr	r0, [r7, #16]
 80061ac:	f000 f874 	bl	8006298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <vPortFree+0xc0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3301      	adds	r3, #1
 80061b6:	4a06      	ldr	r2, [pc, #24]	; (80061d0 <vPortFree+0xc0>)
 80061b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061ba:	f7fe fc8f 	bl	8004adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061be:	bf00      	nop
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	200049ac 	.word	0x200049ac
 80061cc:	2000499c 	.word	0x2000499c
 80061d0:	200049a8 	.word	0x200049a8

080061d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061e0:	4b27      	ldr	r3, [pc, #156]	; (8006280 <prvHeapInit+0xac>)
 80061e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00c      	beq.n	8006208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3307      	adds	r3, #7
 80061f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0307 	bic.w	r3, r3, #7
 80061fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <prvHeapInit+0xac>)
 8006204:	4413      	add	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800620c:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <prvHeapInit+0xb0>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006212:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <prvHeapInit+0xb0>)
 8006214:	2200      	movs	r2, #0
 8006216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006220:	2208      	movs	r2, #8
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0307 	bic.w	r3, r3, #7
 800622e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4a15      	ldr	r2, [pc, #84]	; (8006288 <prvHeapInit+0xb4>)
 8006234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <prvHeapInit+0xb4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <prvHeapInit+0xb4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <prvHeapInit+0xb4>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4a0a      	ldr	r2, [pc, #40]	; (800628c <prvHeapInit+0xb8>)
 8006262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <prvHeapInit+0xbc>)
 800626a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800626c:	4b09      	ldr	r3, [pc, #36]	; (8006294 <prvHeapInit+0xc0>)
 800626e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	20000d90 	.word	0x20000d90
 8006284:	20004990 	.word	0x20004990
 8006288:	20004998 	.word	0x20004998
 800628c:	200049a0 	.word	0x200049a0
 8006290:	2000499c 	.word	0x2000499c
 8006294:	200049ac 	.word	0x200049ac

08006298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <prvInsertBlockIntoFreeList+0xac>)
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e002      	b.n	80062ac <prvInsertBlockIntoFreeList+0x14>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d8f7      	bhi.n	80062a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	4413      	add	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d108      	bne.n	80062da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	441a      	add	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	441a      	add	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d118      	bne.n	8006320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <prvInsertBlockIntoFreeList+0xb0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d00d      	beq.n	8006316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e008      	b.n	8006328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <prvInsertBlockIntoFreeList+0xb0>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e003      	b.n	8006328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	429a      	cmp	r2, r3
 800632e:	d002      	beq.n	8006336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20004990 	.word	0x20004990
 8006348:	20004998 	.word	0x20004998

0800634c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006352:	2300      	movs	r3, #0
 8006354:	71fb      	strb	r3, [r7, #7]
 8006356:	e026      	b.n	80063a6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	3b50      	subs	r3, #80	; 0x50
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f82b 	bl	80063bc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8006366:	2100      	movs	r1, #0
 8006368:	2000      	movs	r0, #0
 800636a:	f000 f827 	bl	80063bc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800636e:	2100      	movs	r1, #0
 8006370:	2010      	movs	r0, #16
 8006372:	f000 f823 	bl	80063bc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8006376:	2300      	movs	r3, #0
 8006378:	71bb      	strb	r3, [r7, #6]
 800637a:	e00d      	b.n	8006398 <OLED_Refresh_Gram+0x4c>
 800637c:	79ba      	ldrb	r2, [r7, #6]
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	490d      	ldr	r1, [pc, #52]	; (80063b8 <OLED_Refresh_Gram+0x6c>)
 8006382:	00d2      	lsls	r2, r2, #3
 8006384:	440a      	add	r2, r1
 8006386:	4413      	add	r3, r2
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2101      	movs	r1, #1
 800638c:	4618      	mov	r0, r3
 800638e:	f000 f815 	bl	80063bc <OLED_WR_Byte>
 8006392:	79bb      	ldrb	r3, [r7, #6]
 8006394:	3301      	adds	r3, #1
 8006396:	71bb      	strb	r3, [r7, #6]
 8006398:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800639c:	2b00      	cmp	r3, #0
 800639e:	daed      	bge.n	800637c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	3301      	adds	r3, #1
 80063a4:	71fb      	strb	r3, [r7, #7]
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	2b07      	cmp	r3, #7
 80063aa:	d9d5      	bls.n	8006358 <OLED_Refresh_Gram+0xc>
	}   
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20004b48 	.word	0x20004b48

080063bc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	460a      	mov	r2, r1
 80063c6:	71fb      	strb	r3, [r7, #7]
 80063c8:	4613      	mov	r3, r2
 80063ca:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80063cc:	79bb      	ldrb	r3, [r7, #6]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d006      	beq.n	80063e0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80063d2:	2201      	movs	r2, #1
 80063d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063d8:	481c      	ldr	r0, [pc, #112]	; (800644c <OLED_WR_Byte+0x90>)
 80063da:	f7fb fdc3 	bl	8001f64 <HAL_GPIO_WritePin>
 80063de:	e005      	b.n	80063ec <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80063e0:	2200      	movs	r2, #0
 80063e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063e6:	4819      	ldr	r0, [pc, #100]	; (800644c <OLED_WR_Byte+0x90>)
 80063e8:	f7fb fdbc 	bl	8001f64 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80063ec:	2300      	movs	r3, #0
 80063ee:	73fb      	strb	r3, [r7, #15]
 80063f0:	e01e      	b.n	8006430 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80063f2:	2200      	movs	r2, #0
 80063f4:	2120      	movs	r1, #32
 80063f6:	4815      	ldr	r0, [pc, #84]	; (800644c <OLED_WR_Byte+0x90>)
 80063f8:	f7fb fdb4 	bl	8001f64 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80063fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006400:	2b00      	cmp	r3, #0
 8006402:	da05      	bge.n	8006410 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006404:	2201      	movs	r2, #1
 8006406:	2140      	movs	r1, #64	; 0x40
 8006408:	4810      	ldr	r0, [pc, #64]	; (800644c <OLED_WR_Byte+0x90>)
 800640a:	f7fb fdab 	bl	8001f64 <HAL_GPIO_WritePin>
 800640e:	e004      	b.n	800641a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006410:	2200      	movs	r2, #0
 8006412:	2140      	movs	r1, #64	; 0x40
 8006414:	480d      	ldr	r0, [pc, #52]	; (800644c <OLED_WR_Byte+0x90>)
 8006416:	f7fb fda5 	bl	8001f64 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800641a:	2201      	movs	r2, #1
 800641c:	2120      	movs	r1, #32
 800641e:	480b      	ldr	r0, [pc, #44]	; (800644c <OLED_WR_Byte+0x90>)
 8006420:	f7fb fda0 	bl	8001f64 <HAL_GPIO_WritePin>
		dat<<=1;   
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	3301      	adds	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b07      	cmp	r3, #7
 8006434:	d9dd      	bls.n	80063f2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8006436:	2201      	movs	r2, #1
 8006438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800643c:	4803      	ldr	r0, [pc, #12]	; (800644c <OLED_WR_Byte+0x90>)
 800643e:	f7fb fd91 	bl	8001f64 <HAL_GPIO_WritePin>
} 
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40021000 	.word	0x40021000

08006450 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006456:	2300      	movs	r3, #0
 8006458:	71fb      	strb	r3, [r7, #7]
 800645a:	e014      	b.n	8006486 <OLED_Clear+0x36>
 800645c:	2300      	movs	r3, #0
 800645e:	71bb      	strb	r3, [r7, #6]
 8006460:	e00a      	b.n	8006478 <OLED_Clear+0x28>
 8006462:	79ba      	ldrb	r2, [r7, #6]
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	490c      	ldr	r1, [pc, #48]	; (8006498 <OLED_Clear+0x48>)
 8006468:	00d2      	lsls	r2, r2, #3
 800646a:	440a      	add	r2, r1
 800646c:	4413      	add	r3, r2
 800646e:	2200      	movs	r2, #0
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	79bb      	ldrb	r3, [r7, #6]
 8006474:	3301      	adds	r3, #1
 8006476:	71bb      	strb	r3, [r7, #6]
 8006478:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800647c:	2b00      	cmp	r3, #0
 800647e:	daf0      	bge.n	8006462 <OLED_Clear+0x12>
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	3301      	adds	r3, #1
 8006484:	71fb      	strb	r3, [r7, #7]
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b07      	cmp	r3, #7
 800648a:	d9e7      	bls.n	800645c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800648c:	f7ff ff5e 	bl	800634c <OLED_Refresh_Gram>
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20004b48 	.word	0x20004b48

0800649c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
 80064a6:	460b      	mov	r3, r1
 80064a8:	71bb      	strb	r3, [r7, #6]
 80064aa:	4613      	mov	r3, r2
 80064ac:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80064b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	db41      	blt.n	800653e <OLED_DrawPoint+0xa2>
 80064ba:	79bb      	ldrb	r3, [r7, #6]
 80064bc:	2b3f      	cmp	r3, #63	; 0x3f
 80064be:	d83e      	bhi.n	800653e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80064c0:	79bb      	ldrb	r3, [r7, #6]
 80064c2:	08db      	lsrs	r3, r3, #3
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f1c3 0307 	rsb	r3, r3, #7
 80064ca:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80064cc:	79bb      	ldrb	r3, [r7, #6]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80064d4:	7b7b      	ldrb	r3, [r7, #13]
 80064d6:	f1c3 0307 	rsb	r3, r3, #7
 80064da:	2201      	movs	r2, #1
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80064e2:	797b      	ldrb	r3, [r7, #5]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d012      	beq.n	800650e <OLED_DrawPoint+0x72>
 80064e8:	79fa      	ldrb	r2, [r7, #7]
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	4917      	ldr	r1, [pc, #92]	; (800654c <OLED_DrawPoint+0xb0>)
 80064ee:	00d2      	lsls	r2, r2, #3
 80064f0:	440a      	add	r2, r1
 80064f2:	4413      	add	r3, r2
 80064f4:	7818      	ldrb	r0, [r3, #0]
 80064f6:	79fa      	ldrb	r2, [r7, #7]
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	7bf9      	ldrb	r1, [r7, #15]
 80064fc:	4301      	orrs	r1, r0
 80064fe:	b2c8      	uxtb	r0, r1
 8006500:	4912      	ldr	r1, [pc, #72]	; (800654c <OLED_DrawPoint+0xb0>)
 8006502:	00d2      	lsls	r2, r2, #3
 8006504:	440a      	add	r2, r1
 8006506:	4413      	add	r3, r2
 8006508:	4602      	mov	r2, r0
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	e018      	b.n	8006540 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800650e:	79fa      	ldrb	r2, [r7, #7]
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	490e      	ldr	r1, [pc, #56]	; (800654c <OLED_DrawPoint+0xb0>)
 8006514:	00d2      	lsls	r2, r2, #3
 8006516:	440a      	add	r2, r1
 8006518:	4413      	add	r3, r2
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	b25a      	sxtb	r2, r3
 800651e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006522:	43db      	mvns	r3, r3
 8006524:	b25b      	sxtb	r3, r3
 8006526:	4013      	ands	r3, r2
 8006528:	b259      	sxtb	r1, r3
 800652a:	79fa      	ldrb	r2, [r7, #7]
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	b2c8      	uxtb	r0, r1
 8006530:	4906      	ldr	r1, [pc, #24]	; (800654c <OLED_DrawPoint+0xb0>)
 8006532:	00d2      	lsls	r2, r2, #3
 8006534:	440a      	add	r2, r1
 8006536:	4413      	add	r3, r2
 8006538:	4602      	mov	r2, r0
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e000      	b.n	8006540 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800653e:	bf00      	nop
}
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20004b48 	.word	0x20004b48

08006550 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8006550:	b590      	push	{r4, r7, lr}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	4611      	mov	r1, r2
 800655c:	461a      	mov	r2, r3
 800655e:	4623      	mov	r3, r4
 8006560:	71fb      	strb	r3, [r7, #7]
 8006562:	4603      	mov	r3, r0
 8006564:	71bb      	strb	r3, [r7, #6]
 8006566:	460b      	mov	r3, r1
 8006568:	717b      	strb	r3, [r7, #5]
 800656a:	4613      	mov	r3, r2
 800656c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800656e:	79bb      	ldrb	r3, [r7, #6]
 8006570:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8006572:	797b      	ldrb	r3, [r7, #5]
 8006574:	3b20      	subs	r3, #32
 8006576:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8006578:	2300      	movs	r3, #0
 800657a:	73bb      	strb	r3, [r7, #14]
 800657c:	e04d      	b.n	800661a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800657e:	793b      	ldrb	r3, [r7, #4]
 8006580:	2b0c      	cmp	r3, #12
 8006582:	d10b      	bne.n	800659c <OLED_ShowChar+0x4c>
 8006584:	797a      	ldrb	r2, [r7, #5]
 8006586:	7bb9      	ldrb	r1, [r7, #14]
 8006588:	4828      	ldr	r0, [pc, #160]	; (800662c <OLED_ShowChar+0xdc>)
 800658a:	4613      	mov	r3, r2
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4403      	add	r3, r0
 8006594:	440b      	add	r3, r1
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	73fb      	strb	r3, [r7, #15]
 800659a:	e007      	b.n	80065ac <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800659c:	797a      	ldrb	r2, [r7, #5]
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	4923      	ldr	r1, [pc, #140]	; (8006630 <OLED_ShowChar+0xe0>)
 80065a2:	0112      	lsls	r2, r2, #4
 80065a4:	440a      	add	r2, r1
 80065a6:	4413      	add	r3, r2
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80065ac:	2300      	movs	r3, #0
 80065ae:	737b      	strb	r3, [r7, #13]
 80065b0:	e02d      	b.n	800660e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80065b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da07      	bge.n	80065ca <OLED_ShowChar+0x7a>
 80065ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80065be:	79b9      	ldrb	r1, [r7, #6]
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff ff6a 	bl	800649c <OLED_DrawPoint>
 80065c8:	e00c      	b.n	80065e4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80065ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	79b9      	ldrb	r1, [r7, #6]
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff ff5c 	bl	800649c <OLED_DrawPoint>
			temp<<=1;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
			y++;
 80065ea:	79bb      	ldrb	r3, [r7, #6]
 80065ec:	3301      	adds	r3, #1
 80065ee:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80065f0:	79ba      	ldrb	r2, [r7, #6]
 80065f2:	7b3b      	ldrb	r3, [r7, #12]
 80065f4:	1ad2      	subs	r2, r2, r3
 80065f6:	793b      	ldrb	r3, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d105      	bne.n	8006608 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80065fc:	7b3b      	ldrb	r3, [r7, #12]
 80065fe:	71bb      	strb	r3, [r7, #6]
				x++;
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	3301      	adds	r3, #1
 8006604:	71fb      	strb	r3, [r7, #7]
				break;
 8006606:	e005      	b.n	8006614 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8006608:	7b7b      	ldrb	r3, [r7, #13]
 800660a:	3301      	adds	r3, #1
 800660c:	737b      	strb	r3, [r7, #13]
 800660e:	7b7b      	ldrb	r3, [r7, #13]
 8006610:	2b07      	cmp	r3, #7
 8006612:	d9ce      	bls.n	80065b2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	3301      	adds	r3, #1
 8006618:	73bb      	strb	r3, [r7, #14]
 800661a:	7bba      	ldrb	r2, [r7, #14]
 800661c:	793b      	ldrb	r3, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d3ad      	bcc.n	800657e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	bd90      	pop	{r4, r7, pc}
 800662c:	08007120 	.word	0x08007120
 8006630:	08007594 	.word	0x08007594

08006634 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af02      	add	r7, sp, #8
 800663a:	4603      	mov	r3, r0
 800663c:	603a      	str	r2, [r7, #0]
 800663e:	71fb      	strb	r3, [r7, #7]
 8006640:	460b      	mov	r3, r1
 8006642:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006644:	e01f      	b.n	8006686 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	2b7a      	cmp	r3, #122	; 0x7a
 800664a:	d904      	bls.n	8006656 <OLED_ShowString+0x22>
 800664c:	2300      	movs	r3, #0
 800664e:	71fb      	strb	r3, [r7, #7]
 8006650:	79bb      	ldrb	r3, [r7, #6]
 8006652:	3310      	adds	r3, #16
 8006654:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8006656:	79bb      	ldrb	r3, [r7, #6]
 8006658:	2b3a      	cmp	r3, #58	; 0x3a
 800665a:	d905      	bls.n	8006668 <OLED_ShowString+0x34>
 800665c:	2300      	movs	r3, #0
 800665e:	71fb      	strb	r3, [r7, #7]
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	71bb      	strb	r3, [r7, #6]
 8006664:	f7ff fef4 	bl	8006450 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	79b9      	ldrb	r1, [r7, #6]
 800666e:	79f8      	ldrb	r0, [r7, #7]
 8006670:	2301      	movs	r3, #1
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	230c      	movs	r3, #12
 8006676:	f7ff ff6b 	bl	8006550 <OLED_ShowChar>
        x+=8;
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	3308      	adds	r3, #8
 800667e:	71fb      	strb	r3, [r7, #7]
        p++;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1db      	bne.n	8006646 <OLED_ShowString+0x12>
    }  
}	 
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <OLED_Init>:

void OLED_Init(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800669c:	f7fb fc96 	bl	8001fcc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80066a0:	4b41      	ldr	r3, [pc, #260]	; (80067a8 <OLED_Init+0x110>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	4a40      	ldr	r2, [pc, #256]	; (80067a8 <OLED_Init+0x110>)
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	6713      	str	r3, [r2, #112]	; 0x70
 80066ac:	4b3e      	ldr	r3, [pc, #248]	; (80067a8 <OLED_Init+0x110>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	4a3d      	ldr	r2, [pc, #244]	; (80067a8 <OLED_Init+0x110>)
 80066b2:	f023 0304 	bic.w	r3, r3, #4
 80066b6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80066b8:	f7fb fc9c 	bl	8001ff4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80066bc:	2200      	movs	r2, #0
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	483a      	ldr	r0, [pc, #232]	; (80067ac <OLED_Init+0x114>)
 80066c2:	f7fb fc4f 	bl	8001f64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80066c6:	2064      	movs	r0, #100	; 0x64
 80066c8:	f7fb f9a6 	bl	8001a18 <HAL_Delay>
	OLED_RST_Set();
 80066cc:	2201      	movs	r2, #1
 80066ce:	2180      	movs	r1, #128	; 0x80
 80066d0:	4836      	ldr	r0, [pc, #216]	; (80067ac <OLED_Init+0x114>)
 80066d2:	f7fb fc47 	bl	8001f64 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80066d6:	2100      	movs	r1, #0
 80066d8:	20ae      	movs	r0, #174	; 0xae
 80066da:	f7ff fe6f 	bl	80063bc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80066de:	2100      	movs	r1, #0
 80066e0:	20d5      	movs	r0, #213	; 0xd5
 80066e2:	f7ff fe6b 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80066e6:	2100      	movs	r1, #0
 80066e8:	2050      	movs	r0, #80	; 0x50
 80066ea:	f7ff fe67 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80066ee:	2100      	movs	r1, #0
 80066f0:	20a8      	movs	r0, #168	; 0xa8
 80066f2:	f7ff fe63 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80066f6:	2100      	movs	r1, #0
 80066f8:	203f      	movs	r0, #63	; 0x3f
 80066fa:	f7ff fe5f 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80066fe:	2100      	movs	r1, #0
 8006700:	20d3      	movs	r0, #211	; 0xd3
 8006702:	f7ff fe5b 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8006706:	2100      	movs	r1, #0
 8006708:	2000      	movs	r0, #0
 800670a:	f7ff fe57 	bl	80063bc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800670e:	2100      	movs	r1, #0
 8006710:	2040      	movs	r0, #64	; 0x40
 8006712:	f7ff fe53 	bl	80063bc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8006716:	2100      	movs	r1, #0
 8006718:	208d      	movs	r0, #141	; 0x8d
 800671a:	f7ff fe4f 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800671e:	2100      	movs	r1, #0
 8006720:	2014      	movs	r0, #20
 8006722:	f7ff fe4b 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8006726:	2100      	movs	r1, #0
 8006728:	2020      	movs	r0, #32
 800672a:	f7ff fe47 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800672e:	2100      	movs	r1, #0
 8006730:	2002      	movs	r0, #2
 8006732:	f7ff fe43 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8006736:	2100      	movs	r1, #0
 8006738:	20a1      	movs	r0, #161	; 0xa1
 800673a:	f7ff fe3f 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800673e:	2100      	movs	r1, #0
 8006740:	20c0      	movs	r0, #192	; 0xc0
 8006742:	f7ff fe3b 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8006746:	2100      	movs	r1, #0
 8006748:	20da      	movs	r0, #218	; 0xda
 800674a:	f7ff fe37 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800674e:	2100      	movs	r1, #0
 8006750:	2012      	movs	r0, #18
 8006752:	f7ff fe33 	bl	80063bc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8006756:	2100      	movs	r1, #0
 8006758:	2081      	movs	r0, #129	; 0x81
 800675a:	f7ff fe2f 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800675e:	2100      	movs	r1, #0
 8006760:	20ef      	movs	r0, #239	; 0xef
 8006762:	f7ff fe2b 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8006766:	2100      	movs	r1, #0
 8006768:	20d9      	movs	r0, #217	; 0xd9
 800676a:	f7ff fe27 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800676e:	2100      	movs	r1, #0
 8006770:	20f1      	movs	r0, #241	; 0xf1
 8006772:	f7ff fe23 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8006776:	2100      	movs	r1, #0
 8006778:	20db      	movs	r0, #219	; 0xdb
 800677a:	f7ff fe1f 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800677e:	2100      	movs	r1, #0
 8006780:	2030      	movs	r0, #48	; 0x30
 8006782:	f7ff fe1b 	bl	80063bc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8006786:	2100      	movs	r1, #0
 8006788:	20a4      	movs	r0, #164	; 0xa4
 800678a:	f7ff fe17 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800678e:	2100      	movs	r1, #0
 8006790:	20a6      	movs	r0, #166	; 0xa6
 8006792:	f7ff fe13 	bl	80063bc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8006796:	2100      	movs	r1, #0
 8006798:	20af      	movs	r0, #175	; 0xaf
 800679a:	f7ff fe0f 	bl	80063bc <OLED_WR_Byte>
	OLED_Clear(); 
 800679e:	f7ff fe57 	bl	8006450 <OLED_Clear>
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	40023800 	.word	0x40023800
 80067ac:	40021000 	.word	0x40021000

080067b0 <__errno>:
 80067b0:	4b01      	ldr	r3, [pc, #4]	; (80067b8 <__errno+0x8>)
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000010 	.word	0x20000010

080067bc <__libc_init_array>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	4d0d      	ldr	r5, [pc, #52]	; (80067f4 <__libc_init_array+0x38>)
 80067c0:	4c0d      	ldr	r4, [pc, #52]	; (80067f8 <__libc_init_array+0x3c>)
 80067c2:	1b64      	subs	r4, r4, r5
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	2600      	movs	r6, #0
 80067c8:	42a6      	cmp	r6, r4
 80067ca:	d109      	bne.n	80067e0 <__libc_init_array+0x24>
 80067cc:	4d0b      	ldr	r5, [pc, #44]	; (80067fc <__libc_init_array+0x40>)
 80067ce:	4c0c      	ldr	r4, [pc, #48]	; (8006800 <__libc_init_array+0x44>)
 80067d0:	f000 fc4e 	bl	8007070 <_init>
 80067d4:	1b64      	subs	r4, r4, r5
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	2600      	movs	r6, #0
 80067da:	42a6      	cmp	r6, r4
 80067dc:	d105      	bne.n	80067ea <__libc_init_array+0x2e>
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e4:	4798      	blx	r3
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7ee      	b.n	80067c8 <__libc_init_array+0xc>
 80067ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ee:	4798      	blx	r3
 80067f0:	3601      	adds	r6, #1
 80067f2:	e7f2      	b.n	80067da <__libc_init_array+0x1e>
 80067f4:	08007bc0 	.word	0x08007bc0
 80067f8:	08007bc0 	.word	0x08007bc0
 80067fc:	08007bc0 	.word	0x08007bc0
 8006800:	08007bc4 	.word	0x08007bc4

08006804 <memcpy>:
 8006804:	440a      	add	r2, r1
 8006806:	4291      	cmp	r1, r2
 8006808:	f100 33ff 	add.w	r3, r0, #4294967295
 800680c:	d100      	bne.n	8006810 <memcpy+0xc>
 800680e:	4770      	bx	lr
 8006810:	b510      	push	{r4, lr}
 8006812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800681a:	4291      	cmp	r1, r2
 800681c:	d1f9      	bne.n	8006812 <memcpy+0xe>
 800681e:	bd10      	pop	{r4, pc}

08006820 <memset>:
 8006820:	4402      	add	r2, r0
 8006822:	4603      	mov	r3, r0
 8006824:	4293      	cmp	r3, r2
 8006826:	d100      	bne.n	800682a <memset+0xa>
 8006828:	4770      	bx	lr
 800682a:	f803 1b01 	strb.w	r1, [r3], #1
 800682e:	e7f9      	b.n	8006824 <memset+0x4>

08006830 <siprintf>:
 8006830:	b40e      	push	{r1, r2, r3}
 8006832:	b500      	push	{lr}
 8006834:	b09c      	sub	sp, #112	; 0x70
 8006836:	ab1d      	add	r3, sp, #116	; 0x74
 8006838:	9002      	str	r0, [sp, #8]
 800683a:	9006      	str	r0, [sp, #24]
 800683c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006840:	4809      	ldr	r0, [pc, #36]	; (8006868 <siprintf+0x38>)
 8006842:	9107      	str	r1, [sp, #28]
 8006844:	9104      	str	r1, [sp, #16]
 8006846:	4909      	ldr	r1, [pc, #36]	; (800686c <siprintf+0x3c>)
 8006848:	f853 2b04 	ldr.w	r2, [r3], #4
 800684c:	9105      	str	r1, [sp, #20]
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	a902      	add	r1, sp, #8
 8006854:	f000 f868 	bl	8006928 <_svfiprintf_r>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	b01c      	add	sp, #112	; 0x70
 8006860:	f85d eb04 	ldr.w	lr, [sp], #4
 8006864:	b003      	add	sp, #12
 8006866:	4770      	bx	lr
 8006868:	20000010 	.word	0x20000010
 800686c:	ffff0208 	.word	0xffff0208

08006870 <__ssputs_r>:
 8006870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	688e      	ldr	r6, [r1, #8]
 8006876:	429e      	cmp	r6, r3
 8006878:	4682      	mov	sl, r0
 800687a:	460c      	mov	r4, r1
 800687c:	4690      	mov	r8, r2
 800687e:	461f      	mov	r7, r3
 8006880:	d838      	bhi.n	80068f4 <__ssputs_r+0x84>
 8006882:	898a      	ldrh	r2, [r1, #12]
 8006884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006888:	d032      	beq.n	80068f0 <__ssputs_r+0x80>
 800688a:	6825      	ldr	r5, [r4, #0]
 800688c:	6909      	ldr	r1, [r1, #16]
 800688e:	eba5 0901 	sub.w	r9, r5, r1
 8006892:	6965      	ldr	r5, [r4, #20]
 8006894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800689c:	3301      	adds	r3, #1
 800689e:	444b      	add	r3, r9
 80068a0:	106d      	asrs	r5, r5, #1
 80068a2:	429d      	cmp	r5, r3
 80068a4:	bf38      	it	cc
 80068a6:	461d      	movcc	r5, r3
 80068a8:	0553      	lsls	r3, r2, #21
 80068aa:	d531      	bpl.n	8006910 <__ssputs_r+0xa0>
 80068ac:	4629      	mov	r1, r5
 80068ae:	f000 fb39 	bl	8006f24 <_malloc_r>
 80068b2:	4606      	mov	r6, r0
 80068b4:	b950      	cbnz	r0, 80068cc <__ssputs_r+0x5c>
 80068b6:	230c      	movs	r3, #12
 80068b8:	f8ca 3000 	str.w	r3, [sl]
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
 80068c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068cc:	6921      	ldr	r1, [r4, #16]
 80068ce:	464a      	mov	r2, r9
 80068d0:	f7ff ff98 	bl	8006804 <memcpy>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	6126      	str	r6, [r4, #16]
 80068e2:	6165      	str	r5, [r4, #20]
 80068e4:	444e      	add	r6, r9
 80068e6:	eba5 0509 	sub.w	r5, r5, r9
 80068ea:	6026      	str	r6, [r4, #0]
 80068ec:	60a5      	str	r5, [r4, #8]
 80068ee:	463e      	mov	r6, r7
 80068f0:	42be      	cmp	r6, r7
 80068f2:	d900      	bls.n	80068f6 <__ssputs_r+0x86>
 80068f4:	463e      	mov	r6, r7
 80068f6:	4632      	mov	r2, r6
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	4641      	mov	r1, r8
 80068fc:	f000 faa8 	bl	8006e50 <memmove>
 8006900:	68a3      	ldr	r3, [r4, #8]
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	1b9b      	subs	r3, r3, r6
 8006906:	4432      	add	r2, r6
 8006908:	60a3      	str	r3, [r4, #8]
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	2000      	movs	r0, #0
 800690e:	e7db      	b.n	80068c8 <__ssputs_r+0x58>
 8006910:	462a      	mov	r2, r5
 8006912:	f000 fb61 	bl	8006fd8 <_realloc_r>
 8006916:	4606      	mov	r6, r0
 8006918:	2800      	cmp	r0, #0
 800691a:	d1e1      	bne.n	80068e0 <__ssputs_r+0x70>
 800691c:	6921      	ldr	r1, [r4, #16]
 800691e:	4650      	mov	r0, sl
 8006920:	f000 fab0 	bl	8006e84 <_free_r>
 8006924:	e7c7      	b.n	80068b6 <__ssputs_r+0x46>
	...

08006928 <_svfiprintf_r>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	4698      	mov	r8, r3
 800692e:	898b      	ldrh	r3, [r1, #12]
 8006930:	061b      	lsls	r3, r3, #24
 8006932:	b09d      	sub	sp, #116	; 0x74
 8006934:	4607      	mov	r7, r0
 8006936:	460d      	mov	r5, r1
 8006938:	4614      	mov	r4, r2
 800693a:	d50e      	bpl.n	800695a <_svfiprintf_r+0x32>
 800693c:	690b      	ldr	r3, [r1, #16]
 800693e:	b963      	cbnz	r3, 800695a <_svfiprintf_r+0x32>
 8006940:	2140      	movs	r1, #64	; 0x40
 8006942:	f000 faef 	bl	8006f24 <_malloc_r>
 8006946:	6028      	str	r0, [r5, #0]
 8006948:	6128      	str	r0, [r5, #16]
 800694a:	b920      	cbnz	r0, 8006956 <_svfiprintf_r+0x2e>
 800694c:	230c      	movs	r3, #12
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	f04f 30ff 	mov.w	r0, #4294967295
 8006954:	e0d1      	b.n	8006afa <_svfiprintf_r+0x1d2>
 8006956:	2340      	movs	r3, #64	; 0x40
 8006958:	616b      	str	r3, [r5, #20]
 800695a:	2300      	movs	r3, #0
 800695c:	9309      	str	r3, [sp, #36]	; 0x24
 800695e:	2320      	movs	r3, #32
 8006960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006964:	f8cd 800c 	str.w	r8, [sp, #12]
 8006968:	2330      	movs	r3, #48	; 0x30
 800696a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b14 <_svfiprintf_r+0x1ec>
 800696e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006972:	f04f 0901 	mov.w	r9, #1
 8006976:	4623      	mov	r3, r4
 8006978:	469a      	mov	sl, r3
 800697a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800697e:	b10a      	cbz	r2, 8006984 <_svfiprintf_r+0x5c>
 8006980:	2a25      	cmp	r2, #37	; 0x25
 8006982:	d1f9      	bne.n	8006978 <_svfiprintf_r+0x50>
 8006984:	ebba 0b04 	subs.w	fp, sl, r4
 8006988:	d00b      	beq.n	80069a2 <_svfiprintf_r+0x7a>
 800698a:	465b      	mov	r3, fp
 800698c:	4622      	mov	r2, r4
 800698e:	4629      	mov	r1, r5
 8006990:	4638      	mov	r0, r7
 8006992:	f7ff ff6d 	bl	8006870 <__ssputs_r>
 8006996:	3001      	adds	r0, #1
 8006998:	f000 80aa 	beq.w	8006af0 <_svfiprintf_r+0x1c8>
 800699c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800699e:	445a      	add	r2, fp
 80069a0:	9209      	str	r2, [sp, #36]	; 0x24
 80069a2:	f89a 3000 	ldrb.w	r3, [sl]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 80a2 	beq.w	8006af0 <_svfiprintf_r+0x1c8>
 80069ac:	2300      	movs	r3, #0
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295
 80069b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069b6:	f10a 0a01 	add.w	sl, sl, #1
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	9307      	str	r3, [sp, #28]
 80069be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069c2:	931a      	str	r3, [sp, #104]	; 0x68
 80069c4:	4654      	mov	r4, sl
 80069c6:	2205      	movs	r2, #5
 80069c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069cc:	4851      	ldr	r0, [pc, #324]	; (8006b14 <_svfiprintf_r+0x1ec>)
 80069ce:	f7f9 fbff 	bl	80001d0 <memchr>
 80069d2:	9a04      	ldr	r2, [sp, #16]
 80069d4:	b9d8      	cbnz	r0, 8006a0e <_svfiprintf_r+0xe6>
 80069d6:	06d0      	lsls	r0, r2, #27
 80069d8:	bf44      	itt	mi
 80069da:	2320      	movmi	r3, #32
 80069dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069e0:	0711      	lsls	r1, r2, #28
 80069e2:	bf44      	itt	mi
 80069e4:	232b      	movmi	r3, #43	; 0x2b
 80069e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ea:	f89a 3000 	ldrb.w	r3, [sl]
 80069ee:	2b2a      	cmp	r3, #42	; 0x2a
 80069f0:	d015      	beq.n	8006a1e <_svfiprintf_r+0xf6>
 80069f2:	9a07      	ldr	r2, [sp, #28]
 80069f4:	4654      	mov	r4, sl
 80069f6:	2000      	movs	r0, #0
 80069f8:	f04f 0c0a 	mov.w	ip, #10
 80069fc:	4621      	mov	r1, r4
 80069fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a02:	3b30      	subs	r3, #48	; 0x30
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d94e      	bls.n	8006aa6 <_svfiprintf_r+0x17e>
 8006a08:	b1b0      	cbz	r0, 8006a38 <_svfiprintf_r+0x110>
 8006a0a:	9207      	str	r2, [sp, #28]
 8006a0c:	e014      	b.n	8006a38 <_svfiprintf_r+0x110>
 8006a0e:	eba0 0308 	sub.w	r3, r0, r8
 8006a12:	fa09 f303 	lsl.w	r3, r9, r3
 8006a16:	4313      	orrs	r3, r2
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	46a2      	mov	sl, r4
 8006a1c:	e7d2      	b.n	80069c4 <_svfiprintf_r+0x9c>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	1d19      	adds	r1, r3, #4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	9103      	str	r1, [sp, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bfbb      	ittet	lt
 8006a2a:	425b      	neglt	r3, r3
 8006a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a30:	9307      	strge	r3, [sp, #28]
 8006a32:	9307      	strlt	r3, [sp, #28]
 8006a34:	bfb8      	it	lt
 8006a36:	9204      	strlt	r2, [sp, #16]
 8006a38:	7823      	ldrb	r3, [r4, #0]
 8006a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a3c:	d10c      	bne.n	8006a58 <_svfiprintf_r+0x130>
 8006a3e:	7863      	ldrb	r3, [r4, #1]
 8006a40:	2b2a      	cmp	r3, #42	; 0x2a
 8006a42:	d135      	bne.n	8006ab0 <_svfiprintf_r+0x188>
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	1d1a      	adds	r2, r3, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	9203      	str	r2, [sp, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bfb8      	it	lt
 8006a50:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a54:	3402      	adds	r4, #2
 8006a56:	9305      	str	r3, [sp, #20]
 8006a58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b24 <_svfiprintf_r+0x1fc>
 8006a5c:	7821      	ldrb	r1, [r4, #0]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	4650      	mov	r0, sl
 8006a62:	f7f9 fbb5 	bl	80001d0 <memchr>
 8006a66:	b140      	cbz	r0, 8006a7a <_svfiprintf_r+0x152>
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	eba0 000a 	sub.w	r0, r0, sl
 8006a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	4303      	orrs	r3, r0
 8006a76:	3401      	adds	r4, #1
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7e:	4826      	ldr	r0, [pc, #152]	; (8006b18 <_svfiprintf_r+0x1f0>)
 8006a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a84:	2206      	movs	r2, #6
 8006a86:	f7f9 fba3 	bl	80001d0 <memchr>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d038      	beq.n	8006b00 <_svfiprintf_r+0x1d8>
 8006a8e:	4b23      	ldr	r3, [pc, #140]	; (8006b1c <_svfiprintf_r+0x1f4>)
 8006a90:	bb1b      	cbnz	r3, 8006ada <_svfiprintf_r+0x1b2>
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	3307      	adds	r3, #7
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	9303      	str	r3, [sp, #12]
 8006a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa0:	4433      	add	r3, r6
 8006aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa4:	e767      	b.n	8006976 <_svfiprintf_r+0x4e>
 8006aa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aaa:	460c      	mov	r4, r1
 8006aac:	2001      	movs	r0, #1
 8006aae:	e7a5      	b.n	80069fc <_svfiprintf_r+0xd4>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	3401      	adds	r4, #1
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f04f 0c0a 	mov.w	ip, #10
 8006abc:	4620      	mov	r0, r4
 8006abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ac2:	3a30      	subs	r2, #48	; 0x30
 8006ac4:	2a09      	cmp	r2, #9
 8006ac6:	d903      	bls.n	8006ad0 <_svfiprintf_r+0x1a8>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0c5      	beq.n	8006a58 <_svfiprintf_r+0x130>
 8006acc:	9105      	str	r1, [sp, #20]
 8006ace:	e7c3      	b.n	8006a58 <_svfiprintf_r+0x130>
 8006ad0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e7f0      	b.n	8006abc <_svfiprintf_r+0x194>
 8006ada:	ab03      	add	r3, sp, #12
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	462a      	mov	r2, r5
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <_svfiprintf_r+0x1f8>)
 8006ae2:	a904      	add	r1, sp, #16
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	f3af 8000 	nop.w
 8006aea:	1c42      	adds	r2, r0, #1
 8006aec:	4606      	mov	r6, r0
 8006aee:	d1d6      	bne.n	8006a9e <_svfiprintf_r+0x176>
 8006af0:	89ab      	ldrh	r3, [r5, #12]
 8006af2:	065b      	lsls	r3, r3, #25
 8006af4:	f53f af2c 	bmi.w	8006950 <_svfiprintf_r+0x28>
 8006af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006afa:	b01d      	add	sp, #116	; 0x74
 8006afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b00:	ab03      	add	r3, sp, #12
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	462a      	mov	r2, r5
 8006b06:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <_svfiprintf_r+0x1f8>)
 8006b08:	a904      	add	r1, sp, #16
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	f000 f87a 	bl	8006c04 <_printf_i>
 8006b10:	e7eb      	b.n	8006aea <_svfiprintf_r+0x1c2>
 8006b12:	bf00      	nop
 8006b14:	08007b84 	.word	0x08007b84
 8006b18:	08007b8e 	.word	0x08007b8e
 8006b1c:	00000000 	.word	0x00000000
 8006b20:	08006871 	.word	0x08006871
 8006b24:	08007b8a 	.word	0x08007b8a

08006b28 <_printf_common>:
 8006b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	4699      	mov	r9, r3
 8006b30:	688a      	ldr	r2, [r1, #8]
 8006b32:	690b      	ldr	r3, [r1, #16]
 8006b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	bfb8      	it	lt
 8006b3c:	4613      	movlt	r3, r2
 8006b3e:	6033      	str	r3, [r6, #0]
 8006b40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b44:	4607      	mov	r7, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	b10a      	cbz	r2, 8006b4e <_printf_common+0x26>
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	6033      	str	r3, [r6, #0]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	0699      	lsls	r1, r3, #26
 8006b52:	bf42      	ittt	mi
 8006b54:	6833      	ldrmi	r3, [r6, #0]
 8006b56:	3302      	addmi	r3, #2
 8006b58:	6033      	strmi	r3, [r6, #0]
 8006b5a:	6825      	ldr	r5, [r4, #0]
 8006b5c:	f015 0506 	ands.w	r5, r5, #6
 8006b60:	d106      	bne.n	8006b70 <_printf_common+0x48>
 8006b62:	f104 0a19 	add.w	sl, r4, #25
 8006b66:	68e3      	ldr	r3, [r4, #12]
 8006b68:	6832      	ldr	r2, [r6, #0]
 8006b6a:	1a9b      	subs	r3, r3, r2
 8006b6c:	42ab      	cmp	r3, r5
 8006b6e:	dc26      	bgt.n	8006bbe <_printf_common+0x96>
 8006b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b74:	1e13      	subs	r3, r2, #0
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	bf18      	it	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	0692      	lsls	r2, r2, #26
 8006b7e:	d42b      	bmi.n	8006bd8 <_printf_common+0xb0>
 8006b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b84:	4649      	mov	r1, r9
 8006b86:	4638      	mov	r0, r7
 8006b88:	47c0      	blx	r8
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d01e      	beq.n	8006bcc <_printf_common+0xa4>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	68e5      	ldr	r5, [r4, #12]
 8006b92:	6832      	ldr	r2, [r6, #0]
 8006b94:	f003 0306 	and.w	r3, r3, #6
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	bf08      	it	eq
 8006b9c:	1aad      	subeq	r5, r5, r2
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	6922      	ldr	r2, [r4, #16]
 8006ba2:	bf0c      	ite	eq
 8006ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ba8:	2500      	movne	r5, #0
 8006baa:	4293      	cmp	r3, r2
 8006bac:	bfc4      	itt	gt
 8006bae:	1a9b      	subgt	r3, r3, r2
 8006bb0:	18ed      	addgt	r5, r5, r3
 8006bb2:	2600      	movs	r6, #0
 8006bb4:	341a      	adds	r4, #26
 8006bb6:	42b5      	cmp	r5, r6
 8006bb8:	d11a      	bne.n	8006bf0 <_printf_common+0xc8>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e008      	b.n	8006bd0 <_printf_common+0xa8>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	47c0      	blx	r8
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d103      	bne.n	8006bd4 <_printf_common+0xac>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd4:	3501      	adds	r5, #1
 8006bd6:	e7c6      	b.n	8006b66 <_printf_common+0x3e>
 8006bd8:	18e1      	adds	r1, r4, r3
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	2030      	movs	r0, #48	; 0x30
 8006bde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006be2:	4422      	add	r2, r4
 8006be4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006be8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bec:	3302      	adds	r3, #2
 8006bee:	e7c7      	b.n	8006b80 <_printf_common+0x58>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	47c0      	blx	r8
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d0e6      	beq.n	8006bcc <_printf_common+0xa4>
 8006bfe:	3601      	adds	r6, #1
 8006c00:	e7d9      	b.n	8006bb6 <_printf_common+0x8e>
	...

08006c04 <_printf_i>:
 8006c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	460c      	mov	r4, r1
 8006c0a:	4691      	mov	r9, r2
 8006c0c:	7e27      	ldrb	r7, [r4, #24]
 8006c0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c10:	2f78      	cmp	r7, #120	; 0x78
 8006c12:	4680      	mov	r8, r0
 8006c14:	469a      	mov	sl, r3
 8006c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c1a:	d807      	bhi.n	8006c2c <_printf_i+0x28>
 8006c1c:	2f62      	cmp	r7, #98	; 0x62
 8006c1e:	d80a      	bhi.n	8006c36 <_printf_i+0x32>
 8006c20:	2f00      	cmp	r7, #0
 8006c22:	f000 80d8 	beq.w	8006dd6 <_printf_i+0x1d2>
 8006c26:	2f58      	cmp	r7, #88	; 0x58
 8006c28:	f000 80a3 	beq.w	8006d72 <_printf_i+0x16e>
 8006c2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c34:	e03a      	b.n	8006cac <_printf_i+0xa8>
 8006c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c3a:	2b15      	cmp	r3, #21
 8006c3c:	d8f6      	bhi.n	8006c2c <_printf_i+0x28>
 8006c3e:	a001      	add	r0, pc, #4	; (adr r0, 8006c44 <_printf_i+0x40>)
 8006c40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006c2d 	.word	0x08006c2d
 8006c50:	08006c2d 	.word	0x08006c2d
 8006c54:	08006c2d 	.word	0x08006c2d
 8006c58:	08006c2d 	.word	0x08006c2d
 8006c5c:	08006cb1 	.word	0x08006cb1
 8006c60:	08006c2d 	.word	0x08006c2d
 8006c64:	08006c2d 	.word	0x08006c2d
 8006c68:	08006c2d 	.word	0x08006c2d
 8006c6c:	08006c2d 	.word	0x08006c2d
 8006c70:	08006dbd 	.word	0x08006dbd
 8006c74:	08006ce1 	.word	0x08006ce1
 8006c78:	08006d9f 	.word	0x08006d9f
 8006c7c:	08006c2d 	.word	0x08006c2d
 8006c80:	08006c2d 	.word	0x08006c2d
 8006c84:	08006ddf 	.word	0x08006ddf
 8006c88:	08006c2d 	.word	0x08006c2d
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006c2d 	.word	0x08006c2d
 8006c94:	08006c2d 	.word	0x08006c2d
 8006c98:	08006da7 	.word	0x08006da7
 8006c9c:	680b      	ldr	r3, [r1, #0]
 8006c9e:	1d1a      	adds	r2, r3, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	600a      	str	r2, [r1, #0]
 8006ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0a3      	b.n	8006df8 <_printf_i+0x1f4>
 8006cb0:	6825      	ldr	r5, [r4, #0]
 8006cb2:	6808      	ldr	r0, [r1, #0]
 8006cb4:	062e      	lsls	r6, r5, #24
 8006cb6:	f100 0304 	add.w	r3, r0, #4
 8006cba:	d50a      	bpl.n	8006cd2 <_printf_i+0xce>
 8006cbc:	6805      	ldr	r5, [r0, #0]
 8006cbe:	600b      	str	r3, [r1, #0]
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	da03      	bge.n	8006ccc <_printf_i+0xc8>
 8006cc4:	232d      	movs	r3, #45	; 0x2d
 8006cc6:	426d      	negs	r5, r5
 8006cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ccc:	485e      	ldr	r0, [pc, #376]	; (8006e48 <_printf_i+0x244>)
 8006cce:	230a      	movs	r3, #10
 8006cd0:	e019      	b.n	8006d06 <_printf_i+0x102>
 8006cd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cd6:	6805      	ldr	r5, [r0, #0]
 8006cd8:	600b      	str	r3, [r1, #0]
 8006cda:	bf18      	it	ne
 8006cdc:	b22d      	sxthne	r5, r5
 8006cde:	e7ef      	b.n	8006cc0 <_printf_i+0xbc>
 8006ce0:	680b      	ldr	r3, [r1, #0]
 8006ce2:	6825      	ldr	r5, [r4, #0]
 8006ce4:	1d18      	adds	r0, r3, #4
 8006ce6:	6008      	str	r0, [r1, #0]
 8006ce8:	0628      	lsls	r0, r5, #24
 8006cea:	d501      	bpl.n	8006cf0 <_printf_i+0xec>
 8006cec:	681d      	ldr	r5, [r3, #0]
 8006cee:	e002      	b.n	8006cf6 <_printf_i+0xf2>
 8006cf0:	0669      	lsls	r1, r5, #25
 8006cf2:	d5fb      	bpl.n	8006cec <_printf_i+0xe8>
 8006cf4:	881d      	ldrh	r5, [r3, #0]
 8006cf6:	4854      	ldr	r0, [pc, #336]	; (8006e48 <_printf_i+0x244>)
 8006cf8:	2f6f      	cmp	r7, #111	; 0x6f
 8006cfa:	bf0c      	ite	eq
 8006cfc:	2308      	moveq	r3, #8
 8006cfe:	230a      	movne	r3, #10
 8006d00:	2100      	movs	r1, #0
 8006d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d06:	6866      	ldr	r6, [r4, #4]
 8006d08:	60a6      	str	r6, [r4, #8]
 8006d0a:	2e00      	cmp	r6, #0
 8006d0c:	bfa2      	ittt	ge
 8006d0e:	6821      	ldrge	r1, [r4, #0]
 8006d10:	f021 0104 	bicge.w	r1, r1, #4
 8006d14:	6021      	strge	r1, [r4, #0]
 8006d16:	b90d      	cbnz	r5, 8006d1c <_printf_i+0x118>
 8006d18:	2e00      	cmp	r6, #0
 8006d1a:	d04d      	beq.n	8006db8 <_printf_i+0x1b4>
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d22:	fb03 5711 	mls	r7, r3, r1, r5
 8006d26:	5dc7      	ldrb	r7, [r0, r7]
 8006d28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d2c:	462f      	mov	r7, r5
 8006d2e:	42bb      	cmp	r3, r7
 8006d30:	460d      	mov	r5, r1
 8006d32:	d9f4      	bls.n	8006d1e <_printf_i+0x11a>
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d10b      	bne.n	8006d50 <_printf_i+0x14c>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	07df      	lsls	r7, r3, #31
 8006d3c:	d508      	bpl.n	8006d50 <_printf_i+0x14c>
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	6861      	ldr	r1, [r4, #4]
 8006d42:	4299      	cmp	r1, r3
 8006d44:	bfde      	ittt	le
 8006d46:	2330      	movle	r3, #48	; 0x30
 8006d48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d50:	1b92      	subs	r2, r2, r6
 8006d52:	6122      	str	r2, [r4, #16]
 8006d54:	f8cd a000 	str.w	sl, [sp]
 8006d58:	464b      	mov	r3, r9
 8006d5a:	aa03      	add	r2, sp, #12
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	4640      	mov	r0, r8
 8006d60:	f7ff fee2 	bl	8006b28 <_printf_common>
 8006d64:	3001      	adds	r0, #1
 8006d66:	d14c      	bne.n	8006e02 <_printf_i+0x1fe>
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	b004      	add	sp, #16
 8006d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d72:	4835      	ldr	r0, [pc, #212]	; (8006e48 <_printf_i+0x244>)
 8006d74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	680e      	ldr	r6, [r1, #0]
 8006d7c:	061f      	lsls	r7, r3, #24
 8006d7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d82:	600e      	str	r6, [r1, #0]
 8006d84:	d514      	bpl.n	8006db0 <_printf_i+0x1ac>
 8006d86:	07d9      	lsls	r1, r3, #31
 8006d88:	bf44      	itt	mi
 8006d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d8e:	6023      	strmi	r3, [r4, #0]
 8006d90:	b91d      	cbnz	r5, 8006d9a <_printf_i+0x196>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f023 0320 	bic.w	r3, r3, #32
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	2310      	movs	r3, #16
 8006d9c:	e7b0      	b.n	8006d00 <_printf_i+0xfc>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f043 0320 	orr.w	r3, r3, #32
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	2378      	movs	r3, #120	; 0x78
 8006da8:	4828      	ldr	r0, [pc, #160]	; (8006e4c <_printf_i+0x248>)
 8006daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dae:	e7e3      	b.n	8006d78 <_printf_i+0x174>
 8006db0:	065e      	lsls	r6, r3, #25
 8006db2:	bf48      	it	mi
 8006db4:	b2ad      	uxthmi	r5, r5
 8006db6:	e7e6      	b.n	8006d86 <_printf_i+0x182>
 8006db8:	4616      	mov	r6, r2
 8006dba:	e7bb      	b.n	8006d34 <_printf_i+0x130>
 8006dbc:	680b      	ldr	r3, [r1, #0]
 8006dbe:	6826      	ldr	r6, [r4, #0]
 8006dc0:	6960      	ldr	r0, [r4, #20]
 8006dc2:	1d1d      	adds	r5, r3, #4
 8006dc4:	600d      	str	r5, [r1, #0]
 8006dc6:	0635      	lsls	r5, r6, #24
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	d501      	bpl.n	8006dd0 <_printf_i+0x1cc>
 8006dcc:	6018      	str	r0, [r3, #0]
 8006dce:	e002      	b.n	8006dd6 <_printf_i+0x1d2>
 8006dd0:	0671      	lsls	r1, r6, #25
 8006dd2:	d5fb      	bpl.n	8006dcc <_printf_i+0x1c8>
 8006dd4:	8018      	strh	r0, [r3, #0]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	6123      	str	r3, [r4, #16]
 8006dda:	4616      	mov	r6, r2
 8006ddc:	e7ba      	b.n	8006d54 <_printf_i+0x150>
 8006dde:	680b      	ldr	r3, [r1, #0]
 8006de0:	1d1a      	adds	r2, r3, #4
 8006de2:	600a      	str	r2, [r1, #0]
 8006de4:	681e      	ldr	r6, [r3, #0]
 8006de6:	6862      	ldr	r2, [r4, #4]
 8006de8:	2100      	movs	r1, #0
 8006dea:	4630      	mov	r0, r6
 8006dec:	f7f9 f9f0 	bl	80001d0 <memchr>
 8006df0:	b108      	cbz	r0, 8006df6 <_printf_i+0x1f2>
 8006df2:	1b80      	subs	r0, r0, r6
 8006df4:	6060      	str	r0, [r4, #4]
 8006df6:	6863      	ldr	r3, [r4, #4]
 8006df8:	6123      	str	r3, [r4, #16]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e00:	e7a8      	b.n	8006d54 <_printf_i+0x150>
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	4632      	mov	r2, r6
 8006e06:	4649      	mov	r1, r9
 8006e08:	4640      	mov	r0, r8
 8006e0a:	47d0      	blx	sl
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d0ab      	beq.n	8006d68 <_printf_i+0x164>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	079b      	lsls	r3, r3, #30
 8006e14:	d413      	bmi.n	8006e3e <_printf_i+0x23a>
 8006e16:	68e0      	ldr	r0, [r4, #12]
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	4298      	cmp	r0, r3
 8006e1c:	bfb8      	it	lt
 8006e1e:	4618      	movlt	r0, r3
 8006e20:	e7a4      	b.n	8006d6c <_printf_i+0x168>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4632      	mov	r2, r6
 8006e26:	4649      	mov	r1, r9
 8006e28:	4640      	mov	r0, r8
 8006e2a:	47d0      	blx	sl
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d09b      	beq.n	8006d68 <_printf_i+0x164>
 8006e30:	3501      	adds	r5, #1
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	9903      	ldr	r1, [sp, #12]
 8006e36:	1a5b      	subs	r3, r3, r1
 8006e38:	42ab      	cmp	r3, r5
 8006e3a:	dcf2      	bgt.n	8006e22 <_printf_i+0x21e>
 8006e3c:	e7eb      	b.n	8006e16 <_printf_i+0x212>
 8006e3e:	2500      	movs	r5, #0
 8006e40:	f104 0619 	add.w	r6, r4, #25
 8006e44:	e7f5      	b.n	8006e32 <_printf_i+0x22e>
 8006e46:	bf00      	nop
 8006e48:	08007b95 	.word	0x08007b95
 8006e4c:	08007ba6 	.word	0x08007ba6

08006e50 <memmove>:
 8006e50:	4288      	cmp	r0, r1
 8006e52:	b510      	push	{r4, lr}
 8006e54:	eb01 0402 	add.w	r4, r1, r2
 8006e58:	d902      	bls.n	8006e60 <memmove+0x10>
 8006e5a:	4284      	cmp	r4, r0
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	d807      	bhi.n	8006e70 <memmove+0x20>
 8006e60:	1e43      	subs	r3, r0, #1
 8006e62:	42a1      	cmp	r1, r4
 8006e64:	d008      	beq.n	8006e78 <memmove+0x28>
 8006e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e6e:	e7f8      	b.n	8006e62 <memmove+0x12>
 8006e70:	4402      	add	r2, r0
 8006e72:	4601      	mov	r1, r0
 8006e74:	428a      	cmp	r2, r1
 8006e76:	d100      	bne.n	8006e7a <memmove+0x2a>
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e82:	e7f7      	b.n	8006e74 <memmove+0x24>

08006e84 <_free_r>:
 8006e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e86:	2900      	cmp	r1, #0
 8006e88:	d048      	beq.n	8006f1c <_free_r+0x98>
 8006e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e8e:	9001      	str	r0, [sp, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f1a1 0404 	sub.w	r4, r1, #4
 8006e96:	bfb8      	it	lt
 8006e98:	18e4      	addlt	r4, r4, r3
 8006e9a:	f000 f8d3 	bl	8007044 <__malloc_lock>
 8006e9e:	4a20      	ldr	r2, [pc, #128]	; (8006f20 <_free_r+0x9c>)
 8006ea0:	9801      	ldr	r0, [sp, #4]
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	4615      	mov	r5, r2
 8006ea6:	b933      	cbnz	r3, 8006eb6 <_free_r+0x32>
 8006ea8:	6063      	str	r3, [r4, #4]
 8006eaa:	6014      	str	r4, [r2, #0]
 8006eac:	b003      	add	sp, #12
 8006eae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eb2:	f000 b8cd 	b.w	8007050 <__malloc_unlock>
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	d90b      	bls.n	8006ed2 <_free_r+0x4e>
 8006eba:	6821      	ldr	r1, [r4, #0]
 8006ebc:	1862      	adds	r2, r4, r1
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	bf04      	itt	eq
 8006ec2:	681a      	ldreq	r2, [r3, #0]
 8006ec4:	685b      	ldreq	r3, [r3, #4]
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	bf04      	itt	eq
 8006eca:	1852      	addeq	r2, r2, r1
 8006ecc:	6022      	streq	r2, [r4, #0]
 8006ece:	602c      	str	r4, [r5, #0]
 8006ed0:	e7ec      	b.n	8006eac <_free_r+0x28>
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b10b      	cbz	r3, 8006edc <_free_r+0x58>
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d9fa      	bls.n	8006ed2 <_free_r+0x4e>
 8006edc:	6811      	ldr	r1, [r2, #0]
 8006ede:	1855      	adds	r5, r2, r1
 8006ee0:	42a5      	cmp	r5, r4
 8006ee2:	d10b      	bne.n	8006efc <_free_r+0x78>
 8006ee4:	6824      	ldr	r4, [r4, #0]
 8006ee6:	4421      	add	r1, r4
 8006ee8:	1854      	adds	r4, r2, r1
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	6011      	str	r1, [r2, #0]
 8006eee:	d1dd      	bne.n	8006eac <_free_r+0x28>
 8006ef0:	681c      	ldr	r4, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	6053      	str	r3, [r2, #4]
 8006ef6:	4421      	add	r1, r4
 8006ef8:	6011      	str	r1, [r2, #0]
 8006efa:	e7d7      	b.n	8006eac <_free_r+0x28>
 8006efc:	d902      	bls.n	8006f04 <_free_r+0x80>
 8006efe:	230c      	movs	r3, #12
 8006f00:	6003      	str	r3, [r0, #0]
 8006f02:	e7d3      	b.n	8006eac <_free_r+0x28>
 8006f04:	6825      	ldr	r5, [r4, #0]
 8006f06:	1961      	adds	r1, r4, r5
 8006f08:	428b      	cmp	r3, r1
 8006f0a:	bf04      	itt	eq
 8006f0c:	6819      	ldreq	r1, [r3, #0]
 8006f0e:	685b      	ldreq	r3, [r3, #4]
 8006f10:	6063      	str	r3, [r4, #4]
 8006f12:	bf04      	itt	eq
 8006f14:	1949      	addeq	r1, r1, r5
 8006f16:	6021      	streq	r1, [r4, #0]
 8006f18:	6054      	str	r4, [r2, #4]
 8006f1a:	e7c7      	b.n	8006eac <_free_r+0x28>
 8006f1c:	b003      	add	sp, #12
 8006f1e:	bd30      	pop	{r4, r5, pc}
 8006f20:	200049b0 	.word	0x200049b0

08006f24 <_malloc_r>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	1ccd      	adds	r5, r1, #3
 8006f28:	f025 0503 	bic.w	r5, r5, #3
 8006f2c:	3508      	adds	r5, #8
 8006f2e:	2d0c      	cmp	r5, #12
 8006f30:	bf38      	it	cc
 8006f32:	250c      	movcc	r5, #12
 8006f34:	2d00      	cmp	r5, #0
 8006f36:	4606      	mov	r6, r0
 8006f38:	db01      	blt.n	8006f3e <_malloc_r+0x1a>
 8006f3a:	42a9      	cmp	r1, r5
 8006f3c:	d903      	bls.n	8006f46 <_malloc_r+0x22>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	6033      	str	r3, [r6, #0]
 8006f42:	2000      	movs	r0, #0
 8006f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f46:	f000 f87d 	bl	8007044 <__malloc_lock>
 8006f4a:	4921      	ldr	r1, [pc, #132]	; (8006fd0 <_malloc_r+0xac>)
 8006f4c:	680a      	ldr	r2, [r1, #0]
 8006f4e:	4614      	mov	r4, r2
 8006f50:	b99c      	cbnz	r4, 8006f7a <_malloc_r+0x56>
 8006f52:	4f20      	ldr	r7, [pc, #128]	; (8006fd4 <_malloc_r+0xb0>)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	b923      	cbnz	r3, 8006f62 <_malloc_r+0x3e>
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f000 f862 	bl	8007024 <_sbrk_r>
 8006f60:	6038      	str	r0, [r7, #0]
 8006f62:	4629      	mov	r1, r5
 8006f64:	4630      	mov	r0, r6
 8006f66:	f000 f85d 	bl	8007024 <_sbrk_r>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d123      	bne.n	8006fb6 <_malloc_r+0x92>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	4630      	mov	r0, r6
 8006f74:	f000 f86c 	bl	8007050 <__malloc_unlock>
 8006f78:	e7e3      	b.n	8006f42 <_malloc_r+0x1e>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	1b5b      	subs	r3, r3, r5
 8006f7e:	d417      	bmi.n	8006fb0 <_malloc_r+0x8c>
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	d903      	bls.n	8006f8c <_malloc_r+0x68>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	441c      	add	r4, r3
 8006f88:	6025      	str	r5, [r4, #0]
 8006f8a:	e004      	b.n	8006f96 <_malloc_r+0x72>
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	42a2      	cmp	r2, r4
 8006f90:	bf0c      	ite	eq
 8006f92:	600b      	streq	r3, [r1, #0]
 8006f94:	6053      	strne	r3, [r2, #4]
 8006f96:	4630      	mov	r0, r6
 8006f98:	f000 f85a 	bl	8007050 <__malloc_unlock>
 8006f9c:	f104 000b 	add.w	r0, r4, #11
 8006fa0:	1d23      	adds	r3, r4, #4
 8006fa2:	f020 0007 	bic.w	r0, r0, #7
 8006fa6:	1ac2      	subs	r2, r0, r3
 8006fa8:	d0cc      	beq.n	8006f44 <_malloc_r+0x20>
 8006faa:	1a1b      	subs	r3, r3, r0
 8006fac:	50a3      	str	r3, [r4, r2]
 8006fae:	e7c9      	b.n	8006f44 <_malloc_r+0x20>
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	6864      	ldr	r4, [r4, #4]
 8006fb4:	e7cc      	b.n	8006f50 <_malloc_r+0x2c>
 8006fb6:	1cc4      	adds	r4, r0, #3
 8006fb8:	f024 0403 	bic.w	r4, r4, #3
 8006fbc:	42a0      	cmp	r0, r4
 8006fbe:	d0e3      	beq.n	8006f88 <_malloc_r+0x64>
 8006fc0:	1a21      	subs	r1, r4, r0
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f000 f82e 	bl	8007024 <_sbrk_r>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d1dd      	bne.n	8006f88 <_malloc_r+0x64>
 8006fcc:	e7cf      	b.n	8006f6e <_malloc_r+0x4a>
 8006fce:	bf00      	nop
 8006fd0:	200049b0 	.word	0x200049b0
 8006fd4:	200049b4 	.word	0x200049b4

08006fd8 <_realloc_r>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	4607      	mov	r7, r0
 8006fdc:	4614      	mov	r4, r2
 8006fde:	460e      	mov	r6, r1
 8006fe0:	b921      	cbnz	r1, 8006fec <_realloc_r+0x14>
 8006fe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	f7ff bf9c 	b.w	8006f24 <_malloc_r>
 8006fec:	b922      	cbnz	r2, 8006ff8 <_realloc_r+0x20>
 8006fee:	f7ff ff49 	bl	8006e84 <_free_r>
 8006ff2:	4625      	mov	r5, r4
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff8:	f000 f830 	bl	800705c <_malloc_usable_size_r>
 8006ffc:	42a0      	cmp	r0, r4
 8006ffe:	d20f      	bcs.n	8007020 <_realloc_r+0x48>
 8007000:	4621      	mov	r1, r4
 8007002:	4638      	mov	r0, r7
 8007004:	f7ff ff8e 	bl	8006f24 <_malloc_r>
 8007008:	4605      	mov	r5, r0
 800700a:	2800      	cmp	r0, #0
 800700c:	d0f2      	beq.n	8006ff4 <_realloc_r+0x1c>
 800700e:	4631      	mov	r1, r6
 8007010:	4622      	mov	r2, r4
 8007012:	f7ff fbf7 	bl	8006804 <memcpy>
 8007016:	4631      	mov	r1, r6
 8007018:	4638      	mov	r0, r7
 800701a:	f7ff ff33 	bl	8006e84 <_free_r>
 800701e:	e7e9      	b.n	8006ff4 <_realloc_r+0x1c>
 8007020:	4635      	mov	r5, r6
 8007022:	e7e7      	b.n	8006ff4 <_realloc_r+0x1c>

08007024 <_sbrk_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d06      	ldr	r5, [pc, #24]	; (8007040 <_sbrk_r+0x1c>)
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	602b      	str	r3, [r5, #0]
 8007030:	f7fa fc0e 	bl	8001850 <_sbrk>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_sbrk_r+0x1a>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_sbrk_r+0x1a>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	20004f48 	.word	0x20004f48

08007044 <__malloc_lock>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__malloc_lock+0x8>)
 8007046:	f000 b811 	b.w	800706c <__retarget_lock_acquire_recursive>
 800704a:	bf00      	nop
 800704c:	20004f50 	.word	0x20004f50

08007050 <__malloc_unlock>:
 8007050:	4801      	ldr	r0, [pc, #4]	; (8007058 <__malloc_unlock+0x8>)
 8007052:	f000 b80c 	b.w	800706e <__retarget_lock_release_recursive>
 8007056:	bf00      	nop
 8007058:	20004f50 	.word	0x20004f50

0800705c <_malloc_usable_size_r>:
 800705c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007060:	1f18      	subs	r0, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfbc      	itt	lt
 8007066:	580b      	ldrlt	r3, [r1, r0]
 8007068:	18c0      	addlt	r0, r0, r3
 800706a:	4770      	bx	lr

0800706c <__retarget_lock_acquire_recursive>:
 800706c:	4770      	bx	lr

0800706e <__retarget_lock_release_recursive>:
 800706e:	4770      	bx	lr

08007070 <_init>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr

0800707c <_fini>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr
